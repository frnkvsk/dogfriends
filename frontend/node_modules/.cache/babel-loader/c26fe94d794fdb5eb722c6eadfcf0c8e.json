{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getPosts, getPostById, postPostNew, putPostUpdate, deletePost } from './api/MicroblogApi';\nexport const getPostsData = createAsyncThunk('getPosts', async () => {\n  const response = await getPosts();\n  return response.data;\n});\nexport const getPostDataById = createAsyncThunk('getPostById', async id => {\n  const response = await getPostById(id);\n  return response.data;\n});\nexport const microblogPostsSlice = createSlice({\n  name: 'postList',\n  initialState: {\n    postList: {\n      status: 'idle',\n      data: [],\n      error: {}\n    }\n  },\n  reducers: {\n    addNewPost: (state, action) => {\n      const {\n        title,\n        description,\n        body,\n        token\n      } = action.payload;\n      postPostNew(title, description, body, token);\n    },\n    editPost: (state, action) => {\n      const {\n        id,\n        title,\n        description,\n        body,\n        username,\n        token\n      } = action.payload;\n      putPostUpdate(id, title, description, body, username, token);\n    },\n    removePost: (state, action) => {\n      deletePost(action.payload.id, action.payload.username, action.payload.token);\n    }\n  },\n  extraReducers: {\n    // get all posts\n    [getPostsData.pending]: (state, action) => {\n      state.postList = {\n        status: 'pending',\n        data: {},\n        error: {}\n      };\n    },\n    [getPostsData.fulfilled]: (state, action) => {\n      state.postList = {\n        status: 'fulfilled',\n        data: action.payload,\n        error: {}\n      };\n    },\n    [getPostsData.rejected]: (state, action) => {\n      state.postList = {\n        status: 'rejected',\n        data: {},\n        error: action.payload\n      };\n    },\n    // get post by id\n    [getPostDataById.pending]: (state, action) => {\n      state.postList = {\n        status: 'pending',\n        data: {},\n        error: {}\n      };\n    },\n    [getPostDataById.fulfilled]: (state, action) => {\n      state.postList = {\n        status: 'fulfilled',\n        data: action.payload,\n        error: {}\n      };\n    },\n    [getPostDataById.rejected]: (state, action) => {\n      state.postList = {\n        status: 'rejected',\n        data: {},\n        error: action.payload\n      };\n    }\n  }\n});\nexport const {\n  addNewPost,\n  editPost,\n  removePost\n} = microblogPostsSlice.actions;\nexport const selectPosts = state => state.postList.postList;\nexport default microblogPostsSlice.reducer;","map":{"version":3,"sources":["/home/fv/js/capstone2/dogfriends/frontend/dogfriends-app/src/features/dogfriends/dogfriendsPostsSlice.js"],"names":["createAsyncThunk","createSlice","getPosts","getPostById","postPostNew","putPostUpdate","deletePost","getPostsData","response","data","getPostDataById","id","microblogPostsSlice","name","initialState","postList","status","error","reducers","addNewPost","state","action","title","description","body","token","payload","editPost","username","removePost","extraReducers","pending","fulfilled","rejected","actions","selectPosts","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport {\n  getPosts,\n  getPostById,\n  postPostNew,\n  putPostUpdate,\n  deletePost,\n} from './api/MicroblogApi';\n\nexport const getPostsData = createAsyncThunk(\n  'getPosts',\n  async () => {\n    const response = await getPosts();\n    return response.data;\n  }\n);\n\nexport const getPostDataById = createAsyncThunk(\n  'getPostById',\n  async (id) => {\n    const response = await getPostById(id);\n    return response.data;\n  }\n);\n\nexport const microblogPostsSlice = createSlice({\n  name: 'postList',\n  initialState: {\n    postList: {\n      status: 'idle',\n      data: [],\n      error: {}\n    }\n  },\n  reducers: {\n    addNewPost: (state, action) => {\n      const {title, description, body, token} = action.payload;\n      postPostNew(title, description, body, token);\n    },\n    editPost: (state, action) => {\n      const {id, title, description, body, username, token} = action.payload;\n      putPostUpdate(id, title, description, body, username,token);\n    },\n    removePost: (state, action) => {\n      deletePost(action.payload.id, action.payload.username, action.payload.token);\n    },\n  },\n  extraReducers: {\n    // get all posts\n    [getPostsData.pending]: (state, action) => {\n      state.postList = {\n        status: 'pending',\n        data: {},\n        error: {}\n      };\n    },\n    [getPostsData.fulfilled]: (state, action) => {\n      state.postList = {\n        status: 'fulfilled',\n        data: action.payload,\n        error: {}\n      };\n    },\n    [getPostsData.rejected]: (state, action) => {\n      state.postList = {\n        status: 'rejected',\n        data: {},\n        error: action.payload,\n      };\n    },\n    // get post by id\n    [getPostDataById.pending]: (state, action) => {\n      state.postList = {\n        status: 'pending',\n        data: {},\n        error: {}\n      };\n    },\n    [getPostDataById.fulfilled]: (state, action) => {\n      state.postList = {\n        status: 'fulfilled',\n        data: action.payload,\n        error: {}\n      };\n    },\n    [getPostDataById.rejected]: (state, action) => {\n      state.postList = {\n        status: 'rejected',\n        data: {},\n        error: action.payload,\n      };\n    },    \n  }\n});\n\nexport const {\n  addNewPost,\n  editPost,\n  removePost,\n} = microblogPostsSlice.actions;\n\nexport const selectPosts = state => state.postList.postList;\n\nexport default microblogPostsSlice.reducer;"]},"metadata":{},"sourceType":"module"}