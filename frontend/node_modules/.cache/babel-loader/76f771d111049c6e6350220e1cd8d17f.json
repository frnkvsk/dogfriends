{"ast":null,"code":"// import Resizer from 'react-image-file-resizer';\n// const resizeFile = (file, w, h) => new Promise(resolve => {\n//   // const fr = new FileReader();\n//   var image = new Image();\n//   image.url = file[0].data_url;\n//   var canvas=document.createElement(\"canvas\");\n//   var context=canvas.getContext(\"2d\");\n//   canvas.width=w //image.width/4;\n//   canvas.height=h //image.height/4;\n//   context.drawImage(image,\n//       0,\n//       0,\n//       image.width,\n//       image.height,\n//       0,\n//       0,\n//       canvas.width,\n//       canvas.height\n//   );\n//   image.src = canvas.toDataURL();\n//   console.log('resizeFile image',image)\n//   console.log('resizeFile image.width',image.width)\n//   return image\n// });\n// var loadImageFile = function () {\n//   var uploadImage = document.getElementById(\"upload-Image\");\n//   //check and retuns the length of uploded file.\n//   if (uploadImage.files.length === 0) { \n//     return; \n//   }\n//   //Is Used for validate a valid file.\n//   var uploadFile = document.getElementById(\"upload-Image\").files[0];\n//   if (!filterType.test(uploadFile.type)) {\n//     alert(\"Please select a valid image.\"); \n//     return;\n//   }\n//   fileReader.readAsDataURL(uploadFile);\n// }\nlet img = new Image();\n\nconst ResizeImage = async (file, width, height) => {\n  let fileReader = new FileReader();\n\n  const resize = async () => {\n    let canvas = document.createElement(\"canvas\");\n    let context = canvas.getContext(\"2d\");\n    canvas.width = width;\n    canvas.height = height; // console.log('ResizeImage img',img)\n\n    context.drawImage(img, 0, 0, width, height, 0, 0, width, height); // console.log('canvas',canvas.toDataURL())\n\n    return canvas.toDataURL();\n  };\n\n  let blob = new Blob(Buffer.from(file[0].data_url));\n  fileReader.readAsArrayBuffer(blob);\n  img.src = file[0].data_url;\n  return await resize(); // const res = resized;//await resizeFile(file, width, height);\n  // console.log('res',res)\n  // return res\n};\n\n_c = ResizeImage;\nexport default ResizeImage; // Resizer.imageFileResizer(\n//     file, // Is the file of the image which will resized.\n//     maxWidth, // Is the maxWidth of the resized new image.\n//     maxHeight, // Is the maxHeight of the resized new image.\n//     compressFormat, // Is the compressFormat of the resized new image.\n//     quality, // Is the quality of the resized new image.\n//     rotation, // Is the degree of clockwise rotation to apply to uploaded image. \n//     responseUriFunc,  // Is the callBack function of the resized new image URI.\n//     outputType,  // Is the output type of the resized new image.\n//     minWidth, // Is the minWidth of the resized new image.\n//     minHeight, // Is the minHeight of the resized new image.\n//     );\n\nvar _c;\n\n$RefreshReg$(_c, \"ResizeImage\");","map":{"version":3,"sources":["/home/fv/js/capstone2/dogfriends/frontend/src/features/dogfriends/components/ResizeImage.js"],"names":["img","Image","ResizeImage","file","width","height","fileReader","FileReader","resize","canvas","document","createElement","context","getContext","drawImage","toDataURL","blob","Blob","Buffer","from","data_url","readAsArrayBuffer","src"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,IAAIA,GAAG,GAAG,IAAIC,KAAJ,EAAV;;AAGA,MAAMC,WAAW,GAAG,OAAOC,IAAP,EAAaC,KAAb,EAAoBC,MAApB,KAA+B;AACjD,MAAIC,UAAU,GAAG,IAAIC,UAAJ,EAAjB;;AACA,QAAMC,MAAM,GAAG,YAAW;AACxB,QAAIC,MAAM,GAACC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAX;AACA,QAAIC,OAAO,GAACH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AACAJ,IAAAA,MAAM,CAACL,KAAP,GAAaA,KAAb;AACAK,IAAAA,MAAM,CAACJ,MAAP,GAAcA,MAAd,CAJwB,CAKxB;;AACAO,IAAAA,OAAO,CAACE,SAAR,CAAkBd,GAAlB,EACI,CADJ,EAEI,CAFJ,EAGII,KAHJ,EAIIC,MAJJ,EAKI,CALJ,EAMI,CANJ,EAOID,KAPJ,EAQIC,MARJ,EANwB,CAgBxB;;AACA,WAAOI,MAAM,CAACM,SAAP,EAAP;AAED,GAnBD;;AAqBA,MAAIC,IAAI,GAAG,IAAIC,IAAJ,CAASC,MAAM,CAACC,IAAP,CAAYhB,IAAI,CAAC,CAAD,CAAJ,CAAQiB,QAApB,CAAT,CAAX;AACAd,EAAAA,UAAU,CAACe,iBAAX,CAA6BL,IAA7B;AACAhB,EAAAA,GAAG,CAACsB,GAAJ,GAAUnB,IAAI,CAAC,CAAD,CAAJ,CAAQiB,QAAlB;AACA,SAAO,MAAMZ,MAAM,EAAnB,CA1BiD,CA2BjD;AACA;AACA;AACD,CA9BD;;KAAMN,W;AAgCN,eAAeA,WAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import Resizer from 'react-image-file-resizer';\n\n// const resizeFile = (file, w, h) => new Promise(resolve => {\n//   // const fr = new FileReader();\n//   var image = new Image();\n//   image.url = file[0].data_url;\n//   var canvas=document.createElement(\"canvas\");\n//   var context=canvas.getContext(\"2d\");\n//   canvas.width=w //image.width/4;\n//   canvas.height=h //image.height/4;\n//   context.drawImage(image,\n//       0,\n//       0,\n//       image.width,\n//       image.height,\n//       0,\n//       0,\n//       canvas.width,\n//       canvas.height\n//   );\n  \n//   image.src = canvas.toDataURL();\n//   console.log('resizeFile image',image)\n//   console.log('resizeFile image.width',image.width)\n//   return image\n// });\n\n\n// var loadImageFile = function () {\n//   var uploadImage = document.getElementById(\"upload-Image\");\n  \n//   //check and retuns the length of uploded file.\n//   if (uploadImage.files.length === 0) { \n//     return; \n//   }\n  \n//   //Is Used for validate a valid file.\n//   var uploadFile = document.getElementById(\"upload-Image\").files[0];\n//   if (!filterType.test(uploadFile.type)) {\n//     alert(\"Please select a valid image.\"); \n//     return;\n//   }\n  \n//   fileReader.readAsDataURL(uploadFile);\n// }\nlet img = new Image();\n    \n  \nconst ResizeImage = async (file, width, height) => {\n  let fileReader = new FileReader();\n  const resize = async () =>{\n    let canvas=document.createElement(\"canvas\");\n    let context=canvas.getContext(\"2d\");\n    canvas.width=width;\n    canvas.height=height;\n    // console.log('ResizeImage img',img)\n    context.drawImage(img,\n        0,\n        0,\n        width,\n        height,\n        0,\n        0,\n        width,\n        height\n    );\n    // console.log('canvas',canvas.toDataURL())\n    return canvas.toDataURL();\n    \n  }\n  \n  let blob = new Blob(Buffer.from(file[0].data_url));\n  fileReader.readAsArrayBuffer(blob);\n  img.src = file[0].data_url;\n  return await resize();\n  // const res = resized;//await resizeFile(file, width, height);\n  // console.log('res',res)\n  // return res\n}\n\nexport default ResizeImage\n// Resizer.imageFileResizer(\n//     file, // Is the file of the image which will resized.\n//     maxWidth, // Is the maxWidth of the resized new image.\n//     maxHeight, // Is the maxHeight of the resized new image.\n//     compressFormat, // Is the compressFormat of the resized new image.\n//     quality, // Is the quality of the resized new image.\n//     rotation, // Is the degree of clockwise rotation to apply to uploaded image. \n//     responseUriFunc,  // Is the callBack function of the resized new image URI.\n//     outputType,  // Is the output type of the resized new image.\n//     minWidth, // Is the minWidth of the resized new image.\n//     minHeight, // Is the minHeight of the resized new image.\n//     );"]},"metadata":{},"sourceType":"module"}