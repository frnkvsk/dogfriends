{"ast":null,"code":"// import Resizer from 'react-image-file-resizer';\nconst resizeFile = (file, w, h) => new Promise(resolve => {\n  // const fr = new FileReader();\n  var image = new Image();\n  image.url = file[0].data_url;\n  var canvas = document.createElement(\"canvas\");\n  var context = canvas.getContext(\"2d\");\n  canvas.width = w; //image.width/4;\n\n  canvas.height = h; //image.height/4;\n\n  context.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);\n  image.src = canvas.toDataURL();\n  console.log('resizeFile image', image);\n  return image;\n});\n\nconst ResizeImage = async (file, width, height) => {\n  const res = await resizeFile(file, width, height);\n  console.log('res', res);\n  return res;\n};\n\n_c = ResizeImage;\nexport default ResizeImage; // Resizer.imageFileResizer(\n//     file, // Is the file of the image which will resized.\n//     maxWidth, // Is the maxWidth of the resized new image.\n//     maxHeight, // Is the maxHeight of the resized new image.\n//     compressFormat, // Is the compressFormat of the resized new image.\n//     quality, // Is the quality of the resized new image.\n//     rotation, // Is the degree of clockwise rotation to apply to uploaded image. \n//     responseUriFunc,  // Is the callBack function of the resized new image URI.\n//     outputType,  // Is the output type of the resized new image.\n//     minWidth, // Is the minWidth of the resized new image.\n//     minHeight, // Is the minHeight of the resized new image.\n//     );\n\nvar _c;\n\n$RefreshReg$(_c, \"ResizeImage\");","map":{"version":3,"sources":["/home/fv/js/capstone2/dogfriends/frontend/src/features/dogfriends/components/ResizeImage.js"],"names":["resizeFile","file","w","h","Promise","resolve","image","Image","url","data_url","canvas","document","createElement","context","getContext","width","height","drawImage","src","toDataURL","console","log","ResizeImage","res"],"mappings":"AAAA;AAEA,MAAMA,UAAU,GAAG,CAACC,IAAD,EAAOC,CAAP,EAAUC,CAAV,KAAgB,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AACxD;AACA,MAAIC,KAAK,GAAG,IAAIC,KAAJ,EAAZ;AACAD,EAAAA,KAAK,CAACE,GAAN,GAAYP,IAAI,CAAC,CAAD,CAAJ,CAAQQ,QAApB;AACA,MAAIC,MAAM,GAACC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAX;AACA,MAAIC,OAAO,GAACH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AACAJ,EAAAA,MAAM,CAACK,KAAP,GAAab,CAAb,CANwD,CAMzC;;AACfQ,EAAAA,MAAM,CAACM,MAAP,GAAcb,CAAd,CAPwD,CAOxC;;AAChBU,EAAAA,OAAO,CAACI,SAAR,CAAkBX,KAAlB,EACI,CADJ,EAEI,CAFJ,EAGIA,KAAK,CAACS,KAHV,EAIIT,KAAK,CAACU,MAJV,EAKI,CALJ,EAMI,CANJ,EAOIN,MAAM,CAACK,KAPX,EAQIL,MAAM,CAACM,MARX;AAWAV,EAAAA,KAAK,CAACY,GAAN,GAAYR,MAAM,CAACS,SAAP,EAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAA+Bf,KAA/B;AACA,SAAOA,KAAP;AACD,CAtBkC,CAAnC;;AAwBA,MAAMgB,WAAW,GAAG,OAAOrB,IAAP,EAAac,KAAb,EAAoBC,MAApB,KAA+B;AACjD,QAAMO,GAAG,GAAG,MAAMvB,UAAU,CAACC,IAAD,EAAOc,KAAP,EAAcC,MAAd,CAA5B;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBE,GAAlB;AACA,SAAOA,GAAP;AACD,CAJD;;KAAMD,W;AAMN,eAAeA,WAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import Resizer from 'react-image-file-resizer';\n\nconst resizeFile = (file, w, h) => new Promise(resolve => {\n  // const fr = new FileReader();\n  var image = new Image();\n  image.url = file[0].data_url;\n  var canvas=document.createElement(\"canvas\");\n  var context=canvas.getContext(\"2d\");\n  canvas.width=w //image.width/4;\n  canvas.height=h //image.height/4;\n  context.drawImage(image,\n      0,\n      0,\n      image.width,\n      image.height,\n      0,\n      0,\n      canvas.width,\n      canvas.height\n  );\n  \n  image.src = canvas.toDataURL();\n  console.log('resizeFile image',image)\n  return image\n});\n\nconst ResizeImage = async (file, width, height) => {\n  const res = await resizeFile(file, width, height);\n  console.log('res',res)\n  return res\n}\n\nexport default ResizeImage\n// Resizer.imageFileResizer(\n//     file, // Is the file of the image which will resized.\n//     maxWidth, // Is the maxWidth of the resized new image.\n//     maxHeight, // Is the maxHeight of the resized new image.\n//     compressFormat, // Is the compressFormat of the resized new image.\n//     quality, // Is the quality of the resized new image.\n//     rotation, // Is the degree of clockwise rotation to apply to uploaded image. \n//     responseUriFunc,  // Is the callBack function of the resized new image URI.\n//     outputType,  // Is the output type of the resized new image.\n//     minWidth, // Is the minWidth of the resized new image.\n//     minHeight, // Is the minHeight of the resized new image.\n//     );"]},"metadata":{},"sourceType":"module"}