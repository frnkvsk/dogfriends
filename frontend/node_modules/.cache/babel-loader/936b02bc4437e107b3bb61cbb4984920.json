{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = 'http://localhost:5000/api/';\n\nconst request = async (endpoint, paramsOrData = {}, verb = \"get\") => {\n  console.debug(\"API Call:\", endpoint, paramsOrData, verb);\n\n  try {\n    const res = await axios({\n      method: verb,\n      url: `${BASE_URL}${endpoint}`,\n      [verb === \"get\" ? \"params\" : \"data\"]: paramsOrData\n    });\n    return res; // axios sends query string data via the \"params\" key,\n    // and request body data via the \"data\" key,\n    // so the key we need depends on the HTTP verb\n  } catch (err) {\n    let message = err.response ? err.response.data.message : err;\n    throw Array.isArray(message) ? message : [message];\n  }\n}; // posts\n\n\nconst getPosts = async () => {\n  let res = await request('posts');\n  return res;\n};\n\nconst getPostById = async id => {\n  return await request(`posts/${id}`);\n};\n\nconst postPostVote = async (id, direction, token) => {\n  return await request(`posts/${id}/vote/${direction}`, {\n    _token: token\n  }, 'post');\n};\n\nconst postPostNew = async (title, parent_id, photo_id, body, token) => {\n  const data = {\n    title: title,\n    parent_id: parent_id,\n    photo_id: photo_id,\n    body: body,\n    _token: token\n  };\n  return await request('posts/', data, 'post');\n};\n\nconst putPostUpdate = async (id, title, body, username, token) => {\n  const data = {\n    title: title,\n    body: body,\n    username: username,\n    _token: token\n  };\n  return await request(`posts/${id}`, data, 'put');\n};\n\nconst deletePost = async (id, username, token) => {\n  const data = {\n    id: id,\n    username: username,\n    _token: token\n  };\n  return await request(`posts/${id}`, data, 'delete');\n}; // comments\n\n\nconst getComments = async id => {\n  return await request(`posts/comments/${id}`);\n};\n\nconst postCommentNew = async (id, text, token) => {\n  const res = await request(`posts/comments/${id}`, {\n    text: text,\n    _token: token\n  }, 'post');\n  return res;\n};\n\nconst putCommentUpdate = async (id, text, token) => {\n  const res = await request(`posts/comments/${id}`, {\n    text: text,\n    _token: token\n  }, 'put');\n  return res;\n};\n\nconst deleteComment = async (id, username, token) => {\n  return await request(`posts/comments/${id}`, {\n    username: username,\n    _token: token\n  }, 'delete');\n}; // login / signup\n\n\nconst login = async (username, password) => {\n  try {\n    return await request('login/', {\n      username: username,\n      password: password\n    }, 'post');\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst signup = async ({\n  username,\n  password,\n  first_name,\n  last_name,\n  email,\n  photo_url,\n  admin,\n  city,\n  state,\n  country\n}) => {\n  try {\n    return await request('users/', {\n      username: username,\n      password: password,\n      first_name: first_name,\n      last_name: last_name,\n      email: email,\n      photo_url: photo_url,\n      admin: false,\n      city: city,\n      state: state,\n      country: country\n    }, 'post');\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst getUserInfo = async (token, username) => {\n  try {\n    return await request(`users/${username}/`, {\n      _token: token\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst patchUserInfo = async (token, userInfo) => {\n  userInfo._token = token;\n\n  try {\n    return await request(`users/${userInfo.username}/`, userInfo, 'patch');\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport { getPosts, getPostById, postPostVote, postPostNew, putPostUpdate, deletePost, getComments, postCommentNew, putCommentUpdate, deleteComment, login, signup, getUserInfo, patchUserInfo };","map":{"version":3,"sources":["/home/fv/js/capstone2/dogfriends/frontend/src/features/dogfriends/api/DogfriendsApi.js"],"names":["axios","BASE_URL","request","endpoint","paramsOrData","verb","console","debug","res","method","url","err","message","response","data","Array","isArray","getPosts","getPostById","id","postPostVote","direction","token","_token","postPostNew","title","parent_id","photo_id","body","putPostUpdate","username","deletePost","getComments","postCommentNew","text","putCommentUpdate","deleteComment","login","password","error","signup","first_name","last_name","email","photo_url","admin","city","state","country","getUserInfo","patchUserInfo","userInfo"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\n\nconst BASE_URL = 'http://localhost:5000/api/';\n\nconst request = async (endpoint, paramsOrData = {}, verb = \"get\") => {  \n  \n  console.debug(\"API Call:\", endpoint, paramsOrData, verb);\n\n  try {\n    const res = await axios({\n      method: verb,\n      url: `${BASE_URL}${endpoint}`,\n      [verb === \"get\" ? \"params\" : \"data\"]: paramsOrData});\n    \n    return res;\n      // axios sends query string data via the \"params\" key,\n      // and request body data via the \"data\" key,\n      // so the key we need depends on the HTTP verb\n  }catch(err) {\n    let message = err.response ? err.response.data.message : err;\n    throw Array.isArray(message) ? message : [message];\n  }\n}\n// posts\nconst getPosts = async () => {\n  let res = await request('posts');\n  return res;\n}\nconst getPostById = async (id) => {\n  return await request(`posts/${id}`);\n}\nconst postPostVote = async (id, direction, token) => {\n  return await request(`posts/${id}/vote/${direction}`, {_token: token}, 'post');\n}\nconst postPostNew = async (title, parent_id, photo_id, body, token) => {\n  const data = {\n    title: title,\n    parent_id: parent_id, \n    photo_id: photo_id, \n    body: body, \n    _token: token   \n  }\n  return await request('posts/', data, 'post');\n}\nconst putPostUpdate = async (id, title, body, username, token) => {\n  \n  const data = {\n    title: title,\n    body: body,  \n    username: username,\n    _token: token  \n  }\n  return await request(`posts/${id}`, data, 'put');\n}\nconst deletePost = async (id, username, token) => {\n  const data = {\n    id: id,\n    username: username,\n    _token: token  \n  }\n  return await request(`posts/${id}`, data, 'delete');\n}\n\n// comments\nconst getComments = async (id) => {\n  return await request(`posts/comments/${id}`)\n}\nconst postCommentNew = async (id, text, token) => {\n  const res = await request(`posts/comments/${id}`, {text: text, _token: token}, 'post');\n  return res\n}\nconst putCommentUpdate = async (id, text, token) => {\n  const res = await request(`posts/comments/${id}`, {text: text, _token: token}, 'put');\n  return res\n}\nconst deleteComment = async (id, username, token) => {\n  return await request(`posts/comments/${id}`, {username: username, _token: token}, 'delete');\n}\n\n// login / signup\nconst login = async (username, password) => {\n  try {\n    return await request('login/', {username: username, password: password}, 'post');\n  } catch (error) {\n    console.error(error);\n  }   \n}\nconst signup = async (\n                      {username, \n                      password, \n                      first_name, \n                      last_name, \n                      email, \n                      photo_url, \n                      admin, \n                      city, \n                      state, \n                      country}) => {\n  \n  try {\n    return await request('users/', {\n      username: username, \n      password: password, \n      first_name: first_name, \n      last_name: last_name, \n      email: email,\n      photo_url: photo_url, \n      admin: false, \n      city: city, \n      state: state, \n      country: country, \n      }, 'post');\n  } catch (error) {\n    console.error(error);\n  }   \n}\nconst getUserInfo = async (token, username) => {\n  try {\n    return await request(`users/${username}/`, {_token: token});\n  } catch (error) {\n    console.error(error);\n  }   \n}\nconst patchUserInfo = async (token, userInfo) => {\n  userInfo._token = token;\n  try {\n    return await request(`users/${userInfo.username}/`, userInfo, 'patch');\n  } catch (error) {\n    console.error(error);\n  }   \n}\n\n\nexport {\n  getPosts,\n  getPostById,\n  postPostVote,\n  postPostNew,\n  putPostUpdate,\n  deletePost,\n  getComments,\n  postCommentNew,\n  putCommentUpdate,\n  deleteComment,\n  login,\n  signup,\n  getUserInfo,\n  patchUserInfo,\n};"]},"metadata":{},"sourceType":"module"}