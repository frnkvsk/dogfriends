{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = 'http://localhost:5000/api/';\n\nconst request = async (endpoint, paramsOrData = {}, verb = \"get\") => {\n  console.log(\"API Call:\", endpoint, paramsOrData, verb, BASE_URL);\n\n  try {\n    const res = await axios({\n      method: verb,\n      url: `${BASE_URL}${endpoint}`,\n      [verb === \"get\" ? \"params\" : \"data\"]: paramsOrData\n    });\n    return res; // axios sends query string data via the \"params\" key,\n    // and request body data via the \"data\" key,\n    // so the key we need depends on the HTTP verb\n  } catch (err) {\n    let message = err.response ? err.response.data.message : err;\n    throw Array.isArray(message) ? message : [message];\n  }\n}; // posts\n\n\nconst getPosts = async () => {\n  let res = await request('posts');\n  return res;\n};\n\nconst getPostById = async id => {\n  return await request(`posts/${id}`);\n};\n\nconst postPostVote = async (id, direction, token) => {\n  return await request(`posts/${id}/vote/${direction}`, {\n    _token: token\n  }, 'post');\n};\n\nconst postPostNew = async (title, parent_id, photo_id, body, token) => {\n  const data = {\n    title: title,\n    parent_id: parent_id,\n    photo_id: photo_id,\n    body: body,\n    _token: token\n  };\n  return await request('posts/', data, 'post');\n};\n\nconst putPostUpdate = async (id, title, body, username, token) => {\n  const data = {\n    title: title,\n    body: body,\n    username: username,\n    _token: token\n  };\n  return await request(`posts/${id}`, data, 'put');\n};\n\nconst deletePost = async (id, username, token) => {\n  const data = {\n    id: id,\n    username: username,\n    _token: token\n  };\n  return await request(`posts/${id}`, data, 'delete');\n}; // login / signup\n\n\nconst login = async data => {\n  // console.log('DogfriendsApi login data',data)\n  try {\n    return await request('login/', data, 'post');\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst preSignupUsernameCheck = async ({\n  username\n}) => {\n  try {\n    // console.log('DogfriendsApi preSignupUsernameCheck username',username)\n    const res = await request(`users/${username}`, {}, 'post'); // console.log('--DogfriendsApi preSignupUsernameCheck res',res.data)\n\n    return res.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst signup = async ( // {username, \n  //                     password, \n  //                     first_name, \n  //                     last_name, \n  //                     email, \n  //                     photo_id, \n  //                     city, \n  //                     state, \n  //                     country}\n  data) => {\n  console.log('DogfriendsApi signup', data); //  username, \n  //  password, \n  //  first_name, \n  //  last_name, \n  //  email, \n  //  photo_id, \n  //  city, \n  //  state, \n  //  country)                 \n\n  try {\n    const res = await request('users/', // {\n    //   username: username, \n    //   password: password, \n    //   first_name: first_name, \n    //   last_name: last_name, \n    //   email: email,\n    //   photo_id: photo_id,\n    //   admin: false, \n    //   city: city, \n    //   state: state, \n    //   country: country, \n    //   }, \n    data, 'post');\n    console.log('DogfriendsApi signup res', res);\n    return res;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst getUserInfo = async payload => {\n  // console.log('DogfriendsApi payload',payload)\n  const {\n    username,\n    token\n  } = payload;\n  let photo_url = null;\n\n  try {\n    const res = await request(`users/${username}/`, {\n      _token: token\n    }); // console.log('DogfriendsApi getUserInfo 0res',res)\n\n    if (res.data.user.photo_id) {\n      // console.log('DogfriendsApi getUserInfo res.data.user.photo_id',res.data.user.photo_id)\n      const resp = await request(`photos/${res.data.user.photo_id}`); // console.log('DogfriendsApi getUserInfo 0resp',resp)\n\n      photo_url = resp.data.url;\n    }\n\n    res.data.user.photo_url = photo_url; // console.log('DogfriendsApi getUserInfo 1res',res)\n\n    return res;\n  } catch (error) {\n    // console.log('Error getUserInfo')\n    console.error(error);\n  }\n};\n\nconst patchUserInfo = async userInfo => {\n  // console.log('DogfriendsApi patchUserInfo userInfo',userInfo)\n  // userInfo._token = token;\n  // let photo_id = null;\n  // if(userInfo.photo_url) {\n  //   photo_id = await postPhotoNew(token, userInfo.photo_url, userInfo.username);\n  // }\n  // delete userInfo.photo_url;\n  // userInfo.photo_id = photo_id.data.id;\n  try {\n    return await request(`users/${userInfo.username}`, userInfo, 'patch');\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport { getPosts, getPostById, postPostVote, postPostNew, putPostUpdate, deletePost, login, preSignupUsernameCheck, signup, getUserInfo, patchUserInfo };","map":{"version":3,"sources":["/home/fv/js/capstone2/dogfriends/frontend/src/features/dogfriends/api/DogfriendsApi.js"],"names":["axios","BASE_URL","request","endpoint","paramsOrData","verb","console","log","res","method","url","err","message","response","data","Array","isArray","getPosts","getPostById","id","postPostVote","direction","token","_token","postPostNew","title","parent_id","photo_id","body","putPostUpdate","username","deletePost","login","error","preSignupUsernameCheck","signup","getUserInfo","payload","photo_url","user","resp","patchUserInfo","userInfo"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\n\nconst BASE_URL = 'http://localhost:5000/api/';\n\nconst request = async (endpoint, paramsOrData = {}, verb = \"get\") => {  \n  \n  console.log(\"API Call:\", endpoint, paramsOrData, verb, BASE_URL);\n  try {\n    const res = await axios({\n      method: verb,\n      url: `${BASE_URL}${endpoint}`,\n      [verb === \"get\" ? \"params\" : \"data\"]: paramsOrData});\n    \n    return res;\n      // axios sends query string data via the \"params\" key,\n      // and request body data via the \"data\" key,\n      // so the key we need depends on the HTTP verb\n  }catch(err) {\n    let message = err.response ? err.response.data.message : err;\n    throw Array.isArray(message) ? message : [message];\n  }\n}\n// posts\nconst getPosts = async () => {\n  let res = await request('posts');\n  return res;\n}\nconst getPostById = async (id) => {\n  return await request(`posts/${id}`);\n}\nconst postPostVote = async (id, direction, token) => {\n  return await request(`posts/${id}/vote/${direction}`, {_token: token}, 'post');\n}\nconst postPostNew = async (title, parent_id, photo_id, body, token) => {\n  const data = {\n    title: title,\n    parent_id: parent_id, \n    photo_id: photo_id, \n    body: body, \n    _token: token   \n  }\n  return await request('posts/', data, 'post');\n}\nconst putPostUpdate = async (id, title, body, username, token) => {\n  \n  const data = {\n    title: title,\n    body: body,  \n    username: username,\n    _token: token  \n  }\n  return await request(`posts/${id}`, data, 'put');\n}\nconst deletePost = async (id, username, token) => {\n  const data = {\n    id: id,\n    username: username,\n    _token: token  \n  }\n  return await request(`posts/${id}`, data, 'delete');\n}\n\n// login / signup\nconst login = async (data) => {\n  // console.log('DogfriendsApi login data',data)\n  try {\n    return await request('login/', data, 'post');\n  } catch (error) {\n    console.error(error);\n  }   \n}\n\nconst preSignupUsernameCheck = async ({username}) => {\n  try {\n    // console.log('DogfriendsApi preSignupUsernameCheck username',username)\n    const res = await request(`users/${username}`, {}, 'post');\n    // console.log('--DogfriendsApi preSignupUsernameCheck res',res.data)\n    return res.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nconst signup = async (\n  // {username, \n  //                     password, \n  //                     first_name, \n  //                     last_name, \n  //                     email, \n  //                     photo_id, \n  //                     city, \n  //                     state, \n  //                     country}\n                      \n                      data) => {\n       console.log('DogfriendsApi signup',data)\n      //  username, \n      //  password, \n      //  first_name, \n      //  last_name, \n      //  email, \n      //  photo_id, \n      //  city, \n      //  state, \n      //  country)                 \n  try {\n    const res = await request('users/', \n    // {\n    //   username: username, \n    //   password: password, \n    //   first_name: first_name, \n    //   last_name: last_name, \n    //   email: email,\n    //   photo_id: photo_id,\n    //   admin: false, \n    //   city: city, \n    //   state: state, \n    //   country: country, \n    //   }, \n      data,'post');\n      console.log('DogfriendsApi signup res',res)\n    return res;    \n  } catch (error) {\n    console.error(error);\n  }   \n}\nconst getUserInfo = async (payload) => {\n  // console.log('DogfriendsApi payload',payload)\n  const {username, token} = payload;\n  let photo_url = null;\n  try {  \n    const res = await request(`users/${username}/`, {_token: token});\n    // console.log('DogfriendsApi getUserInfo 0res',res)\n    if(res.data.user.photo_id) {\n      // console.log('DogfriendsApi getUserInfo res.data.user.photo_id',res.data.user.photo_id)\n      const resp = await request(`photos/${res.data.user.photo_id}`);\n      // console.log('DogfriendsApi getUserInfo 0resp',resp)\n      photo_url = resp.data.url;\n    \n    }\n    res.data.user.photo_url = photo_url;\n    // console.log('DogfriendsApi getUserInfo 1res',res)\n    return res;\n  } catch (error) {\n    // console.log('Error getUserInfo')\n    console.error(error);\n  }   \n}\nconst patchUserInfo = async (userInfo) => {\n  // console.log('DogfriendsApi patchUserInfo userInfo',userInfo)\n  // userInfo._token = token;\n  // let photo_id = null;\n  // if(userInfo.photo_url) {\n  //   photo_id = await postPhotoNew(token, userInfo.photo_url, userInfo.username);\n  // }\n  // delete userInfo.photo_url;\n  // userInfo.photo_id = photo_id.data.id;\n  try {\n    return await request(`users/${userInfo.username}`, userInfo, 'patch');\n  } catch (error) {\n    console.error(error);\n  }   \n}\n\nexport {\n  getPosts,\n  getPostById,\n  postPostVote,\n  postPostNew,\n  putPostUpdate,\n  deletePost,\n  login,\n  preSignupUsernameCheck,\n  signup,\n  getUserInfo,\n  patchUserInfo,\n};"]},"metadata":{},"sourceType":"module"}