{"ast":null,"code":"'use strict';\n\nconst is = require('./is');\n\nconst sharp = require('../build/Release/sharp.node');\n\nconst formats = new Map([['heic', 'heif'], ['heif', 'heif'], ['avif', 'avif'], ['jpeg', 'jpeg'], ['jpg', 'jpeg'], ['png', 'png'], ['raw', 'raw'], ['tiff', 'tiff'], ['webp', 'webp'], ['gif', 'gif']]);\n/**\n * Write output image data to a file.\n *\n * If an explicit output format is not selected, it will be inferred from the extension,\n * with JPEG, PNG, WebP, AVIF, TIFF, DZI, and libvips' V format supported.\n * Note that raw pixel data is only supported for buffer output.\n *\n * By default all metadata will be removed, which includes EXIF-based orientation.\n * See {@link withMetadata} for control over this.\n *\n * A `Promise` is returned when `callback` is not provided.\n *\n * @example\n * sharp(input)\n *   .toFile('output.png', (err, info) => { ... });\n *\n * @example\n * sharp(input)\n *   .toFile('output.png')\n *   .then(info => { ... })\n *   .catch(err => { ... });\n *\n * @param {string} fileOut - the path to write the image data to.\n * @param {Function} [callback] - called on completion with two arguments `(err, info)`.\n * `info` contains the output image `format`, `size` (bytes), `width`, `height`,\n * `channels` and `premultiplied` (indicating if premultiplication was used).\n * When using a crop strategy also contains `cropOffsetLeft` and `cropOffsetTop`.\n * @returns {Promise<Object>} - when no callback is provided\n * @throws {Error} Invalid parameters\n */\n\nfunction toFile(fileOut, callback) {\n  if (!fileOut || fileOut.length === 0) {\n    const errOutputInvalid = new Error('Missing output file path');\n\n    if (is.fn(callback)) {\n      callback(errOutputInvalid);\n    } else {\n      return Promise.reject(errOutputInvalid);\n    }\n  } else {\n    if (this.options.input.file === fileOut) {\n      const errOutputIsInput = new Error('Cannot use same file for input and output');\n\n      if (is.fn(callback)) {\n        callback(errOutputIsInput);\n      } else {\n        return Promise.reject(errOutputIsInput);\n      }\n    } else {\n      this.options.fileOut = fileOut;\n      return this._pipeline(callback);\n    }\n  }\n\n  return this;\n}\n/**\n * Write output to a Buffer.\n * JPEG, PNG, WebP, AVIF, TIFF and raw pixel data output are supported.\n *\n * If no explicit format is set, the output format will match the input image, except GIF and SVG input which become PNG output.\n *\n * By default all metadata will be removed, which includes EXIF-based orientation.\n * See {@link withMetadata} for control over this.\n *\n * `callback`, if present, gets three arguments `(err, data, info)` where:\n * - `err` is an error, if any.\n * - `data` is the output image data.\n * - `info` contains the output image `format`, `size` (bytes), `width`, `height`,\n * `channels` and `premultiplied` (indicating if premultiplication was used).\n * When using a crop strategy also contains `cropOffsetLeft` and `cropOffsetTop`.\n *\n * A `Promise` is returned when `callback` is not provided.\n *\n * @example\n * sharp(input)\n *   .toBuffer((err, data, info) => { ... });\n *\n * @example\n * sharp(input)\n *   .toBuffer()\n *   .then(data => { ... })\n *   .catch(err => { ... });\n *\n * @example\n * sharp(input)\n *   .toBuffer({ resolveWithObject: true })\n *   .then(({ data, info }) => { ... })\n *   .catch(err => { ... });\n *\n * @example\n * const data = await sharp('my-image.jpg')\n *   // output the raw pixels\n *   .raw()\n *   .toBuffer();\n *\n * // create a more type safe way to work with the raw pixel data\n * // this will not copy the data, instead it will change `data`s underlying ArrayBuffer\n * // so `data` and `pixelArray` point to the same memory location\n * const pixelArray = new Uint8ClampedArray(data.buffer);\n *\n * // When you are done changing the pixelArray, sharp takes the `pixelArray` as an input\n * await sharp(pixelArray).toFile('my-changed-image.jpg');\n *\n * @param {Object} [options]\n * @param {boolean} [options.resolveWithObject] Resolve the Promise with an Object containing `data` and `info` properties instead of resolving only with `data`.\n * @param {Function} [callback]\n * @returns {Promise<Buffer>} - when no callback is provided\n */\n\n\nfunction toBuffer(options, callback) {\n  if (is.object(options)) {\n    this._setBooleanOption('resolveWithObject', options.resolveWithObject);\n  } else if (this.options.resolveWithObject) {\n    this.options.resolveWithObject = false;\n  }\n\n  return this._pipeline(is.fn(options) ? options : callback);\n}\n/**\n * Include all metadata (EXIF, XMP, IPTC) from the input image in the output image.\n * This will also convert to and add a web-friendly sRGB ICC profile unless a custom\n * output profile is provided.\n *\n * The default behaviour, when `withMetadata` is not used, is to convert to the device-independent\n * sRGB colour space and strip all metadata, including the removal of any ICC profile.\n *\n * @example\n * sharp('input.jpg')\n *   .withMetadata()\n *   .toFile('output-with-metadata.jpg')\n *   .then(info => { ... });\n *\n * @param {Object} [options]\n * @param {number} [options.orientation] value between 1 and 8, used to update the EXIF `Orientation` tag.\n * @param {string} [options.icc] filesystem path to output ICC profile, defaults to sRGB.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction withMetadata(options) {\n  this.options.withMetadata = is.bool(options) ? options : true;\n\n  if (is.object(options)) {\n    if (is.defined(options.orientation)) {\n      if (is.integer(options.orientation) && is.inRange(options.orientation, 1, 8)) {\n        this.options.withMetadataOrientation = options.orientation;\n      } else {\n        throw is.invalidParameterError('orientation', 'integer between 1 and 8', options.orientation);\n      }\n    }\n\n    if (is.defined(options.icc)) {\n      if (is.string(options.icc)) {\n        this.options.withMetadataIcc = options.icc;\n      } else {\n        throw is.invalidParameterError('icc', 'string filesystem path to ICC profile', options.icc);\n      }\n    }\n  }\n\n  return this;\n}\n/**\n * Force output to a given format.\n *\n * @example\n * // Convert any input to PNG output\n * const data = await sharp(input)\n *   .toFormat('png')\n *   .toBuffer();\n *\n * @param {(string|Object)} format - as a string or an Object with an 'id' attribute\n * @param {Object} options - output options\n * @returns {Sharp}\n * @throws {Error} unsupported format or options\n */\n\n\nfunction toFormat(format, options) {\n  const actualFormat = formats.get(is.object(format) && is.string(format.id) ? format.id : format);\n\n  if (!actualFormat) {\n    throw is.invalidParameterError('format', `one of: ${[...formats.keys()].join(', ')}`, format);\n  }\n\n  return this[actualFormat](options);\n}\n/**\n * Use these JPEG options for output image.\n *\n * Some of these options require the use of a globally-installed libvips compiled with support for mozjpeg.\n *\n * @example\n * // Convert any input to very high quality JPEG output\n * const data = await sharp(input)\n *   .jpeg({\n *     quality: 100,\n *     chromaSubsampling: '4:4:4'\n *   })\n *   .toBuffer();\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=80] - quality, integer 1-100\n * @param {boolean} [options.progressive=false] - use progressive (interlace) scan\n * @param {string} [options.chromaSubsampling='4:2:0'] - set to '4:4:4' to prevent chroma subsampling otherwise defaults to '4:2:0' chroma subsampling\n * @param {boolean} [options.optimiseCoding=true] - optimise Huffman coding tables\n * @param {boolean} [options.optimizeCoding=true] - alternative spelling of optimiseCoding\n * @param {boolean} [options.trellisQuantisation=false] - apply trellis quantisation, requires libvips compiled with support for mozjpeg\n * @param {boolean} [options.overshootDeringing=false] - apply overshoot deringing, requires libvips compiled with support for mozjpeg\n * @param {boolean} [options.optimiseScans=false] - optimise progressive scans, forces progressive, requires libvips compiled with support for mozjpeg\n * @param {boolean} [options.optimizeScans=false] - alternative spelling of optimiseScans, requires libvips compiled with support for mozjpeg\n * @param {number} [options.quantisationTable=0] - quantization table to use, integer 0-8, requires libvips compiled with support for mozjpeg\n * @param {number} [options.quantizationTable=0] - alternative spelling of quantisationTable, requires libvips compiled with support for mozjpeg\n * @param {boolean} [options.force=true] - force JPEG output, otherwise attempt to use input format\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\n\n\nfunction jpeg(options) {\n  if (is.object(options)) {\n    if (is.defined(options.quality)) {\n      if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {\n        this.options.jpegQuality = options.quality;\n      } else {\n        throw is.invalidParameterError('quality', 'integer between 1 and 100', options.quality);\n      }\n    }\n\n    if (is.defined(options.progressive)) {\n      this._setBooleanOption('jpegProgressive', options.progressive);\n    }\n\n    if (is.defined(options.chromaSubsampling)) {\n      if (is.string(options.chromaSubsampling) && is.inArray(options.chromaSubsampling, ['4:2:0', '4:4:4'])) {\n        this.options.jpegChromaSubsampling = options.chromaSubsampling;\n      } else {\n        throw is.invalidParameterError('chromaSubsampling', 'one of: 4:2:0, 4:4:4', options.chromaSubsampling);\n      }\n    }\n\n    const trellisQuantisation = is.bool(options.trellisQuantization) ? options.trellisQuantization : options.trellisQuantisation;\n\n    if (is.defined(trellisQuantisation)) {\n      this._setBooleanOption('jpegTrellisQuantisation', trellisQuantisation);\n    }\n\n    if (is.defined(options.overshootDeringing)) {\n      this._setBooleanOption('jpegOvershootDeringing', options.overshootDeringing);\n    }\n\n    const optimiseScans = is.bool(options.optimizeScans) ? options.optimizeScans : options.optimiseScans;\n\n    if (is.defined(optimiseScans)) {\n      this._setBooleanOption('jpegOptimiseScans', optimiseScans);\n\n      if (optimiseScans) {\n        this.options.jpegProgressive = true;\n      }\n    }\n\n    const optimiseCoding = is.bool(options.optimizeCoding) ? options.optimizeCoding : options.optimiseCoding;\n\n    if (is.defined(optimiseCoding)) {\n      this._setBooleanOption('jpegOptimiseCoding', optimiseCoding);\n    }\n\n    const quantisationTable = is.number(options.quantizationTable) ? options.quantizationTable : options.quantisationTable;\n\n    if (is.defined(quantisationTable)) {\n      if (is.integer(quantisationTable) && is.inRange(quantisationTable, 0, 8)) {\n        this.options.jpegQuantisationTable = quantisationTable;\n      } else {\n        throw is.invalidParameterError('quantisationTable', 'integer between 0 and 8', quantisationTable);\n      }\n    }\n  }\n\n  return this._updateFormatOut('jpeg', options);\n}\n/**\n * Use these PNG options for output image.\n *\n * PNG output is always full colour at 8 or 16 bits per pixel.\n * Indexed PNG input at 1, 2 or 4 bits per pixel is converted to 8 bits per pixel.\n *\n * Some of these options require the use of a globally-installed libvips compiled with support for libimagequant (GPL).\n *\n * @example\n * // Convert any input to PNG output\n * const data = await sharp(input)\n *   .png()\n *   .toBuffer();\n *\n * @param {Object} [options]\n * @param {boolean} [options.progressive=false] - use progressive (interlace) scan\n * @param {number} [options.compressionLevel=9] - zlib compression level, 0-9\n * @param {boolean} [options.adaptiveFiltering=false] - use adaptive row filtering\n * @param {boolean} [options.palette=false] - quantise to a palette-based image with alpha transparency support, requires libvips compiled with support for libimagequant\n * @param {number} [options.quality=100] - use the lowest number of colours needed to achieve given quality, sets `palette` to `true`, requires libvips compiled with support for libimagequant\n * @param {number} [options.colours=256] - maximum number of palette entries, sets `palette` to `true`, requires libvips compiled with support for libimagequant\n * @param {number} [options.colors=256] - alternative spelling of `options.colours`, sets `palette` to `true`, requires libvips compiled with support for libimagequant\n * @param {number} [options.dither=1.0] - level of Floyd-Steinberg error diffusion, sets `palette` to `true`, requires libvips compiled with support for libimagequant\n * @param {boolean} [options.force=true] - force PNG output, otherwise attempt to use input format\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\n\n\nfunction png(options) {\n  if (is.object(options)) {\n    if (is.defined(options.progressive)) {\n      this._setBooleanOption('pngProgressive', options.progressive);\n    }\n\n    if (is.defined(options.compressionLevel)) {\n      if (is.integer(options.compressionLevel) && is.inRange(options.compressionLevel, 0, 9)) {\n        this.options.pngCompressionLevel = options.compressionLevel;\n      } else {\n        throw is.invalidParameterError('compressionLevel', 'integer between 0 and 9', options.compressionLevel);\n      }\n    }\n\n    if (is.defined(options.adaptiveFiltering)) {\n      this._setBooleanOption('pngAdaptiveFiltering', options.adaptiveFiltering);\n    }\n\n    if (is.defined(options.palette)) {\n      this._setBooleanOption('pngPalette', options.palette);\n    } else if (is.defined(options.quality) || is.defined(options.colours || options.colors) || is.defined(options.dither)) {\n      this._setBooleanOption('pngPalette', true);\n    }\n\n    if (this.options.pngPalette) {\n      if (is.defined(options.quality)) {\n        if (is.integer(options.quality) && is.inRange(options.quality, 0, 100)) {\n          this.options.pngQuality = options.quality;\n        } else {\n          throw is.invalidParameterError('quality', 'integer between 0 and 100', options.quality);\n        }\n      }\n\n      const colours = options.colours || options.colors;\n\n      if (is.defined(colours)) {\n        if (is.integer(colours) && is.inRange(colours, 2, 256)) {\n          this.options.pngColours = colours;\n        } else {\n          throw is.invalidParameterError('colours', 'integer between 2 and 256', colours);\n        }\n      }\n\n      if (is.defined(options.dither)) {\n        if (is.number(options.dither) && is.inRange(options.dither, 0, 1)) {\n          this.options.pngDither = options.dither;\n        } else {\n          throw is.invalidParameterError('dither', 'number between 0.0 and 1.0', options.dither);\n        }\n      }\n    }\n  }\n\n  return this._updateFormatOut('png', options);\n}\n/**\n * Use these WebP options for output image.\n *\n * @example\n * // Convert any input to lossless WebP output\n * const data = await sharp(input)\n *   .webp({ lossless: true })\n *   .toBuffer();\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=80] - quality, integer 1-100\n * @param {number} [options.alphaQuality=100] - quality of alpha layer, integer 0-100\n * @param {boolean} [options.lossless=false] - use lossless compression mode\n * @param {boolean} [options.nearLossless=false] - use near_lossless compression mode\n * @param {boolean} [options.smartSubsample=false] - use high quality chroma subsampling\n * @param {number} [options.reductionEffort=4] - level of CPU effort to reduce file size, integer 0-6\n * @param {number} [options.pageHeight] - page height for animated output\n * @param {number} [options.loop=0] - number of animation iterations, use 0 for infinite animation\n * @param {number[]} [options.delay] - list of delays between animation frames (in milliseconds)\n * @param {boolean} [options.force=true] - force WebP output, otherwise attempt to use input format\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\n\n\nfunction webp(options) {\n  if (is.object(options) && is.defined(options.quality)) {\n    if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {\n      this.options.webpQuality = options.quality;\n    } else {\n      throw is.invalidParameterError('quality', 'integer between 1 and 100', options.quality);\n    }\n  }\n\n  if (is.object(options) && is.defined(options.alphaQuality)) {\n    if (is.integer(options.alphaQuality) && is.inRange(options.alphaQuality, 0, 100)) {\n      this.options.webpAlphaQuality = options.alphaQuality;\n    } else {\n      throw is.invalidParameterError('alphaQuality', 'integer between 0 and 100', options.alphaQuality);\n    }\n  }\n\n  if (is.object(options) && is.defined(options.lossless)) {\n    this._setBooleanOption('webpLossless', options.lossless);\n  }\n\n  if (is.object(options) && is.defined(options.nearLossless)) {\n    this._setBooleanOption('webpNearLossless', options.nearLossless);\n  }\n\n  if (is.object(options) && is.defined(options.smartSubsample)) {\n    this._setBooleanOption('webpSmartSubsample', options.smartSubsample);\n  }\n\n  if (is.object(options) && is.defined(options.reductionEffort)) {\n    if (is.integer(options.reductionEffort) && is.inRange(options.reductionEffort, 0, 6)) {\n      this.options.webpReductionEffort = options.reductionEffort;\n    } else {\n      throw is.invalidParameterError('reductionEffort', 'integer between 0 and 6', options.reductionEffort);\n    }\n  }\n\n  trySetAnimationOptions(options, this.options);\n  return this._updateFormatOut('webp', options);\n}\n/**\n * Use these GIF options for output image.\n *\n * Requires libvips compiled with support for ImageMagick or GraphicsMagick.\n * The prebuilt binaries do not include this - see\n * {@link https://sharp.pixelplumbing.com/install#custom-libvips installing a custom libvips}.\n *\n * @param {Object} [options] - output options\n * @param {number} [options.pageHeight] - page height for animated output\n * @param {number} [options.loop=0] - number of animation iterations, use 0 for infinite animation\n * @param {number[]} [options.delay] - list of delays between animation frames (in milliseconds)\n * @param {boolean} [options.force=true] - force GIF output, otherwise attempt to use input format\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\n\n/* istanbul ignore next */\n\n\nfunction gif(options) {\n  if (!this.constructor.format.magick.output.buffer) {\n    throw new Error('The gif operation requires libvips to have been installed with support for ImageMagick');\n  }\n\n  trySetAnimationOptions(options, this.options);\n  return this._updateFormatOut('gif', options);\n}\n/**\n * Set animation options if available.\n * @private\n *\n * @param {Object} [source] - output options\n * @param {number} [source.pageHeight] - page height for animated output\n * @param {number} [source.loop=0] - number of animation iterations, use 0 for infinite animation\n * @param {number[]} [source.delay] - list of delays between animation frames (in milliseconds)\n * @param {Object} [target] - target object for valid options\n * @throws {Error} Invalid options\n */\n\n\nfunction trySetAnimationOptions(source, target) {\n  if (is.object(source) && is.defined(source.pageHeight)) {\n    if (is.integer(source.pageHeight) && source.pageHeight > 0) {\n      target.pageHeight = source.pageHeight;\n    } else {\n      throw is.invalidParameterError('pageHeight', 'integer larger than 0', source.pageHeight);\n    }\n  }\n\n  if (is.object(source) && is.defined(source.loop)) {\n    if (is.integer(source.loop) && is.inRange(source.loop, 0, 65535)) {\n      target.loop = source.loop;\n    } else {\n      throw is.invalidParameterError('loop', 'integer between 0 and 65535', source.loop);\n    }\n  }\n\n  if (is.object(source) && is.defined(source.delay)) {\n    if (Array.isArray(source.delay) && source.delay.every(is.integer) && source.delay.every(v => is.inRange(v, 0, 65535))) {\n      target.delay = source.delay;\n    } else {\n      throw is.invalidParameterError('delay', 'array of integers between 0 and 65535', source.delay);\n    }\n  }\n}\n/**\n * Use these TIFF options for output image.\n *\n * @example\n * // Convert SVG input to LZW-compressed, 1 bit per pixel TIFF output\n * sharp('input.svg')\n *   .tiff({\n *     compression: 'lzw',\n *     bitdepth: 1\n *   })\n *   .toFile('1-bpp-output.tiff')\n *   .then(info => { ... });\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=80] - quality, integer 1-100\n * @param {boolean} [options.force=true] - force TIFF output, otherwise attempt to use input format\n * @param {string} [options.compression='jpeg'] - compression options: lzw, deflate, jpeg, ccittfax4\n * @param {string} [options.predictor='horizontal'] - compression predictor options: none, horizontal, float\n * @param {boolean} [options.pyramid=false] - write an image pyramid\n * @param {boolean} [options.tile=false] - write a tiled tiff\n * @param {number} [options.tileWidth=256] - horizontal tile size\n * @param {number} [options.tileHeight=256] - vertical tile size\n * @param {number} [options.xres=1.0] - horizontal resolution in pixels/mm\n * @param {number} [options.yres=1.0] - vertical resolution in pixels/mm\n * @param {number} [options.bitdepth=8] - reduce bitdepth to 1, 2 or 4 bit\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\n\n\nfunction tiff(options) {\n  if (is.object(options)) {\n    if (is.defined(options.quality)) {\n      if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {\n        this.options.tiffQuality = options.quality;\n      } else {\n        throw is.invalidParameterError('quality', 'integer between 1 and 100', options.quality);\n      }\n    }\n\n    if (is.defined(options.bitdepth)) {\n      if (is.integer(options.bitdepth) && is.inArray(options.bitdepth, [1, 2, 4, 8])) {\n        this.options.tiffBitdepth = options.bitdepth;\n      } else {\n        throw is.invalidParameterError('bitdepth', '1, 2, 4 or 8', options.bitdepth);\n      }\n    } // tiling\n\n\n    if (is.defined(options.tile)) {\n      this._setBooleanOption('tiffTile', options.tile);\n    }\n\n    if (is.defined(options.tileWidth)) {\n      if (is.integer(options.tileWidth) && options.tileWidth > 0) {\n        this.options.tiffTileWidth = options.tileWidth;\n      } else {\n        throw is.invalidParameterError('tileWidth', 'integer greater than zero', options.tileWidth);\n      }\n    }\n\n    if (is.defined(options.tileHeight)) {\n      if (is.integer(options.tileHeight) && options.tileHeight > 0) {\n        this.options.tiffTileHeight = options.tileHeight;\n      } else {\n        throw is.invalidParameterError('tileHeight', 'integer greater than zero', options.tileHeight);\n      }\n    } // pyramid\n\n\n    if (is.defined(options.pyramid)) {\n      this._setBooleanOption('tiffPyramid', options.pyramid);\n    } // resolution\n\n\n    if (is.defined(options.xres)) {\n      if (is.number(options.xres) && options.xres > 0) {\n        this.options.tiffXres = options.xres;\n      } else {\n        throw is.invalidParameterError('xres', 'number greater than zero', options.xres);\n      }\n    }\n\n    if (is.defined(options.yres)) {\n      if (is.number(options.yres) && options.yres > 0) {\n        this.options.tiffYres = options.yres;\n      } else {\n        throw is.invalidParameterError('yres', 'number greater than zero', options.yres);\n      }\n    } // compression\n\n\n    if (is.defined(options.compression)) {\n      if (is.string(options.compression) && is.inArray(options.compression, ['lzw', 'deflate', 'jpeg', 'ccittfax4', 'none'])) {\n        this.options.tiffCompression = options.compression;\n      } else {\n        throw is.invalidParameterError('compression', 'one of: lzw, deflate, jpeg, ccittfax4, none', options.compression);\n      }\n    } // predictor\n\n\n    if (is.defined(options.predictor)) {\n      if (is.string(options.predictor) && is.inArray(options.predictor, ['none', 'horizontal', 'float'])) {\n        this.options.tiffPredictor = options.predictor;\n      } else {\n        throw is.invalidParameterError('predictor', 'one of: none, horizontal, float', options.predictor);\n      }\n    }\n  }\n\n  return this._updateFormatOut('tiff', options);\n}\n/**\n * Use these AVIF options for output image.\n *\n * Whilst it is possible to create AVIF images smaller than 16x16 pixels,\n * most web browsers do not display these properly.\n *\n * @since 0.27.0\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=50] - quality, integer 1-100\n * @param {boolean} [options.lossless=false] - use lossless compression\n * @param {boolean} [options.speed=5] - CPU effort vs file size, 0 (slowest/smallest) to 8 (fastest/largest)\n * @param {string} [options.chromaSubsampling='4:2:0'] - set to '4:4:4' to prevent chroma subsampling otherwise defaults to '4:2:0' chroma subsampling, requires libvips v8.11.0\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\n\n\nfunction avif(options) {\n  return this.heif({ ...options,\n    compression: 'av1'\n  });\n}\n/**\n * Use these HEIF options for output image.\n *\n * Support for patent-encumbered HEIC images requires the use of a\n * globally-installed libvips compiled with support for libheif, libde265 and x265.\n *\n * @since 0.23.0\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=50] - quality, integer 1-100\n * @param {string} [options.compression='av1'] - compression format: av1, hevc\n * @param {boolean} [options.lossless=false] - use lossless compression\n * @param {number} [options.speed=5] - CPU effort vs file size, 0 (slowest/smallest) to 8 (fastest/largest)\n * @param {string} [options.chromaSubsampling='4:2:0'] - set to '4:4:4' to prevent chroma subsampling otherwise defaults to '4:2:0' chroma subsampling, requires libvips v8.11.0\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\n\n\nfunction heif(options) {\n  if (is.object(options)) {\n    if (is.defined(options.quality)) {\n      if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {\n        this.options.heifQuality = options.quality;\n      } else {\n        throw is.invalidParameterError('quality', 'integer between 1 and 100', options.quality);\n      }\n    }\n\n    if (is.defined(options.lossless)) {\n      if (is.bool(options.lossless)) {\n        this.options.heifLossless = options.lossless;\n      } else {\n        throw is.invalidParameterError('lossless', 'boolean', options.lossless);\n      }\n    }\n\n    if (is.defined(options.compression)) {\n      if (is.string(options.compression) && is.inArray(options.compression, ['av1', 'hevc'])) {\n        this.options.heifCompression = options.compression;\n      } else {\n        throw is.invalidParameterError('compression', 'one of: av1, hevc', options.compression);\n      }\n    }\n\n    if (is.defined(options.speed)) {\n      if (is.integer(options.speed) && is.inRange(options.speed, 0, 8)) {\n        this.options.heifSpeed = options.speed;\n      } else {\n        throw is.invalidParameterError('speed', 'integer between 0 and 8', options.speed);\n      }\n    }\n\n    if (is.defined(options.chromaSubsampling)) {\n      if (is.string(options.chromaSubsampling) && is.inArray(options.chromaSubsampling, ['4:2:0', '4:4:4'])) {\n        this.options.heifChromaSubsampling = options.chromaSubsampling;\n      } else {\n        throw is.invalidParameterError('chromaSubsampling', 'one of: 4:2:0, 4:4:4', options.chromaSubsampling);\n      }\n    }\n  }\n\n  return this._updateFormatOut('heif', options);\n}\n/**\n * Force output to be raw, uncompressed, 8-bit unsigned integer (unit8) pixel data.\n * Pixel ordering is left-to-right, top-to-bottom, without padding.\n * Channel ordering will be RGB or RGBA for non-greyscale colourspaces.\n *\n * @example\n * // Extract raw RGB pixel data from JPEG input\n * const { data, info } = await sharp('input.jpg')\n *   .raw()\n *   .toBuffer({ resolveWithObject: true });\n *\n * @example\n * // Extract alpha channel as raw pixel data from PNG input\n * const data = await sharp('input.png')\n *   .ensureAlpha()\n *   .extractChannel(3)\n *   .toColourspace('b-w')\n *   .raw()\n *   .toBuffer();\n *\n * @returns {Sharp}\n */\n\n\nfunction raw() {\n  return this._updateFormatOut('raw');\n}\n/**\n * Use tile-based deep zoom (image pyramid) output.\n * Set the format and options for tile images via the `toFormat`, `jpeg`, `png` or `webp` functions.\n * Use a `.zip` or `.szi` file extension with `toFile` to write to a compressed archive file format.\n *\n * Warning: multiple sharp instances concurrently producing tile output can expose a possible race condition in some versions of libgsf.\n *\n * @example\n *  sharp('input.tiff')\n *   .png()\n *   .tile({\n *     size: 512\n *   })\n *   .toFile('output.dz', function(err, info) {\n *     // output.dzi is the Deep Zoom XML definition\n *     // output_files contains 512x512 tiles grouped by zoom level\n *   });\n *\n * @param {Object} [options]\n * @param {number} [options.size=256] tile size in pixels, a value between 1 and 8192.\n * @param {number} [options.overlap=0] tile overlap in pixels, a value between 0 and 8192.\n * @param {number} [options.angle=0] tile angle of rotation, must be a multiple of 90.\n * @param {string|Object} [options.background={r: 255, g: 255, b: 255, alpha: 1}] - background colour, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to white without transparency.\n * @param {string} [options.depth] how deep to make the pyramid, possible values are `onepixel`, `onetile` or `one`, default based on layout.\n * @param {number} [options.skipBlanks=-1] threshold to skip tile generation, a value 0 - 255 for 8-bit images or 0 - 65535 for 16-bit images\n * @param {string} [options.container='fs'] tile container, with value `fs` (filesystem) or `zip` (compressed file).\n * @param {string} [options.layout='dz'] filesystem layout, possible values are `dz`, `iiif`, `zoomify` or `google`.\n * @param {boolean} [options.centre=false] centre image in tile.\n * @param {boolean} [options.center=false] alternative spelling of centre.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction tile(options) {\n  if (is.object(options)) {\n    // Size of square tiles, in pixels\n    if (is.defined(options.size)) {\n      if (is.integer(options.size) && is.inRange(options.size, 1, 8192)) {\n        this.options.tileSize = options.size;\n      } else {\n        throw is.invalidParameterError('size', 'integer between 1 and 8192', options.size);\n      }\n    } // Overlap of tiles, in pixels\n\n\n    if (is.defined(options.overlap)) {\n      if (is.integer(options.overlap) && is.inRange(options.overlap, 0, 8192)) {\n        if (options.overlap > this.options.tileSize) {\n          throw is.invalidParameterError('overlap', `<= size (${this.options.tileSize})`, options.overlap);\n        }\n\n        this.options.tileOverlap = options.overlap;\n      } else {\n        throw is.invalidParameterError('overlap', 'integer between 0 and 8192', options.overlap);\n      }\n    } // Container\n\n\n    if (is.defined(options.container)) {\n      if (is.string(options.container) && is.inArray(options.container, ['fs', 'zip'])) {\n        this.options.tileContainer = options.container;\n      } else {\n        throw is.invalidParameterError('container', 'one of: fs, zip', options.container);\n      }\n    } // Layout\n\n\n    if (is.defined(options.layout)) {\n      if (is.string(options.layout) && is.inArray(options.layout, ['dz', 'google', 'iiif', 'zoomify'])) {\n        this.options.tileLayout = options.layout;\n      } else {\n        throw is.invalidParameterError('layout', 'one of: dz, google, iiif, zoomify', options.layout);\n      }\n    } // Angle of rotation,\n\n\n    if (is.defined(options.angle)) {\n      if (is.integer(options.angle) && !(options.angle % 90)) {\n        this.options.tileAngle = options.angle;\n      } else {\n        throw is.invalidParameterError('angle', 'positive/negative multiple of 90', options.angle);\n      }\n    } // Background colour\n\n\n    this._setBackgroundColourOption('tileBackground', options.background); // Depth of tiles\n\n\n    if (is.defined(options.depth)) {\n      if (is.string(options.depth) && is.inArray(options.depth, ['onepixel', 'onetile', 'one'])) {\n        this.options.tileDepth = options.depth;\n      } else {\n        throw is.invalidParameterError('depth', 'one of: onepixel, onetile, one', options.depth);\n      }\n    } // Threshold to skip blank tiles\n\n\n    if (is.defined(options.skipBlanks)) {\n      if (is.integer(options.skipBlanks) && is.inRange(options.skipBlanks, -1, 65535)) {\n        this.options.tileSkipBlanks = options.skipBlanks;\n      } else {\n        throw is.invalidParameterError('skipBlanks', 'integer between -1 and 255/65535', options.skipBlanks);\n      }\n    } else if (is.defined(options.layout) && options.layout === 'google') {\n      this.options.tileSkipBlanks = 5;\n    } // Center image in tile\n\n\n    const centre = is.bool(options.center) ? options.center : options.centre;\n\n    if (is.defined(centre)) {\n      this._setBooleanOption('tileCentre', centre);\n    }\n  } // Format\n\n\n  if (is.inArray(this.options.formatOut, ['jpeg', 'png', 'webp'])) {\n    this.options.tileFormat = this.options.formatOut;\n  } else if (this.options.formatOut !== 'input') {\n    throw is.invalidParameterError('format', 'one of: jpeg, png, webp', this.options.formatOut);\n  }\n\n  return this._updateFormatOut('dz');\n}\n/**\n * Update the output format unless options.force is false,\n * in which case revert to input format.\n * @private\n * @param {string} formatOut\n * @param {Object} [options]\n * @param {boolean} [options.force=true] - force output format, otherwise attempt to use input format\n * @returns {Sharp}\n */\n\n\nfunction _updateFormatOut(formatOut, options) {\n  if (!(is.object(options) && options.force === false)) {\n    this.options.formatOut = formatOut;\n  }\n\n  return this;\n}\n/**\n * Update a boolean attribute of the this.options Object.\n * @private\n * @param {string} key\n * @param {boolean} val\n * @throws {Error} Invalid key\n */\n\n\nfunction _setBooleanOption(key, val) {\n  if (is.bool(val)) {\n    this.options[key] = val;\n  } else {\n    throw is.invalidParameterError(key, 'boolean', val);\n  }\n}\n/**\n * Called by a WriteableStream to notify us it is ready for data.\n * @private\n */\n\n\nfunction _read() {\n  /* istanbul ignore else */\n  if (!this.options.streamOut) {\n    this.options.streamOut = true;\n\n    this._pipeline();\n  }\n}\n/**\n * Invoke the C++ image processing pipeline\n * Supports callback, stream and promise variants\n * @private\n */\n\n\nfunction _pipeline(callback) {\n  if (typeof callback === 'function') {\n    // output=file/buffer\n    if (this._isStreamInput()) {\n      // output=file/buffer, input=stream\n      this.on('finish', () => {\n        this._flattenBufferIn();\n\n        sharp.pipeline(this.options, callback);\n      });\n    } else {\n      // output=file/buffer, input=file/buffer\n      sharp.pipeline(this.options, callback);\n    }\n\n    return this;\n  } else if (this.options.streamOut) {\n    // output=stream\n    if (this._isStreamInput()) {\n      // output=stream, input=stream\n      this.once('finish', () => {\n        this._flattenBufferIn();\n\n        sharp.pipeline(this.options, (err, data, info) => {\n          if (err) {\n            this.emit('error', err);\n          } else {\n            this.emit('info', info);\n            this.push(data);\n          }\n\n          this.push(null);\n        });\n      });\n\n      if (this.streamInFinished) {\n        this.emit('finish');\n      }\n    } else {\n      // output=stream, input=file/buffer\n      sharp.pipeline(this.options, (err, data, info) => {\n        if (err) {\n          this.emit('error', err);\n        } else {\n          this.emit('info', info);\n          this.push(data);\n        }\n\n        this.push(null);\n      });\n    }\n\n    return this;\n  } else {\n    // output=promise\n    if (this._isStreamInput()) {\n      // output=promise, input=stream\n      return new Promise((resolve, reject) => {\n        this.once('finish', () => {\n          this._flattenBufferIn();\n\n          sharp.pipeline(this.options, (err, data, info) => {\n            if (err) {\n              reject(err);\n            } else {\n              if (this.options.resolveWithObject) {\n                resolve({\n                  data,\n                  info\n                });\n              } else {\n                resolve(data);\n              }\n            }\n          });\n        });\n      });\n    } else {\n      // output=promise, input=file/buffer\n      return new Promise((resolve, reject) => {\n        sharp.pipeline(this.options, (err, data, info) => {\n          if (err) {\n            reject(err);\n          } else {\n            if (this.options.resolveWithObject) {\n              resolve({\n                data: data,\n                info: info\n              });\n            } else {\n              resolve(data);\n            }\n          }\n        });\n      });\n    }\n  }\n}\n/**\n * Decorate the Sharp prototype with output-related functions.\n * @private\n */\n\n\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    // Public\n    toFile,\n    toBuffer,\n    withMetadata,\n    toFormat,\n    jpeg,\n    png,\n    webp,\n    tiff,\n    avif,\n    heif,\n    gif,\n    raw,\n    tile,\n    // Private\n    _updateFormatOut,\n    _setBooleanOption,\n    _read,\n    _pipeline\n  });\n};","map":{"version":3,"sources":["/home/fv/js/capstone2/dogfriends/frontend/node_modules/sharp/lib/output.js"],"names":["is","require","sharp","formats","Map","toFile","fileOut","callback","length","errOutputInvalid","Error","fn","Promise","reject","options","input","file","errOutputIsInput","_pipeline","toBuffer","object","_setBooleanOption","resolveWithObject","withMetadata","bool","defined","orientation","integer","inRange","withMetadataOrientation","invalidParameterError","icc","string","withMetadataIcc","toFormat","format","actualFormat","get","id","keys","join","jpeg","quality","jpegQuality","progressive","chromaSubsampling","inArray","jpegChromaSubsampling","trellisQuantisation","trellisQuantization","overshootDeringing","optimiseScans","optimizeScans","jpegProgressive","optimiseCoding","optimizeCoding","quantisationTable","number","quantizationTable","jpegQuantisationTable","_updateFormatOut","png","compressionLevel","pngCompressionLevel","adaptiveFiltering","palette","colours","colors","dither","pngPalette","pngQuality","pngColours","pngDither","webp","webpQuality","alphaQuality","webpAlphaQuality","lossless","nearLossless","smartSubsample","reductionEffort","webpReductionEffort","trySetAnimationOptions","gif","constructor","magick","output","buffer","source","target","pageHeight","loop","delay","Array","isArray","every","v","tiff","tiffQuality","bitdepth","tiffBitdepth","tile","tileWidth","tiffTileWidth","tileHeight","tiffTileHeight","pyramid","xres","tiffXres","yres","tiffYres","compression","tiffCompression","predictor","tiffPredictor","avif","heif","heifQuality","heifLossless","heifCompression","speed","heifSpeed","heifChromaSubsampling","raw","size","tileSize","overlap","tileOverlap","container","tileContainer","layout","tileLayout","angle","tileAngle","_setBackgroundColourOption","background","depth","tileDepth","skipBlanks","tileSkipBlanks","centre","center","formatOut","tileFormat","force","key","val","_read","streamOut","_isStreamInput","on","_flattenBufferIn","pipeline","once","err","data","info","emit","push","streamInFinished","resolve","module","exports","Sharp","Object","assign","prototype"],"mappings":"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","sourcesContent":["'use strict';\n\nconst is = require('./is');\nconst sharp = require('../build/Release/sharp.node');\n\nconst formats = new Map([\n  ['heic', 'heif'],\n  ['heif', 'heif'],\n  ['avif', 'avif'],\n  ['jpeg', 'jpeg'],\n  ['jpg', 'jpeg'],\n  ['png', 'png'],\n  ['raw', 'raw'],\n  ['tiff', 'tiff'],\n  ['webp', 'webp'],\n  ['gif', 'gif']\n]);\n\n/**\n * Write output image data to a file.\n *\n * If an explicit output format is not selected, it will be inferred from the extension,\n * with JPEG, PNG, WebP, AVIF, TIFF, DZI, and libvips' V format supported.\n * Note that raw pixel data is only supported for buffer output.\n *\n * By default all metadata will be removed, which includes EXIF-based orientation.\n * See {@link withMetadata} for control over this.\n *\n * A `Promise` is returned when `callback` is not provided.\n *\n * @example\n * sharp(input)\n *   .toFile('output.png', (err, info) => { ... });\n *\n * @example\n * sharp(input)\n *   .toFile('output.png')\n *   .then(info => { ... })\n *   .catch(err => { ... });\n *\n * @param {string} fileOut - the path to write the image data to.\n * @param {Function} [callback] - called on completion with two arguments `(err, info)`.\n * `info` contains the output image `format`, `size` (bytes), `width`, `height`,\n * `channels` and `premultiplied` (indicating if premultiplication was used).\n * When using a crop strategy also contains `cropOffsetLeft` and `cropOffsetTop`.\n * @returns {Promise<Object>} - when no callback is provided\n * @throws {Error} Invalid parameters\n */\nfunction toFile (fileOut, callback) {\n  if (!fileOut || fileOut.length === 0) {\n    const errOutputInvalid = new Error('Missing output file path');\n    if (is.fn(callback)) {\n      callback(errOutputInvalid);\n    } else {\n      return Promise.reject(errOutputInvalid);\n    }\n  } else {\n    if (this.options.input.file === fileOut) {\n      const errOutputIsInput = new Error('Cannot use same file for input and output');\n      if (is.fn(callback)) {\n        callback(errOutputIsInput);\n      } else {\n        return Promise.reject(errOutputIsInput);\n      }\n    } else {\n      this.options.fileOut = fileOut;\n      return this._pipeline(callback);\n    }\n  }\n  return this;\n}\n\n/**\n * Write output to a Buffer.\n * JPEG, PNG, WebP, AVIF, TIFF and raw pixel data output are supported.\n *\n * If no explicit format is set, the output format will match the input image, except GIF and SVG input which become PNG output.\n *\n * By default all metadata will be removed, which includes EXIF-based orientation.\n * See {@link withMetadata} for control over this.\n *\n * `callback`, if present, gets three arguments `(err, data, info)` where:\n * - `err` is an error, if any.\n * - `data` is the output image data.\n * - `info` contains the output image `format`, `size` (bytes), `width`, `height`,\n * `channels` and `premultiplied` (indicating if premultiplication was used).\n * When using a crop strategy also contains `cropOffsetLeft` and `cropOffsetTop`.\n *\n * A `Promise` is returned when `callback` is not provided.\n *\n * @example\n * sharp(input)\n *   .toBuffer((err, data, info) => { ... });\n *\n * @example\n * sharp(input)\n *   .toBuffer()\n *   .then(data => { ... })\n *   .catch(err => { ... });\n *\n * @example\n * sharp(input)\n *   .toBuffer({ resolveWithObject: true })\n *   .then(({ data, info }) => { ... })\n *   .catch(err => { ... });\n *\n * @example\n * const data = await sharp('my-image.jpg')\n *   // output the raw pixels\n *   .raw()\n *   .toBuffer();\n *\n * // create a more type safe way to work with the raw pixel data\n * // this will not copy the data, instead it will change `data`s underlying ArrayBuffer\n * // so `data` and `pixelArray` point to the same memory location\n * const pixelArray = new Uint8ClampedArray(data.buffer);\n *\n * // When you are done changing the pixelArray, sharp takes the `pixelArray` as an input\n * await sharp(pixelArray).toFile('my-changed-image.jpg');\n *\n * @param {Object} [options]\n * @param {boolean} [options.resolveWithObject] Resolve the Promise with an Object containing `data` and `info` properties instead of resolving only with `data`.\n * @param {Function} [callback]\n * @returns {Promise<Buffer>} - when no callback is provided\n */\nfunction toBuffer (options, callback) {\n  if (is.object(options)) {\n    this._setBooleanOption('resolveWithObject', options.resolveWithObject);\n  } else if (this.options.resolveWithObject) {\n    this.options.resolveWithObject = false;\n  }\n  return this._pipeline(is.fn(options) ? options : callback);\n}\n\n/**\n * Include all metadata (EXIF, XMP, IPTC) from the input image in the output image.\n * This will also convert to and add a web-friendly sRGB ICC profile unless a custom\n * output profile is provided.\n *\n * The default behaviour, when `withMetadata` is not used, is to convert to the device-independent\n * sRGB colour space and strip all metadata, including the removal of any ICC profile.\n *\n * @example\n * sharp('input.jpg')\n *   .withMetadata()\n *   .toFile('output-with-metadata.jpg')\n *   .then(info => { ... });\n *\n * @param {Object} [options]\n * @param {number} [options.orientation] value between 1 and 8, used to update the EXIF `Orientation` tag.\n * @param {string} [options.icc] filesystem path to output ICC profile, defaults to sRGB.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction withMetadata (options) {\n  this.options.withMetadata = is.bool(options) ? options : true;\n  if (is.object(options)) {\n    if (is.defined(options.orientation)) {\n      if (is.integer(options.orientation) && is.inRange(options.orientation, 1, 8)) {\n        this.options.withMetadataOrientation = options.orientation;\n      } else {\n        throw is.invalidParameterError('orientation', 'integer between 1 and 8', options.orientation);\n      }\n    }\n    if (is.defined(options.icc)) {\n      if (is.string(options.icc)) {\n        this.options.withMetadataIcc = options.icc;\n      } else {\n        throw is.invalidParameterError('icc', 'string filesystem path to ICC profile', options.icc);\n      }\n    }\n  }\n  return this;\n}\n\n/**\n * Force output to a given format.\n *\n * @example\n * // Convert any input to PNG output\n * const data = await sharp(input)\n *   .toFormat('png')\n *   .toBuffer();\n *\n * @param {(string|Object)} format - as a string or an Object with an 'id' attribute\n * @param {Object} options - output options\n * @returns {Sharp}\n * @throws {Error} unsupported format or options\n */\nfunction toFormat (format, options) {\n  const actualFormat = formats.get(is.object(format) && is.string(format.id) ? format.id : format);\n  if (!actualFormat) {\n    throw is.invalidParameterError('format', `one of: ${[...formats.keys()].join(', ')}`, format);\n  }\n  return this[actualFormat](options);\n}\n\n/**\n * Use these JPEG options for output image.\n *\n * Some of these options require the use of a globally-installed libvips compiled with support for mozjpeg.\n *\n * @example\n * // Convert any input to very high quality JPEG output\n * const data = await sharp(input)\n *   .jpeg({\n *     quality: 100,\n *     chromaSubsampling: '4:4:4'\n *   })\n *   .toBuffer();\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=80] - quality, integer 1-100\n * @param {boolean} [options.progressive=false] - use progressive (interlace) scan\n * @param {string} [options.chromaSubsampling='4:2:0'] - set to '4:4:4' to prevent chroma subsampling otherwise defaults to '4:2:0' chroma subsampling\n * @param {boolean} [options.optimiseCoding=true] - optimise Huffman coding tables\n * @param {boolean} [options.optimizeCoding=true] - alternative spelling of optimiseCoding\n * @param {boolean} [options.trellisQuantisation=false] - apply trellis quantisation, requires libvips compiled with support for mozjpeg\n * @param {boolean} [options.overshootDeringing=false] - apply overshoot deringing, requires libvips compiled with support for mozjpeg\n * @param {boolean} [options.optimiseScans=false] - optimise progressive scans, forces progressive, requires libvips compiled with support for mozjpeg\n * @param {boolean} [options.optimizeScans=false] - alternative spelling of optimiseScans, requires libvips compiled with support for mozjpeg\n * @param {number} [options.quantisationTable=0] - quantization table to use, integer 0-8, requires libvips compiled with support for mozjpeg\n * @param {number} [options.quantizationTable=0] - alternative spelling of quantisationTable, requires libvips compiled with support for mozjpeg\n * @param {boolean} [options.force=true] - force JPEG output, otherwise attempt to use input format\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\nfunction jpeg (options) {\n  if (is.object(options)) {\n    if (is.defined(options.quality)) {\n      if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {\n        this.options.jpegQuality = options.quality;\n      } else {\n        throw is.invalidParameterError('quality', 'integer between 1 and 100', options.quality);\n      }\n    }\n    if (is.defined(options.progressive)) {\n      this._setBooleanOption('jpegProgressive', options.progressive);\n    }\n    if (is.defined(options.chromaSubsampling)) {\n      if (is.string(options.chromaSubsampling) && is.inArray(options.chromaSubsampling, ['4:2:0', '4:4:4'])) {\n        this.options.jpegChromaSubsampling = options.chromaSubsampling;\n      } else {\n        throw is.invalidParameterError('chromaSubsampling', 'one of: 4:2:0, 4:4:4', options.chromaSubsampling);\n      }\n    }\n    const trellisQuantisation = is.bool(options.trellisQuantization) ? options.trellisQuantization : options.trellisQuantisation;\n    if (is.defined(trellisQuantisation)) {\n      this._setBooleanOption('jpegTrellisQuantisation', trellisQuantisation);\n    }\n    if (is.defined(options.overshootDeringing)) {\n      this._setBooleanOption('jpegOvershootDeringing', options.overshootDeringing);\n    }\n    const optimiseScans = is.bool(options.optimizeScans) ? options.optimizeScans : options.optimiseScans;\n    if (is.defined(optimiseScans)) {\n      this._setBooleanOption('jpegOptimiseScans', optimiseScans);\n      if (optimiseScans) {\n        this.options.jpegProgressive = true;\n      }\n    }\n    const optimiseCoding = is.bool(options.optimizeCoding) ? options.optimizeCoding : options.optimiseCoding;\n    if (is.defined(optimiseCoding)) {\n      this._setBooleanOption('jpegOptimiseCoding', optimiseCoding);\n    }\n    const quantisationTable = is.number(options.quantizationTable) ? options.quantizationTable : options.quantisationTable;\n    if (is.defined(quantisationTable)) {\n      if (is.integer(quantisationTable) && is.inRange(quantisationTable, 0, 8)) {\n        this.options.jpegQuantisationTable = quantisationTable;\n      } else {\n        throw is.invalidParameterError('quantisationTable', 'integer between 0 and 8', quantisationTable);\n      }\n    }\n  }\n  return this._updateFormatOut('jpeg', options);\n}\n\n/**\n * Use these PNG options for output image.\n *\n * PNG output is always full colour at 8 or 16 bits per pixel.\n * Indexed PNG input at 1, 2 or 4 bits per pixel is converted to 8 bits per pixel.\n *\n * Some of these options require the use of a globally-installed libvips compiled with support for libimagequant (GPL).\n *\n * @example\n * // Convert any input to PNG output\n * const data = await sharp(input)\n *   .png()\n *   .toBuffer();\n *\n * @param {Object} [options]\n * @param {boolean} [options.progressive=false] - use progressive (interlace) scan\n * @param {number} [options.compressionLevel=9] - zlib compression level, 0-9\n * @param {boolean} [options.adaptiveFiltering=false] - use adaptive row filtering\n * @param {boolean} [options.palette=false] - quantise to a palette-based image with alpha transparency support, requires libvips compiled with support for libimagequant\n * @param {number} [options.quality=100] - use the lowest number of colours needed to achieve given quality, sets `palette` to `true`, requires libvips compiled with support for libimagequant\n * @param {number} [options.colours=256] - maximum number of palette entries, sets `palette` to `true`, requires libvips compiled with support for libimagequant\n * @param {number} [options.colors=256] - alternative spelling of `options.colours`, sets `palette` to `true`, requires libvips compiled with support for libimagequant\n * @param {number} [options.dither=1.0] - level of Floyd-Steinberg error diffusion, sets `palette` to `true`, requires libvips compiled with support for libimagequant\n * @param {boolean} [options.force=true] - force PNG output, otherwise attempt to use input format\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\nfunction png (options) {\n  if (is.object(options)) {\n    if (is.defined(options.progressive)) {\n      this._setBooleanOption('pngProgressive', options.progressive);\n    }\n    if (is.defined(options.compressionLevel)) {\n      if (is.integer(options.compressionLevel) && is.inRange(options.compressionLevel, 0, 9)) {\n        this.options.pngCompressionLevel = options.compressionLevel;\n      } else {\n        throw is.invalidParameterError('compressionLevel', 'integer between 0 and 9', options.compressionLevel);\n      }\n    }\n    if (is.defined(options.adaptiveFiltering)) {\n      this._setBooleanOption('pngAdaptiveFiltering', options.adaptiveFiltering);\n    }\n    if (is.defined(options.palette)) {\n      this._setBooleanOption('pngPalette', options.palette);\n    } else if (is.defined(options.quality) || is.defined(options.colours || options.colors) || is.defined(options.dither)) {\n      this._setBooleanOption('pngPalette', true);\n    }\n    if (this.options.pngPalette) {\n      if (is.defined(options.quality)) {\n        if (is.integer(options.quality) && is.inRange(options.quality, 0, 100)) {\n          this.options.pngQuality = options.quality;\n        } else {\n          throw is.invalidParameterError('quality', 'integer between 0 and 100', options.quality);\n        }\n      }\n      const colours = options.colours || options.colors;\n      if (is.defined(colours)) {\n        if (is.integer(colours) && is.inRange(colours, 2, 256)) {\n          this.options.pngColours = colours;\n        } else {\n          throw is.invalidParameterError('colours', 'integer between 2 and 256', colours);\n        }\n      }\n      if (is.defined(options.dither)) {\n        if (is.number(options.dither) && is.inRange(options.dither, 0, 1)) {\n          this.options.pngDither = options.dither;\n        } else {\n          throw is.invalidParameterError('dither', 'number between 0.0 and 1.0', options.dither);\n        }\n      }\n    }\n  }\n  return this._updateFormatOut('png', options);\n}\n\n/**\n * Use these WebP options for output image.\n *\n * @example\n * // Convert any input to lossless WebP output\n * const data = await sharp(input)\n *   .webp({ lossless: true })\n *   .toBuffer();\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=80] - quality, integer 1-100\n * @param {number} [options.alphaQuality=100] - quality of alpha layer, integer 0-100\n * @param {boolean} [options.lossless=false] - use lossless compression mode\n * @param {boolean} [options.nearLossless=false] - use near_lossless compression mode\n * @param {boolean} [options.smartSubsample=false] - use high quality chroma subsampling\n * @param {number} [options.reductionEffort=4] - level of CPU effort to reduce file size, integer 0-6\n * @param {number} [options.pageHeight] - page height for animated output\n * @param {number} [options.loop=0] - number of animation iterations, use 0 for infinite animation\n * @param {number[]} [options.delay] - list of delays between animation frames (in milliseconds)\n * @param {boolean} [options.force=true] - force WebP output, otherwise attempt to use input format\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\nfunction webp (options) {\n  if (is.object(options) && is.defined(options.quality)) {\n    if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {\n      this.options.webpQuality = options.quality;\n    } else {\n      throw is.invalidParameterError('quality', 'integer between 1 and 100', options.quality);\n    }\n  }\n  if (is.object(options) && is.defined(options.alphaQuality)) {\n    if (is.integer(options.alphaQuality) && is.inRange(options.alphaQuality, 0, 100)) {\n      this.options.webpAlphaQuality = options.alphaQuality;\n    } else {\n      throw is.invalidParameterError('alphaQuality', 'integer between 0 and 100', options.alphaQuality);\n    }\n  }\n  if (is.object(options) && is.defined(options.lossless)) {\n    this._setBooleanOption('webpLossless', options.lossless);\n  }\n  if (is.object(options) && is.defined(options.nearLossless)) {\n    this._setBooleanOption('webpNearLossless', options.nearLossless);\n  }\n  if (is.object(options) && is.defined(options.smartSubsample)) {\n    this._setBooleanOption('webpSmartSubsample', options.smartSubsample);\n  }\n  if (is.object(options) && is.defined(options.reductionEffort)) {\n    if (is.integer(options.reductionEffort) && is.inRange(options.reductionEffort, 0, 6)) {\n      this.options.webpReductionEffort = options.reductionEffort;\n    } else {\n      throw is.invalidParameterError('reductionEffort', 'integer between 0 and 6', options.reductionEffort);\n    }\n  }\n\n  trySetAnimationOptions(options, this.options);\n  return this._updateFormatOut('webp', options);\n}\n\n/**\n * Use these GIF options for output image.\n *\n * Requires libvips compiled with support for ImageMagick or GraphicsMagick.\n * The prebuilt binaries do not include this - see\n * {@link https://sharp.pixelplumbing.com/install#custom-libvips installing a custom libvips}.\n *\n * @param {Object} [options] - output options\n * @param {number} [options.pageHeight] - page height for animated output\n * @param {number} [options.loop=0] - number of animation iterations, use 0 for infinite animation\n * @param {number[]} [options.delay] - list of delays between animation frames (in milliseconds)\n * @param {boolean} [options.force=true] - force GIF output, otherwise attempt to use input format\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\n/* istanbul ignore next */\nfunction gif (options) {\n  if (!this.constructor.format.magick.output.buffer) {\n    throw new Error('The gif operation requires libvips to have been installed with support for ImageMagick');\n  }\n  trySetAnimationOptions(options, this.options);\n  return this._updateFormatOut('gif', options);\n}\n\n/**\n * Set animation options if available.\n * @private\n *\n * @param {Object} [source] - output options\n * @param {number} [source.pageHeight] - page height for animated output\n * @param {number} [source.loop=0] - number of animation iterations, use 0 for infinite animation\n * @param {number[]} [source.delay] - list of delays between animation frames (in milliseconds)\n * @param {Object} [target] - target object for valid options\n * @throws {Error} Invalid options\n */\nfunction trySetAnimationOptions (source, target) {\n  if (is.object(source) && is.defined(source.pageHeight)) {\n    if (is.integer(source.pageHeight) && source.pageHeight > 0) {\n      target.pageHeight = source.pageHeight;\n    } else {\n      throw is.invalidParameterError('pageHeight', 'integer larger than 0', source.pageHeight);\n    }\n  }\n  if (is.object(source) && is.defined(source.loop)) {\n    if (is.integer(source.loop) && is.inRange(source.loop, 0, 65535)) {\n      target.loop = source.loop;\n    } else {\n      throw is.invalidParameterError('loop', 'integer between 0 and 65535', source.loop);\n    }\n  }\n  if (is.object(source) && is.defined(source.delay)) {\n    if (\n      Array.isArray(source.delay) &&\n      source.delay.every(is.integer) &&\n      source.delay.every(v => is.inRange(v, 0, 65535))) {\n      target.delay = source.delay;\n    } else {\n      throw is.invalidParameterError('delay', 'array of integers between 0 and 65535', source.delay);\n    }\n  }\n}\n\n/**\n * Use these TIFF options for output image.\n *\n * @example\n * // Convert SVG input to LZW-compressed, 1 bit per pixel TIFF output\n * sharp('input.svg')\n *   .tiff({\n *     compression: 'lzw',\n *     bitdepth: 1\n *   })\n *   .toFile('1-bpp-output.tiff')\n *   .then(info => { ... });\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=80] - quality, integer 1-100\n * @param {boolean} [options.force=true] - force TIFF output, otherwise attempt to use input format\n * @param {string} [options.compression='jpeg'] - compression options: lzw, deflate, jpeg, ccittfax4\n * @param {string} [options.predictor='horizontal'] - compression predictor options: none, horizontal, float\n * @param {boolean} [options.pyramid=false] - write an image pyramid\n * @param {boolean} [options.tile=false] - write a tiled tiff\n * @param {number} [options.tileWidth=256] - horizontal tile size\n * @param {number} [options.tileHeight=256] - vertical tile size\n * @param {number} [options.xres=1.0] - horizontal resolution in pixels/mm\n * @param {number} [options.yres=1.0] - vertical resolution in pixels/mm\n * @param {number} [options.bitdepth=8] - reduce bitdepth to 1, 2 or 4 bit\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\nfunction tiff (options) {\n  if (is.object(options)) {\n    if (is.defined(options.quality)) {\n      if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {\n        this.options.tiffQuality = options.quality;\n      } else {\n        throw is.invalidParameterError('quality', 'integer between 1 and 100', options.quality);\n      }\n    }\n    if (is.defined(options.bitdepth)) {\n      if (is.integer(options.bitdepth) && is.inArray(options.bitdepth, [1, 2, 4, 8])) {\n        this.options.tiffBitdepth = options.bitdepth;\n      } else {\n        throw is.invalidParameterError('bitdepth', '1, 2, 4 or 8', options.bitdepth);\n      }\n    }\n    // tiling\n    if (is.defined(options.tile)) {\n      this._setBooleanOption('tiffTile', options.tile);\n    }\n    if (is.defined(options.tileWidth)) {\n      if (is.integer(options.tileWidth) && options.tileWidth > 0) {\n        this.options.tiffTileWidth = options.tileWidth;\n      } else {\n        throw is.invalidParameterError('tileWidth', 'integer greater than zero', options.tileWidth);\n      }\n    }\n    if (is.defined(options.tileHeight)) {\n      if (is.integer(options.tileHeight) && options.tileHeight > 0) {\n        this.options.tiffTileHeight = options.tileHeight;\n      } else {\n        throw is.invalidParameterError('tileHeight', 'integer greater than zero', options.tileHeight);\n      }\n    }\n    // pyramid\n    if (is.defined(options.pyramid)) {\n      this._setBooleanOption('tiffPyramid', options.pyramid);\n    }\n    // resolution\n    if (is.defined(options.xres)) {\n      if (is.number(options.xres) && options.xres > 0) {\n        this.options.tiffXres = options.xres;\n      } else {\n        throw is.invalidParameterError('xres', 'number greater than zero', options.xres);\n      }\n    }\n    if (is.defined(options.yres)) {\n      if (is.number(options.yres) && options.yres > 0) {\n        this.options.tiffYres = options.yres;\n      } else {\n        throw is.invalidParameterError('yres', 'number greater than zero', options.yres);\n      }\n    }\n    // compression\n    if (is.defined(options.compression)) {\n      if (is.string(options.compression) && is.inArray(options.compression, ['lzw', 'deflate', 'jpeg', 'ccittfax4', 'none'])) {\n        this.options.tiffCompression = options.compression;\n      } else {\n        throw is.invalidParameterError('compression', 'one of: lzw, deflate, jpeg, ccittfax4, none', options.compression);\n      }\n    }\n    // predictor\n    if (is.defined(options.predictor)) {\n      if (is.string(options.predictor) && is.inArray(options.predictor, ['none', 'horizontal', 'float'])) {\n        this.options.tiffPredictor = options.predictor;\n      } else {\n        throw is.invalidParameterError('predictor', 'one of: none, horizontal, float', options.predictor);\n      }\n    }\n  }\n  return this._updateFormatOut('tiff', options);\n}\n\n/**\n * Use these AVIF options for output image.\n *\n * Whilst it is possible to create AVIF images smaller than 16x16 pixels,\n * most web browsers do not display these properly.\n *\n * @since 0.27.0\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=50] - quality, integer 1-100\n * @param {boolean} [options.lossless=false] - use lossless compression\n * @param {boolean} [options.speed=5] - CPU effort vs file size, 0 (slowest/smallest) to 8 (fastest/largest)\n * @param {string} [options.chromaSubsampling='4:2:0'] - set to '4:4:4' to prevent chroma subsampling otherwise defaults to '4:2:0' chroma subsampling, requires libvips v8.11.0\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\nfunction avif (options) {\n  return this.heif({ ...options, compression: 'av1' });\n}\n\n/**\n * Use these HEIF options for output image.\n *\n * Support for patent-encumbered HEIC images requires the use of a\n * globally-installed libvips compiled with support for libheif, libde265 and x265.\n *\n * @since 0.23.0\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=50] - quality, integer 1-100\n * @param {string} [options.compression='av1'] - compression format: av1, hevc\n * @param {boolean} [options.lossless=false] - use lossless compression\n * @param {number} [options.speed=5] - CPU effort vs file size, 0 (slowest/smallest) to 8 (fastest/largest)\n * @param {string} [options.chromaSubsampling='4:2:0'] - set to '4:4:4' to prevent chroma subsampling otherwise defaults to '4:2:0' chroma subsampling, requires libvips v8.11.0\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\nfunction heif (options) {\n  if (is.object(options)) {\n    if (is.defined(options.quality)) {\n      if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {\n        this.options.heifQuality = options.quality;\n      } else {\n        throw is.invalidParameterError('quality', 'integer between 1 and 100', options.quality);\n      }\n    }\n    if (is.defined(options.lossless)) {\n      if (is.bool(options.lossless)) {\n        this.options.heifLossless = options.lossless;\n      } else {\n        throw is.invalidParameterError('lossless', 'boolean', options.lossless);\n      }\n    }\n    if (is.defined(options.compression)) {\n      if (is.string(options.compression) && is.inArray(options.compression, ['av1', 'hevc'])) {\n        this.options.heifCompression = options.compression;\n      } else {\n        throw is.invalidParameterError('compression', 'one of: av1, hevc', options.compression);\n      }\n    }\n    if (is.defined(options.speed)) {\n      if (is.integer(options.speed) && is.inRange(options.speed, 0, 8)) {\n        this.options.heifSpeed = options.speed;\n      } else {\n        throw is.invalidParameterError('speed', 'integer between 0 and 8', options.speed);\n      }\n    }\n    if (is.defined(options.chromaSubsampling)) {\n      if (is.string(options.chromaSubsampling) && is.inArray(options.chromaSubsampling, ['4:2:0', '4:4:4'])) {\n        this.options.heifChromaSubsampling = options.chromaSubsampling;\n      } else {\n        throw is.invalidParameterError('chromaSubsampling', 'one of: 4:2:0, 4:4:4', options.chromaSubsampling);\n      }\n    }\n  }\n  return this._updateFormatOut('heif', options);\n}\n\n/**\n * Force output to be raw, uncompressed, 8-bit unsigned integer (unit8) pixel data.\n * Pixel ordering is left-to-right, top-to-bottom, without padding.\n * Channel ordering will be RGB or RGBA for non-greyscale colourspaces.\n *\n * @example\n * // Extract raw RGB pixel data from JPEG input\n * const { data, info } = await sharp('input.jpg')\n *   .raw()\n *   .toBuffer({ resolveWithObject: true });\n *\n * @example\n * // Extract alpha channel as raw pixel data from PNG input\n * const data = await sharp('input.png')\n *   .ensureAlpha()\n *   .extractChannel(3)\n *   .toColourspace('b-w')\n *   .raw()\n *   .toBuffer();\n *\n * @returns {Sharp}\n */\nfunction raw () {\n  return this._updateFormatOut('raw');\n}\n\n/**\n * Use tile-based deep zoom (image pyramid) output.\n * Set the format and options for tile images via the `toFormat`, `jpeg`, `png` or `webp` functions.\n * Use a `.zip` or `.szi` file extension with `toFile` to write to a compressed archive file format.\n *\n * Warning: multiple sharp instances concurrently producing tile output can expose a possible race condition in some versions of libgsf.\n *\n * @example\n *  sharp('input.tiff')\n *   .png()\n *   .tile({\n *     size: 512\n *   })\n *   .toFile('output.dz', function(err, info) {\n *     // output.dzi is the Deep Zoom XML definition\n *     // output_files contains 512x512 tiles grouped by zoom level\n *   });\n *\n * @param {Object} [options]\n * @param {number} [options.size=256] tile size in pixels, a value between 1 and 8192.\n * @param {number} [options.overlap=0] tile overlap in pixels, a value between 0 and 8192.\n * @param {number} [options.angle=0] tile angle of rotation, must be a multiple of 90.\n * @param {string|Object} [options.background={r: 255, g: 255, b: 255, alpha: 1}] - background colour, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to white without transparency.\n * @param {string} [options.depth] how deep to make the pyramid, possible values are `onepixel`, `onetile` or `one`, default based on layout.\n * @param {number} [options.skipBlanks=-1] threshold to skip tile generation, a value 0 - 255 for 8-bit images or 0 - 65535 for 16-bit images\n * @param {string} [options.container='fs'] tile container, with value `fs` (filesystem) or `zip` (compressed file).\n * @param {string} [options.layout='dz'] filesystem layout, possible values are `dz`, `iiif`, `zoomify` or `google`.\n * @param {boolean} [options.centre=false] centre image in tile.\n * @param {boolean} [options.center=false] alternative spelling of centre.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction tile (options) {\n  if (is.object(options)) {\n    // Size of square tiles, in pixels\n    if (is.defined(options.size)) {\n      if (is.integer(options.size) && is.inRange(options.size, 1, 8192)) {\n        this.options.tileSize = options.size;\n      } else {\n        throw is.invalidParameterError('size', 'integer between 1 and 8192', options.size);\n      }\n    }\n    // Overlap of tiles, in pixels\n    if (is.defined(options.overlap)) {\n      if (is.integer(options.overlap) && is.inRange(options.overlap, 0, 8192)) {\n        if (options.overlap > this.options.tileSize) {\n          throw is.invalidParameterError('overlap', `<= size (${this.options.tileSize})`, options.overlap);\n        }\n        this.options.tileOverlap = options.overlap;\n      } else {\n        throw is.invalidParameterError('overlap', 'integer between 0 and 8192', options.overlap);\n      }\n    }\n    // Container\n    if (is.defined(options.container)) {\n      if (is.string(options.container) && is.inArray(options.container, ['fs', 'zip'])) {\n        this.options.tileContainer = options.container;\n      } else {\n        throw is.invalidParameterError('container', 'one of: fs, zip', options.container);\n      }\n    }\n    // Layout\n    if (is.defined(options.layout)) {\n      if (is.string(options.layout) && is.inArray(options.layout, ['dz', 'google', 'iiif', 'zoomify'])) {\n        this.options.tileLayout = options.layout;\n      } else {\n        throw is.invalidParameterError('layout', 'one of: dz, google, iiif, zoomify', options.layout);\n      }\n    }\n    // Angle of rotation,\n    if (is.defined(options.angle)) {\n      if (is.integer(options.angle) && !(options.angle % 90)) {\n        this.options.tileAngle = options.angle;\n      } else {\n        throw is.invalidParameterError('angle', 'positive/negative multiple of 90', options.angle);\n      }\n    }\n    // Background colour\n    this._setBackgroundColourOption('tileBackground', options.background);\n    // Depth of tiles\n    if (is.defined(options.depth)) {\n      if (is.string(options.depth) && is.inArray(options.depth, ['onepixel', 'onetile', 'one'])) {\n        this.options.tileDepth = options.depth;\n      } else {\n        throw is.invalidParameterError('depth', 'one of: onepixel, onetile, one', options.depth);\n      }\n    }\n    // Threshold to skip blank tiles\n    if (is.defined(options.skipBlanks)) {\n      if (is.integer(options.skipBlanks) && is.inRange(options.skipBlanks, -1, 65535)) {\n        this.options.tileSkipBlanks = options.skipBlanks;\n      } else {\n        throw is.invalidParameterError('skipBlanks', 'integer between -1 and 255/65535', options.skipBlanks);\n      }\n    } else if (is.defined(options.layout) && options.layout === 'google') {\n      this.options.tileSkipBlanks = 5;\n    }\n    // Center image in tile\n    const centre = is.bool(options.center) ? options.center : options.centre;\n    if (is.defined(centre)) {\n      this._setBooleanOption('tileCentre', centre);\n    }\n  }\n  // Format\n  if (is.inArray(this.options.formatOut, ['jpeg', 'png', 'webp'])) {\n    this.options.tileFormat = this.options.formatOut;\n  } else if (this.options.formatOut !== 'input') {\n    throw is.invalidParameterError('format', 'one of: jpeg, png, webp', this.options.formatOut);\n  }\n  return this._updateFormatOut('dz');\n}\n\n/**\n * Update the output format unless options.force is false,\n * in which case revert to input format.\n * @private\n * @param {string} formatOut\n * @param {Object} [options]\n * @param {boolean} [options.force=true] - force output format, otherwise attempt to use input format\n * @returns {Sharp}\n */\nfunction _updateFormatOut (formatOut, options) {\n  if (!(is.object(options) && options.force === false)) {\n    this.options.formatOut = formatOut;\n  }\n  return this;\n}\n\n/**\n * Update a boolean attribute of the this.options Object.\n * @private\n * @param {string} key\n * @param {boolean} val\n * @throws {Error} Invalid key\n */\nfunction _setBooleanOption (key, val) {\n  if (is.bool(val)) {\n    this.options[key] = val;\n  } else {\n    throw is.invalidParameterError(key, 'boolean', val);\n  }\n}\n\n/**\n * Called by a WriteableStream to notify us it is ready for data.\n * @private\n */\nfunction _read () {\n  /* istanbul ignore else */\n  if (!this.options.streamOut) {\n    this.options.streamOut = true;\n    this._pipeline();\n  }\n}\n\n/**\n * Invoke the C++ image processing pipeline\n * Supports callback, stream and promise variants\n * @private\n */\nfunction _pipeline (callback) {\n  if (typeof callback === 'function') {\n    // output=file/buffer\n    if (this._isStreamInput()) {\n      // output=file/buffer, input=stream\n      this.on('finish', () => {\n        this._flattenBufferIn();\n        sharp.pipeline(this.options, callback);\n      });\n    } else {\n      // output=file/buffer, input=file/buffer\n      sharp.pipeline(this.options, callback);\n    }\n    return this;\n  } else if (this.options.streamOut) {\n    // output=stream\n    if (this._isStreamInput()) {\n      // output=stream, input=stream\n      this.once('finish', () => {\n        this._flattenBufferIn();\n        sharp.pipeline(this.options, (err, data, info) => {\n          if (err) {\n            this.emit('error', err);\n          } else {\n            this.emit('info', info);\n            this.push(data);\n          }\n          this.push(null);\n        });\n      });\n      if (this.streamInFinished) {\n        this.emit('finish');\n      }\n    } else {\n      // output=stream, input=file/buffer\n      sharp.pipeline(this.options, (err, data, info) => {\n        if (err) {\n          this.emit('error', err);\n        } else {\n          this.emit('info', info);\n          this.push(data);\n        }\n        this.push(null);\n      });\n    }\n    return this;\n  } else {\n    // output=promise\n    if (this._isStreamInput()) {\n      // output=promise, input=stream\n      return new Promise((resolve, reject) => {\n        this.once('finish', () => {\n          this._flattenBufferIn();\n          sharp.pipeline(this.options, (err, data, info) => {\n            if (err) {\n              reject(err);\n            } else {\n              if (this.options.resolveWithObject) {\n                resolve({ data, info });\n              } else {\n                resolve(data);\n              }\n            }\n          });\n        });\n      });\n    } else {\n      // output=promise, input=file/buffer\n      return new Promise((resolve, reject) => {\n        sharp.pipeline(this.options, (err, data, info) => {\n          if (err) {\n            reject(err);\n          } else {\n            if (this.options.resolveWithObject) {\n              resolve({ data: data, info: info });\n            } else {\n              resolve(data);\n            }\n          }\n        });\n      });\n    }\n  }\n}\n\n/**\n * Decorate the Sharp prototype with output-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    // Public\n    toFile,\n    toBuffer,\n    withMetadata,\n    toFormat,\n    jpeg,\n    png,\n    webp,\n    tiff,\n    avif,\n    heif,\n    gif,\n    raw,\n    tile,\n    // Private\n    _updateFormatOut,\n    _setBooleanOption,\n    _read,\n    _pipeline\n  });\n};\n"]},"metadata":{},"sourceType":"script"}