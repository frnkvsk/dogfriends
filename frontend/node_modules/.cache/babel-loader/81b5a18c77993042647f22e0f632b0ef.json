{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getComments, postCommentNew, deleteComment } from './api/DogfriendsApi';\nexport const getCommentsDataById = createAsyncThunk('getCommentsById', async id => {\n  const response = await getComments(id);\n  return response.data;\n});\nexport const dogfriendsCommentsSlice = createSlice({\n  name: 'commentList',\n  initialState: {\n    commentList: {\n      status: 'idle',\n      data: [],\n      error: {}\n    }\n  },\n  reducers: {\n    addNewComment: (state, action) => {\n      const {\n        id,\n        comment,\n        token\n      } = action.payload;\n      postCommentNew(id, comment, token);\n    },\n    removeComment: (state, action) => {\n      const {\n        id,\n        username,\n        token\n      } = action.payload;\n      deleteComment(id, username, token);\n    }\n  },\n  extraReducers: {\n    // get comments by id\n    [getCommentsDataById.pending]: (state, action) => {\n      state.commentList = {\n        status: 'pending',\n        data: {},\n        error: {}\n      };\n    },\n    [getCommentsDataById.fulfilled]: (state, action) => {\n      state.commentList = {\n        status: 'fulfilled',\n        data: action.payload,\n        error: {}\n      };\n    },\n    [getCommentsDataById.rejected]: (state, action) => {\n      state.commentList = {\n        status: 'rejected',\n        data: {},\n        error: action.payload\n      };\n    }\n  }\n});\nexport const {\n  addNewComment,\n  removeComment\n} = dogfriendsCommentsSlice.actions;\nexport const selectComments = state => state.commentList.commentList;\nexport default dogfriendsCommentsSlice.reducer;","map":{"version":3,"sources":["/home/fv/js/capstone2/dogfriends/frontend/src/features/dogfriends/dogfriendsCommentsSlice.js"],"names":["createAsyncThunk","createSlice","getComments","postCommentNew","deleteComment","getCommentsDataById","id","response","data","dogfriendsCommentsSlice","name","initialState","commentList","status","error","reducers","addNewComment","state","action","comment","token","payload","removeComment","username","extraReducers","pending","fulfilled","rejected","actions","selectComments","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SACEC,WADF,EAEEC,cAFF,EAGEC,aAHF,QAIO,qBAJP;AAMA,OAAO,MAAMC,mBAAmB,GAAGL,gBAAgB,CACjD,iBADiD,EAEjD,MAAOM,EAAP,IAAc;AACZ,QAAMC,QAAQ,GAAG,MAAML,WAAW,CAACI,EAAD,CAAlC;AACA,SAAOC,QAAQ,CAACC,IAAhB;AACD,CALgD,CAA5C;AAQP,OAAO,MAAMC,uBAAuB,GAAGR,WAAW,CAAC;AACjDS,EAAAA,IAAI,EAAE,aAD2C;AAEjDC,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE;AACXC,MAAAA,MAAM,EAAE,MADG;AAEXL,MAAAA,IAAI,EAAE,EAFK;AAGXM,MAAAA,KAAK,EAAE;AAHI;AADD,GAFmC;AASjDC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,YAAM;AAACZ,QAAAA,EAAD;AAAKa,QAAAA,OAAL;AAAcC,QAAAA;AAAd,UAAuBF,MAAM,CAACG,OAApC;AACAlB,MAAAA,cAAc,CAACG,EAAD,EAAKa,OAAL,EAAcC,KAAd,CAAd;AACD,KAJO;AAKRE,IAAAA,aAAa,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAChC,YAAM;AAACZ,QAAAA,EAAD;AAAKiB,QAAAA,QAAL;AAAeH,QAAAA;AAAf,UAAwBF,MAAM,CAACG,OAArC;AACAjB,MAAAA,aAAa,CAACE,EAAD,EAAKiB,QAAL,EAAeH,KAAf,CAAb;AACD;AARO,GATuC;AAmBjDI,EAAAA,aAAa,EAAE;AACb;AACA,KAACnB,mBAAmB,CAACoB,OAArB,GAA+B,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAChDD,MAAAA,KAAK,CAACL,WAAN,GAAoB;AAClBC,QAAAA,MAAM,EAAE,SADU;AAElBL,QAAAA,IAAI,EAAE,EAFY;AAGlBM,QAAAA,KAAK,EAAE;AAHW,OAApB;AAKD,KARY;AASb,KAACT,mBAAmB,CAACqB,SAArB,GAAiC,CAACT,KAAD,EAAQC,MAAR,KAAmB;AAClDD,MAAAA,KAAK,CAACL,WAAN,GAAoB;AAClBC,QAAAA,MAAM,EAAE,WADU;AAElBL,QAAAA,IAAI,EAAEU,MAAM,CAACG,OAFK;AAGlBP,QAAAA,KAAK,EAAE;AAHW,OAApB;AAKD,KAfY;AAgBb,KAACT,mBAAmB,CAACsB,QAArB,GAAgC,CAACV,KAAD,EAAQC,MAAR,KAAmB;AACjDD,MAAAA,KAAK,CAACL,WAAN,GAAoB;AAClBC,QAAAA,MAAM,EAAE,UADU;AAElBL,QAAAA,IAAI,EAAE,EAFY;AAGlBM,QAAAA,KAAK,EAAEI,MAAM,CAACG;AAHI,OAApB;AAKD;AAtBY;AAnBkC,CAAD,CAA3C;AA6CP,OAAO,MAAM;AACXL,EAAAA,aADW;AAEXM,EAAAA;AAFW,IAGTb,uBAAuB,CAACmB,OAHrB;AAKP,OAAO,MAAMC,cAAc,GAAGZ,KAAK,IAAIA,KAAK,CAACL,WAAN,CAAkBA,WAAlD;AAEP,eAAeH,uBAAuB,CAACqB,OAAvC","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport {\n  getComments,\n  postCommentNew,\n  deleteComment,\n} from './api/DogfriendsApi';\n\nexport const getCommentsDataById = createAsyncThunk(\n  'getCommentsById',\n  async (id) => {\n    const response = await getComments(id);\n    return response.data;\n  }\n);\n\nexport const dogfriendsCommentsSlice = createSlice({\n  name: 'commentList',\n  initialState: {\n    commentList: {\n      status: 'idle',\n      data: [],\n      error: {}\n    }\n  },\n  reducers: {\n    addNewComment: (state, action) => {\n      const {id, comment, token} = action.payload;\n      postCommentNew(id, comment, token);\n    },\n    removeComment: (state, action) => {\n      const {id, username, token} = action.payload;\n      deleteComment(id, username, token);\n    },    \n  },\n  extraReducers: {    \n    // get comments by id\n    [getCommentsDataById.pending]: (state, action) => {\n      state.commentList = {\n        status: 'pending',\n        data: {},\n        error: {}\n      };\n    },\n    [getCommentsDataById.fulfilled]: (state, action) => {\n      state.commentList = {\n        status: 'fulfilled',\n        data: action.payload,\n        error: {}\n      };\n    },\n    [getCommentsDataById.rejected]: (state, action) => {\n      state.commentList = {\n        status: 'rejected',\n        data: {},\n        error: action.payload,\n      };\n    },    \n  }\n});\n\nexport const {\n  addNewComment,\n  removeComment,\n} = dogfriendsCommentsSlice.actions;\n\nexport const selectComments = state => state.commentList.commentList;\n\nexport default dogfriendsCommentsSlice.reducer;"]},"metadata":{},"sourceType":"module"}