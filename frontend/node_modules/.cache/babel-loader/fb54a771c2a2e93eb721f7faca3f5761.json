{"ast":null,"code":"// import Resizer from 'react-image-file-resizer';\n// const resizeFile = (file, w, h) => new Promise(resolve => {\n//   // const fr = new FileReader();\n//   var image = new Image();\n//   image.url = file[0].data_url;\n//   var canvas=document.createElement(\"canvas\");\n//   var context=canvas.getContext(\"2d\");\n//   canvas.width=w //image.width/4;\n//   canvas.height=h //image.height/4;\n//   context.drawImage(image,\n//       0,\n//       0,\n//       image.width,\n//       image.height,\n//       0,\n//       0,\n//       canvas.width,\n//       canvas.height\n//   );\n//   image.src = canvas.toDataURL();\n//   console.log('resizeFile image',image)\n//   console.log('resizeFile image.width',image.width)\n//   return image\n// });\nlet resized = null;\nvar fileReader = new FileReader(); // var filterType = /^(?:image\\/bmp|image\\/cis\\-cod|image\\/gif|image\\/ief|image\\/jpeg|image\\/jpeg|image\\/jpeg|image\\/pipeg|image\\/png|image\\/svg\\+xml|image\\/tiff|image\\/x\\-cmu\\-raster|image\\/x\\-cmx|image\\/x\\-icon|image\\/x\\-portable\\-anymap|image\\/x\\-portable\\-bitmap|image\\/x\\-portable\\-graymap|image\\/x\\-portable\\-pixmap|image\\/x\\-rgb|image\\/x\\-xbitmap|image\\/x\\-xpixmap|image\\/x\\-xwindowdump)$/i;\n\nfileReader.onload = function (event) {\n  var image = new Image();\n\n  image.onload = function () {\n    document.getElementById(\"original-Img\").src = image.src;\n    var canvas = document.createElement(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    canvas.width = image.width / 4;\n    canvas.height = image.height / 4;\n    context.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);\n    resized = canvas.toDataURL();\n  };\n\n  image.src = event.target.result;\n}; // var loadImageFile = function () {\n//   var uploadImage = document.getElementById(\"upload-Image\");\n//   //check and retuns the length of uploded file.\n//   if (uploadImage.files.length === 0) { \n//     return; \n//   }\n//   //Is Used for validate a valid file.\n//   var uploadFile = document.getElementById(\"upload-Image\").files[0];\n//   if (!filterType.test(uploadFile.type)) {\n//     alert(\"Please select a valid image.\"); \n//     return;\n//   }\n//   fileReader.readAsDataURL(uploadFile);\n// }\n\n\nconst ResizeImage = async (file, width, height) => {\n  fileReader.readAsDataURL(file);\n  const res = resized; //await resizeFile(file, width, height);\n\n  console.log('res', res);\n  return res;\n};\n\n_c = ResizeImage;\nexport default ResizeImage; // Resizer.imageFileResizer(\n//     file, // Is the file of the image which will resized.\n//     maxWidth, // Is the maxWidth of the resized new image.\n//     maxHeight, // Is the maxHeight of the resized new image.\n//     compressFormat, // Is the compressFormat of the resized new image.\n//     quality, // Is the quality of the resized new image.\n//     rotation, // Is the degree of clockwise rotation to apply to uploaded image. \n//     responseUriFunc,  // Is the callBack function of the resized new image URI.\n//     outputType,  // Is the output type of the resized new image.\n//     minWidth, // Is the minWidth of the resized new image.\n//     minHeight, // Is the minHeight of the resized new image.\n//     );\n\nvar _c;\n\n$RefreshReg$(_c, \"ResizeImage\");","map":{"version":3,"sources":["/home/fv/js/capstone2/dogfriends/frontend/src/features/dogfriends/components/ResizeImage.js"],"names":["resized","fileReader","FileReader","onload","event","image","Image","document","getElementById","src","canvas","createElement","context","getContext","width","height","drawImage","toDataURL","target","result","ResizeImage","file","readAsDataURL","res","console","log"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA,IAAIA,OAAO,GAAG,IAAd;AACA,IAAIC,UAAU,GAAG,IAAIC,UAAJ,EAAjB,C,CACA;;AAEAD,UAAU,CAACE,MAAX,GAAoB,UAAUC,KAAV,EAAiB;AACnC,MAAIC,KAAK,GAAG,IAAIC,KAAJ,EAAZ;;AAEAD,EAAAA,KAAK,CAACF,MAAN,GAAa,YAAU;AACnBI,IAAAA,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCC,GAAxC,GAA4CJ,KAAK,CAACI,GAAlD;AACA,QAAIC,MAAM,GAACH,QAAQ,CAACI,aAAT,CAAuB,QAAvB,CAAX;AACA,QAAIC,OAAO,GAACF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAZ;AACAH,IAAAA,MAAM,CAACI,KAAP,GAAaT,KAAK,CAACS,KAAN,GAAY,CAAzB;AACAJ,IAAAA,MAAM,CAACK,MAAP,GAAcV,KAAK,CAACU,MAAN,GAAa,CAA3B;AACAH,IAAAA,OAAO,CAACI,SAAR,CAAkBX,KAAlB,EACI,CADJ,EAEI,CAFJ,EAGIA,KAAK,CAACS,KAHV,EAIIT,KAAK,CAACU,MAJV,EAKI,CALJ,EAMI,CANJ,EAOIL,MAAM,CAACI,KAPX,EAQIJ,MAAM,CAACK,MARX;AAWAf,IAAAA,OAAO,GAAGU,MAAM,CAACO,SAAP,EAAV;AACH,GAlBD;;AAmBAZ,EAAAA,KAAK,CAACI,GAAN,GAAUL,KAAK,CAACc,MAAN,CAAaC,MAAvB;AACD,CAvBD,C,CAyBA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AACA,MAAMC,WAAW,GAAG,OAAOC,IAAP,EAAaP,KAAb,EAAoBC,MAApB,KAA+B;AACjDd,EAAAA,UAAU,CAACqB,aAAX,CAAyBD,IAAzB;AACA,QAAME,GAAG,GAAGvB,OAAZ,CAFiD,CAE7B;;AACpBwB,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBF,GAAlB;AACA,SAAOA,GAAP;AACD,CALD;;KAAMH,W;AAON,eAAeA,WAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import Resizer from 'react-image-file-resizer';\n\n// const resizeFile = (file, w, h) => new Promise(resolve => {\n//   // const fr = new FileReader();\n//   var image = new Image();\n//   image.url = file[0].data_url;\n//   var canvas=document.createElement(\"canvas\");\n//   var context=canvas.getContext(\"2d\");\n//   canvas.width=w //image.width/4;\n//   canvas.height=h //image.height/4;\n//   context.drawImage(image,\n//       0,\n//       0,\n//       image.width,\n//       image.height,\n//       0,\n//       0,\n//       canvas.width,\n//       canvas.height\n//   );\n  \n//   image.src = canvas.toDataURL();\n//   console.log('resizeFile image',image)\n//   console.log('resizeFile image.width',image.width)\n//   return image\n// });\nlet resized = null;\nvar fileReader = new FileReader();\n// var filterType = /^(?:image\\/bmp|image\\/cis\\-cod|image\\/gif|image\\/ief|image\\/jpeg|image\\/jpeg|image\\/jpeg|image\\/pipeg|image\\/png|image\\/svg\\+xml|image\\/tiff|image\\/x\\-cmu\\-raster|image\\/x\\-cmx|image\\/x\\-icon|image\\/x\\-portable\\-anymap|image\\/x\\-portable\\-bitmap|image\\/x\\-portable\\-graymap|image\\/x\\-portable\\-pixmap|image\\/x\\-rgb|image\\/x\\-xbitmap|image\\/x\\-xpixmap|image\\/x\\-xwindowdump)$/i;\n\nfileReader.onload = function (event) {\n  var image = new Image();\n  \n  image.onload=function(){\n      document.getElementById(\"original-Img\").src=image.src;\n      var canvas=document.createElement(\"canvas\");\n      var context=canvas.getContext(\"2d\");\n      canvas.width=image.width/4;\n      canvas.height=image.height/4;\n      context.drawImage(image,\n          0,\n          0,\n          image.width,\n          image.height,\n          0,\n          0,\n          canvas.width,\n          canvas.height\n      );\n      \n      resized = canvas.toDataURL();\n  }\n  image.src=event.target.result;\n};\n\n// var loadImageFile = function () {\n//   var uploadImage = document.getElementById(\"upload-Image\");\n  \n//   //check and retuns the length of uploded file.\n//   if (uploadImage.files.length === 0) { \n//     return; \n//   }\n  \n//   //Is Used for validate a valid file.\n//   var uploadFile = document.getElementById(\"upload-Image\").files[0];\n//   if (!filterType.test(uploadFile.type)) {\n//     alert(\"Please select a valid image.\"); \n//     return;\n//   }\n  \n//   fileReader.readAsDataURL(uploadFile);\n// }\nconst ResizeImage = async (file, width, height) => {\n  fileReader.readAsDataURL(file)\n  const res = resized;//await resizeFile(file, width, height);\n  console.log('res',res)\n  return res\n}\n\nexport default ResizeImage\n// Resizer.imageFileResizer(\n//     file, // Is the file of the image which will resized.\n//     maxWidth, // Is the maxWidth of the resized new image.\n//     maxHeight, // Is the maxHeight of the resized new image.\n//     compressFormat, // Is the compressFormat of the resized new image.\n//     quality, // Is the quality of the resized new image.\n//     rotation, // Is the degree of clockwise rotation to apply to uploaded image. \n//     responseUriFunc,  // Is the callBack function of the resized new image URI.\n//     outputType,  // Is the output type of the resized new image.\n//     minWidth, // Is the minWidth of the resized new image.\n//     minHeight, // Is the minHeight of the resized new image.\n//     );"]},"metadata":{},"sourceType":"module"}