{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = process.env.REACT_APP_EXPRESS_BASE_URL; //'http://localhost:5000/api/';\n\nconst request = async (endpoint, paramsOrData = {}, verb = \"get\") => {\n  console.debug(\"API Call:\", endpoint, paramsOrData, verb);\n\n  try {\n    const res = await axios({\n      method: verb,\n      url: `${BASE_URL}${endpoint}`,\n      [verb === \"get\" ? \"params\" : \"data\"]: paramsOrData\n    });\n    return res; // axios sends query string data via the \"params\" key,\n    // and request body data via the \"data\" key,\n    // so the key we need depends on the HTTP verb\n  } catch (err) {\n    let message = err.response ? err.response.data.message : err;\n    throw Array.isArray(message) ? message : [message];\n  }\n}; // photos\n\n\nconst postNewPhoto = async (url, formData, token) => {\n  console.log('postNewPhoto'); // const url = process.env.REACT_APP_CLOUDINARY_BASE_URL+'upload';\n\n  const response1 = await fetch(url, {\n    method: 'post',\n    body: formData\n  });\n  const data1 = await response1.json();\n  console.log('data1', data1); // public_id, url, signature\n  // insert (public_id, url, signature) into photos table\n\n  const data2 = {\n    public_id: data1.public_id,\n    url: data1.url,\n    signature: data1.signature,\n    _token: token\n  };\n  return await request('photos/', data2, 'post');\n};\n\nconst postDestroyPhoto = async (public_id, signature) => {\n  //https://api.cloudinary.com/v1_1/demo/image/destroy -X POST --data 'public_id=sample&timestamp=173719931&api_key=436464676&signature=a788d68f86a6f868af'\n  const data = {\n    public_id: public_id,\n    timestamp: Date.now(),\n    api_key: process.env.REACT_APP_CLOUDINARY_API_KEY,\n    signature: signature\n  };\n  const url = process.env.REACT_APP_CLOUDINARY_BASE_URL + 'image/destroy';\n  const response = await request(url, data, 'post');\n  return await response.json(); // for dev we will just return this url so we don't keep making calls to Cloudinary API\n  // return data \n};\n\nexport { postNewPhoto, postDestroyPhoto };","map":{"version":3,"sources":["/home/fv/js/capstone2/dogfriends/frontend/src/features/dogfriends/api/DogfriendsPhotosApi.js"],"names":["axios","BASE_URL","process","env","REACT_APP_EXPRESS_BASE_URL","request","endpoint","paramsOrData","verb","console","debug","res","method","url","err","message","response","data","Array","isArray","postNewPhoto","formData","token","log","response1","fetch","body","data1","json","data2","public_id","signature","_token","postDestroyPhoto","timestamp","Date","now","api_key","REACT_APP_CLOUDINARY_API_KEY","REACT_APP_CLOUDINARY_BASE_URL"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,0BAA7B,C,CAAwD;;AAExD,MAAMC,OAAO,GAAG,OAAOC,QAAP,EAAiBC,YAAY,GAAG,EAAhC,EAAoCC,IAAI,GAAG,KAA3C,KAAqD;AAEnEC,EAAAA,OAAO,CAACC,KAAR,CAAc,WAAd,EAA2BJ,QAA3B,EAAqCC,YAArC,EAAmDC,IAAnD;;AACA,MAAI;AACF,UAAMG,GAAG,GAAG,MAAMX,KAAK,CAAC;AACtBY,MAAAA,MAAM,EAAEJ,IADc;AAEtBK,MAAAA,GAAG,EAAG,GAAEZ,QAAS,GAAEK,QAAS,EAFN;AAGtB,OAACE,IAAI,KAAK,KAAT,GAAiB,QAAjB,GAA4B,MAA7B,GAAsCD;AAHhB,KAAD,CAAvB;AAKA,WAAOI,GAAP,CANE,CAOA;AACA;AACA;AACH,GAVD,CAUC,OAAMG,GAAN,EAAW;AACV,QAAIC,OAAO,GAAGD,GAAG,CAACE,QAAJ,GAAeF,GAAG,CAACE,QAAJ,CAAaC,IAAb,CAAkBF,OAAjC,GAA2CD,GAAzD;AACA,UAAMI,KAAK,CAACC,OAAN,CAAcJ,OAAd,IAAyBA,OAAzB,GAAmC,CAACA,OAAD,CAAzC;AACD;AACF,CAjBD,C,CAmBA;;;AACA,MAAMK,YAAY,GAAG,OAAOP,GAAP,EAAYQ,QAAZ,EAAsBC,KAAtB,KAAgC;AACnDb,EAAAA,OAAO,CAACc,GAAR,CAAY,cAAZ,EADmD,CAEnD;;AACA,QAAMC,SAAS,GAAG,MAAMC,KAAK,CAACZ,GAAD,EAAM;AAACD,IAAAA,MAAM,EAAE,MAAT;AAAiBc,IAAAA,IAAI,EAAEL;AAAvB,GAAN,CAA7B;AACA,QAAMM,KAAK,GAAG,MAAMH,SAAS,CAACI,IAAV,EAApB;AAGAnB,EAAAA,OAAO,CAACc,GAAR,CAAY,OAAZ,EAAoBI,KAApB,EAPmD,CASnD;AACA;;AACA,QAAME,KAAK,GAAG;AACZC,IAAAA,SAAS,EAAEH,KAAK,CAACG,SADL;AAEZjB,IAAAA,GAAG,EAAEc,KAAK,CAACd,GAFC;AAGZkB,IAAAA,SAAS,EAAEJ,KAAK,CAACI,SAHL;AAIZC,IAAAA,MAAM,EAAEV;AAJI,GAAd;AAMA,SAAO,MAAMjB,OAAO,CAAC,SAAD,EAAYwB,KAAZ,EAAmB,MAAnB,CAApB;AACD,CAlBD;;AAmBA,MAAMI,gBAAgB,GAAG,OAAOH,SAAP,EAAkBC,SAAlB,KAAgC;AACvD;AACA,QAAMd,IAAI,GAAG;AACXa,IAAAA,SAAS,EAAEA,SADA;AAEXI,IAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL,EAFA;AAGXC,IAAAA,OAAO,EAAEnC,OAAO,CAACC,GAAR,CAAYmC,4BAHV;AAIXP,IAAAA,SAAS,EAAEA;AAJA,GAAb;AAMA,QAAMlB,GAAG,GAAGX,OAAO,CAACC,GAAR,CAAYoC,6BAAZ,GAA0C,eAAtD;AAEA,QAAMvB,QAAQ,GAAG,MAAMX,OAAO,CAACQ,GAAD,EAAMI,IAAN,EAAY,MAAZ,CAA9B;AACA,SAAO,MAAMD,QAAQ,CAACY,IAAT,EAAb,CAXuD,CAavD;AACA;AACD,CAfD;;AAiBA,SACER,YADF,EAEEa,gBAFF","sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = process.env.REACT_APP_EXPRESS_BASE_URL;//'http://localhost:5000/api/';\n\nconst request = async (endpoint, paramsOrData = {}, verb = \"get\") => {  \n  \n  console.debug(\"API Call:\", endpoint, paramsOrData, verb);\n  try {\n    const res = await axios({\n      method: verb,\n      url: `${BASE_URL}${endpoint}`,\n      [verb === \"get\" ? \"params\" : \"data\"]: paramsOrData});\n    \n    return res;\n      // axios sends query string data via the \"params\" key,\n      // and request body data via the \"data\" key,\n      // so the key we need depends on the HTTP verb\n  }catch(err) {\n    let message = err.response ? err.response.data.message : err;\n    throw Array.isArray(message) ? message : [message];\n  }\n}\n\n// photos\nconst postNewPhoto = async (url, formData, token) => {\n  console.log('postNewPhoto')\n  // const url = process.env.REACT_APP_CLOUDINARY_BASE_URL+'upload';\n  const response1 = await fetch(url, {method: 'post', body: formData});\n  const data1 = await response1.json();      \n\n\n  console.log('data1',data1)\n\n  // public_id, url, signature\n  // insert (public_id, url, signature) into photos table\n  const data2 = {\n    public_id: data1.public_id,\n    url: data1.url,\n    signature: data1.signature,\n    _token: token   \n  }\n  return await request('photos/', data2, 'post');\n}\nconst postDestroyPhoto = async (public_id, signature) => {\n  //https://api.cloudinary.com/v1_1/demo/image/destroy -X POST --data 'public_id=sample&timestamp=173719931&api_key=436464676&signature=a788d68f86a6f868af'\n  const data = {\n    public_id: public_id,\n    timestamp: Date.now(),\n    api_key: process.env.REACT_APP_CLOUDINARY_API_KEY,\n    signature: signature\n  }\n  const url = process.env.REACT_APP_CLOUDINARY_BASE_URL+'image/destroy';\n\n  const response = await request(url, data, 'post');\n  return await response.json();\n\n  // for dev we will just return this url so we don't keep making calls to Cloudinary API\n  // return data \n}\n\nexport {\n  postNewPhoto,\n  postDestroyPhoto\n}"]},"metadata":{},"sourceType":"module"}