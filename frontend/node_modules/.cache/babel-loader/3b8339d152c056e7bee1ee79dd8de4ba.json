{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = 'http://localhost:5000/api/';\n\nconst request = async (endpoint, paramsOrData = {}, verb = \"get\") => {\n  console.debug(\"API Call:\", endpoint, paramsOrData, verb);\n\n  try {\n    const res = await axios({\n      method: verb,\n      url: `${BASE_URL}${endpoint}`,\n      [verb === \"get\" ? \"params\" : \"data\"]: paramsOrData\n    });\n    return res; // axios sends query string data via the \"params\" key,\n    // and request body data via the \"data\" key,\n    // so the key we need depends on the HTTP verb\n  } catch (err) {\n    let message = err.response ? err.response.data.message : err;\n    throw Array.isArray(message) ? message : [message];\n  }\n}; // posts\n\n\nconst getPosts = async () => {\n  let res = await request('posts');\n  return res;\n};\n\nconst getPostById = async id => {\n  return await request(`posts/${id}`);\n};\n\nconst postPostVote = async (id, direction, token) => {\n  return await request(`posts/${id}/vote/${direction}`, {\n    _token: token\n  }, 'post');\n};\n\nconst postPostNew = async (title, description, body, token) => {\n  const data = {\n    title: title,\n    description: description,\n    body: body,\n    _token: token\n  };\n  return await request('posts/', data, 'post');\n};\n\nconst putPostUpdate = async (id, title, description, body, username, token) => {\n  const data = {\n    title: title,\n    description: description,\n    body: body,\n    username: username,\n    _token: token\n  };\n  return await request(`posts/${id}`, data, 'put');\n};\n\nconst deletePost = async (id, username, token) => {\n  const data = {\n    id: id,\n    username: username,\n    _token: token\n  };\n  return await request(`posts/${id}`, data, 'delete');\n}; // comments\n\n\nconst getComments = async id => {\n  return await request(`posts/comments/${id}`);\n};\n\nconst postCommentNew = async (id, text, token) => {\n  const res = await request(`posts/comments/${id}`, {\n    text: text,\n    _token: token\n  }, 'post');\n  return res;\n};\n\nconst putCommentUpdate = async (id, text, token) => {\n  const res = await request(`posts/comments/${id}`, {\n    text: text,\n    _token: token\n  }, 'put');\n  return res;\n};\n\nconst deleteComment = async (id, username, token) => {\n  return await request(`posts/comments/${id}`, {\n    username: username,\n    _token: token\n  }, 'delete');\n}; // login / signup\n\n\nconst login = async (username, password) => {\n  try {\n    return await request('login/', {\n      username: username,\n      password: password\n    }, 'post');\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst signup = async (username, password, first_name, last_name, photo_url, email) => {\n  try {\n    return await request('users/', {\n      username: username,\n      password: password,\n      first_name: first_name,\n      last_name: last_name,\n      photo_url: photo_url,\n      email: email\n    }, 'post');\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst getUserInfo = async (token, username) => {\n  try {\n    return await request(`users/${username}/`, {\n      _token: token\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst patchUserInfo = async (token, userInfo) => {\n  userInfo._token = token;\n\n  try {\n    return await request(`users/${userInfo.username}/`, userInfo, 'patch');\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport { getPosts, getPostById, postPostVote, postPostNew, putPostUpdate, deletePost, getComments, postCommentNew, putCommentUpdate, deleteComment, login, signup, getUserInfo, patchUserInfo };","map":{"version":3,"sources":["/home/fv/js/capstone2/dogfriends/frontend/src/features/dogfriends/api/DogfriendsApi.js"],"names":["axios","BASE_URL","request","endpoint","paramsOrData","verb","console","debug","res","method","url","err","message","response","data","Array","isArray","getPosts","getPostById","id","postPostVote","direction","token","_token","postPostNew","title","description","body","putPostUpdate","username","deletePost","getComments","postCommentNew","text","putCommentUpdate","deleteComment","login","password","error","signup","first_name","last_name","photo_url","email","getUserInfo","patchUserInfo","userInfo"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\n\nconst BASE_URL = 'http://localhost:5000/api/';\n\nconst request = async (endpoint, paramsOrData = {}, verb = \"get\") => {  \n  \n  console.debug(\"API Call:\", endpoint, paramsOrData, verb);\n\n  try {\n    const res = await axios({\n      method: verb,\n      url: `${BASE_URL}${endpoint}`,\n      [verb === \"get\" ? \"params\" : \"data\"]: paramsOrData});\n    \n    return res;\n      // axios sends query string data via the \"params\" key,\n      // and request body data via the \"data\" key,\n      // so the key we need depends on the HTTP verb\n  }catch(err) {\n    let message = err.response ? err.response.data.message : err;\n    throw Array.isArray(message) ? message : [message];\n  }\n}\n// posts\nconst getPosts = async () => {\n  let res = await request('posts');\n  return res;\n}\nconst getPostById = async (id) => {\n  return await request(`posts/${id}`);\n}\nconst postPostVote = async (id, direction, token) => {\n  return await request(`posts/${id}/vote/${direction}`, {_token: token}, 'post');\n}\nconst postPostNew = async (title, description, body, token) => {\n  const data = {\n    title: title,\n    description: description,\n    body: body, \n    _token: token   \n  }\n  return await request('posts/', data, 'post');\n}\nconst putPostUpdate = async (id, title, description, body, username, token) => {\n  \n  const data = {\n    title: title,\n    description: description,\n    body: body,  \n    username: username,\n    _token: token  \n  }\n  return await request(`posts/${id}`, data, 'put');\n}\nconst deletePost = async (id, username, token) => {\n  const data = {\n    id: id,\n    username: username,\n    _token: token  \n  }\n  return await request(`posts/${id}`, data, 'delete');\n}\n\n// comments\nconst getComments = async (id) => {\n  return await request(`posts/comments/${id}`)\n}\nconst postCommentNew = async (id, text, token) => {\n  const res = await request(`posts/comments/${id}`, {text: text, _token: token}, 'post');\n  return res\n}\nconst putCommentUpdate = async (id, text, token) => {\n  const res = await request(`posts/comments/${id}`, {text: text, _token: token}, 'put');\n  return res\n}\nconst deleteComment = async (id, username, token) => {\n  return await request(`posts/comments/${id}`, {username: username, _token: token}, 'delete');\n}\n\n// login / signup\nconst login = async (username, password) => {\n  try {\n    return await request('login/', {username: username, password: password}, 'post');\n  } catch (error) {\n    console.error(error);\n  }   \n}\nconst signup = async (username, password, first_name, last_name, photo_url, email) => {\n  try {\n    return await request('users/', {\n      username: username, \n      password: password, \n      first_name: first_name, \n      last_name: last_name, \n      photo_url: photo_url, \n      email: email}, 'post');\n  } catch (error) {\n    console.error(error);\n  }   \n}\nconst getUserInfo = async (token, username) => {\n  try {\n    return await request(`users/${username}/`, {_token: token});\n  } catch (error) {\n    console.error(error);\n  }   \n}\nconst patchUserInfo = async (token, userInfo) => {\n  userInfo._token = token;\n  try {\n    return await request(`users/${userInfo.username}/`, userInfo, 'patch');\n  } catch (error) {\n    console.error(error);\n  }   \n}\n\n\nexport {\n  getPosts,\n  getPostById,\n  postPostVote,\n  postPostNew,\n  putPostUpdate,\n  deletePost,\n  getComments,\n  postCommentNew,\n  putCommentUpdate,\n  deleteComment,\n  login,\n  signup,\n  getUserInfo,\n  patchUserInfo,\n};"]},"metadata":{},"sourceType":"module"}