{"ast":null,"code":"import Resizer from 'react-image-file-resizer';\n\nconst resizeFile = (file, w, h) => new Promise(resolve => {\n  // const fr = new FileReader();\n  let img = new Image();\n  img.src = file[0].data_url;\n  let canvas = document.createElement(\"canvas\");\n  let context = canvas.getContext(\"2d\");\n  canvas.width = img.width / 4;\n  canvas.height = img.height / 4;\n  context.drawImage(img, 0, 0, img.width, img.height, 0, 0, canvas.width, canvas.height); // console.log('fr',fr)\n  // console.log('ResizeImage file',Buffer.from(file[0].data_url))\n  // console.log('ResizeImage img', img)\n\n  return canvas.toDataURL(); // Resizer.imageFileResizer([img], w, h, 'JPEG', 100, 0,\n  // uri => {\n  //   resolve(uri);\n  // },\n  // 'base64'\n  // );\n});\n\nconst ResizeImage = async (file, width, height) => {\n  return await resizeFile(file, width, height);\n};\n\n_c = ResizeImage;\nexport default ResizeImage; // Resizer.imageFileResizer(\n//     file, // Is the file of the image which will resized.\n//     maxWidth, // Is the maxWidth of the resized new image.\n//     maxHeight, // Is the maxHeight of the resized new image.\n//     compressFormat, // Is the compressFormat of the resized new image.\n//     quality, // Is the quality of the resized new image.\n//     rotation, // Is the degree of clockwise rotation to apply to uploaded image. \n//     responseUriFunc,  // Is the callBack function of the resized new image URI.\n//     outputType,  // Is the output type of the resized new image.\n//     minWidth, // Is the minWidth of the resized new image.\n//     minHeight, // Is the minHeight of the resized new image.\n//     );\n\nvar _c;\n\n$RefreshReg$(_c, \"ResizeImage\");","map":{"version":3,"sources":["/home/fv/js/capstone2/dogfriends/frontend/src/features/dogfriends/components/ResizeImage.js"],"names":["Resizer","resizeFile","file","w","h","Promise","resolve","img","Image","src","data_url","canvas","document","createElement","context","getContext","width","height","drawImage","toDataURL","ResizeImage"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,0BAApB;;AAEA,MAAMC,UAAU,GAAG,CAACC,IAAD,EAAOC,CAAP,EAAUC,CAAV,KAAgB,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AACxD;AACA,MAAIC,GAAG,GAAG,IAAIC,KAAJ,EAAV;AACAD,EAAAA,GAAG,CAACE,GAAJ,GAAUP,IAAI,CAAC,CAAD,CAAJ,CAAQQ,QAAlB;AACA,MAAIC,MAAM,GAACC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAX;AACA,MAAIC,OAAO,GAACH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AACAJ,EAAAA,MAAM,CAACK,KAAP,GAAaT,GAAG,CAACS,KAAJ,GAAU,CAAvB;AACAL,EAAAA,MAAM,CAACM,MAAP,GAAcV,GAAG,CAACU,MAAJ,GAAW,CAAzB;AACAH,EAAAA,OAAO,CAACI,SAAR,CAAkBX,GAAlB,EACI,CADJ,EAEI,CAFJ,EAGIA,GAAG,CAACS,KAHR,EAIIT,GAAG,CAACU,MAJR,EAKI,CALJ,EAMI,CANJ,EAOIN,MAAM,CAACK,KAPX,EAQIL,MAAM,CAACM,MARX,EARwD,CAkBxD;AACA;AACA;;AACA,SAAON,MAAM,CAACQ,SAAP,EAAP,CArBwD,CAsBxD;AACA;AACA;AACA;AACA;AACA;AACD,CA5BkC,CAAnC;;AA8BA,MAAMC,WAAW,GAAG,OAAOlB,IAAP,EAAac,KAAb,EAAoBC,MAApB,KAA+B;AACjD,SAAO,MAAMhB,UAAU,CAACC,IAAD,EAAOc,KAAP,EAAcC,MAAd,CAAvB;AACD,CAFD;;KAAMG,W;AAIN,eAAeA,WAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import Resizer from 'react-image-file-resizer';\n\nconst resizeFile = (file, w, h) => new Promise(resolve => {\n  // const fr = new FileReader();\n  let img = new Image();\n  img.src = file[0].data_url;\n  let canvas=document.createElement(\"canvas\");\n  let context=canvas.getContext(\"2d\");\n  canvas.width=img.width/4;\n  canvas.height=img.height/4;\n  context.drawImage(img,\n      0,\n      0,\n      img.width,\n      img.height,\n      0,\n      0,\n      canvas.width,\n      canvas.height\n  );\n  // console.log('fr',fr)\n  // console.log('ResizeImage file',Buffer.from(file[0].data_url))\n  // console.log('ResizeImage img', img)\n  return canvas.toDataURL();\n  // Resizer.imageFileResizer([img], w, h, 'JPEG', 100, 0,\n  // uri => {\n  //   resolve(uri);\n  // },\n  // 'base64'\n  // );\n});\n\nconst ResizeImage = async (file, width, height) => {\n  return await resizeFile(file, width, height);\n}\n\nexport default ResizeImage\n// Resizer.imageFileResizer(\n//     file, // Is the file of the image which will resized.\n//     maxWidth, // Is the maxWidth of the resized new image.\n//     maxHeight, // Is the maxHeight of the resized new image.\n//     compressFormat, // Is the compressFormat of the resized new image.\n//     quality, // Is the quality of the resized new image.\n//     rotation, // Is the degree of clockwise rotation to apply to uploaded image. \n//     responseUriFunc,  // Is the callBack function of the resized new image URI.\n//     outputType,  // Is the output type of the resized new image.\n//     minWidth, // Is the minWidth of the resized new image.\n//     minHeight, // Is the minHeight of the resized new image.\n//     );"]},"metadata":{},"sourceType":"module"}