{"ast":null,"code":"// import Resizer from 'react-image-file-resizer';\nconst resizeFile = (file, w, h) => new Promise(resolve => {\n  // const fr = new FileReader();\n  var image = new Image();\n  image.url = file[0].data_url;\n\n  image.onload = function () {\n    document.getElementById(\"original-Img\").src = image.src;\n    var canvas = document.createElement(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    canvas.width = image.width / 4;\n    canvas.height = image.height / 4;\n    context.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);\n    image.src = canvas.toDataURL();\n  };\n\n  console.log('resizeFile image', image);\n  return image;\n});\n\nconst ResizeImage = async (file, width, height) => {\n  const res = await resizeFile(file, width, height);\n  console.log('res', res);\n  return res;\n};\n\n_c = ResizeImage;\nexport default ResizeImage; // Resizer.imageFileResizer(\n//     file, // Is the file of the image which will resized.\n//     maxWidth, // Is the maxWidth of the resized new image.\n//     maxHeight, // Is the maxHeight of the resized new image.\n//     compressFormat, // Is the compressFormat of the resized new image.\n//     quality, // Is the quality of the resized new image.\n//     rotation, // Is the degree of clockwise rotation to apply to uploaded image. \n//     responseUriFunc,  // Is the callBack function of the resized new image URI.\n//     outputType,  // Is the output type of the resized new image.\n//     minWidth, // Is the minWidth of the resized new image.\n//     minHeight, // Is the minHeight of the resized new image.\n//     );\n\nvar _c;\n\n$RefreshReg$(_c, \"ResizeImage\");","map":{"version":3,"sources":["/home/fv/js/capstone2/dogfriends/frontend/src/features/dogfriends/components/ResizeImage.js"],"names":["resizeFile","file","w","h","Promise","resolve","image","Image","url","data_url","onload","document","getElementById","src","canvas","createElement","context","getContext","width","height","drawImage","toDataURL","console","log","ResizeImage","res"],"mappings":"AAAA;AAEA,MAAMA,UAAU,GAAG,CAACC,IAAD,EAAOC,CAAP,EAAUC,CAAV,KAAgB,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AACxD;AACA,MAAIC,KAAK,GAAG,IAAIC,KAAJ,EAAZ;AACAD,EAAAA,KAAK,CAACE,GAAN,GAAYP,IAAI,CAAC,CAAD,CAAJ,CAAQQ,QAApB;;AAEAH,EAAAA,KAAK,CAACI,MAAN,GAAa,YAAU;AACnBC,IAAAA,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCC,GAAxC,GAA4CP,KAAK,CAACO,GAAlD;AACA,QAAIC,MAAM,GAACH,QAAQ,CAACI,aAAT,CAAuB,QAAvB,CAAX;AACA,QAAIC,OAAO,GAACF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAZ;AACAH,IAAAA,MAAM,CAACI,KAAP,GAAaZ,KAAK,CAACY,KAAN,GAAY,CAAzB;AACAJ,IAAAA,MAAM,CAACK,MAAP,GAAcb,KAAK,CAACa,MAAN,GAAa,CAA3B;AACAH,IAAAA,OAAO,CAACI,SAAR,CAAkBd,KAAlB,EACI,CADJ,EAEI,CAFJ,EAGIA,KAAK,CAACY,KAHV,EAIIZ,KAAK,CAACa,MAJV,EAKI,CALJ,EAMI,CANJ,EAOIL,MAAM,CAACI,KAPX,EAQIJ,MAAM,CAACK,MARX;AAWAb,IAAAA,KAAK,CAACO,GAAN,GAAYC,MAAM,CAACO,SAAP,EAAZ;AACH,GAlBD;;AAmBAC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAA+BjB,KAA/B;AACA,SAAOA,KAAP;AACD,CA1BkC,CAAnC;;AA4BA,MAAMkB,WAAW,GAAG,OAAOvB,IAAP,EAAaiB,KAAb,EAAoBC,MAApB,KAA+B;AACjD,QAAMM,GAAG,GAAG,MAAMzB,UAAU,CAACC,IAAD,EAAOiB,KAAP,EAAcC,MAAd,CAA5B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBE,GAAlB;AACA,SAAOA,GAAP;AACD,CAJD;;KAAMD,W;AAMN,eAAeA,WAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import Resizer from 'react-image-file-resizer';\n\nconst resizeFile = (file, w, h) => new Promise(resolve => {\n  // const fr = new FileReader();\n  var image = new Image();\n  image.url = file[0].data_url;\n\n  image.onload=function(){\n      document.getElementById(\"original-Img\").src=image.src;\n      var canvas=document.createElement(\"canvas\");\n      var context=canvas.getContext(\"2d\");\n      canvas.width=image.width/4;\n      canvas.height=image.height/4;\n      context.drawImage(image,\n          0,\n          0,\n          image.width,\n          image.height,\n          0,\n          0,\n          canvas.width,\n          canvas.height\n      );\n      \n      image.src = canvas.toDataURL();\n  }\n  console.log('resizeFile image',image)\n  return image\n});\n\nconst ResizeImage = async (file, width, height) => {\n  const res = await resizeFile(file, width, height);\n  console.log('res',res)\n  return res\n}\n\nexport default ResizeImage\n// Resizer.imageFileResizer(\n//     file, // Is the file of the image which will resized.\n//     maxWidth, // Is the maxWidth of the resized new image.\n//     maxHeight, // Is the maxHeight of the resized new image.\n//     compressFormat, // Is the compressFormat of the resized new image.\n//     quality, // Is the quality of the resized new image.\n//     rotation, // Is the degree of clockwise rotation to apply to uploaded image. \n//     responseUriFunc,  // Is the callBack function of the resized new image URI.\n//     outputType,  // Is the output type of the resized new image.\n//     minWidth, // Is the minWidth of the resized new image.\n//     minHeight, // Is the minHeight of the resized new image.\n//     );"]},"metadata":{},"sourceType":"module"}