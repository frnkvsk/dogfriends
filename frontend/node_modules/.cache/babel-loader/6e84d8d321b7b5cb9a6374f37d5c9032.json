{"ast":null,"code":"import Resizer from 'react-image-file-resizer';\n\nconst resizeFile = (file, w, h) => new Promise(resolve => {\n  Resizer.imageFileResizer(file, w, h, 'JPEG', 100, 0, uri => {\n    resolve(uri);\n  }, 'base64');\n});\n\nconst ResizeImage = async (file, width, height) => {\n  return await resizeFile(file, width, height);\n};\n\n_c = ResizeImage;\nexport default ResizeImage; // Resizer.imageFileResizer(\n//     file, // Is the file of the image which will resized.\n//     maxWidth, // Is the maxWidth of the resized new image.\n//     maxHeight, // Is the maxHeight of the resized new image.\n//     compressFormat, // Is the compressFormat of the resized new image.\n//     quality, // Is the quality of the resized new image.\n//     rotation, // Is the degree of clockwise rotation to apply to uploaded image. \n//     responseUriFunc,  // Is the callBack function of the resized new image URI.\n//     outputType,  // Is the output type of the resized new image.\n//     minWidth, // Is the minWidth of the resized new image.\n//     minHeight, // Is the minHeight of the resized new image.\n//     );\n\nvar _c;\n\n$RefreshReg$(_c, \"ResizeImage\");","map":{"version":3,"sources":["/home/fv/js/capstone2/dogfriends/frontend/src/features/dogfriends/components/ResizeImage.js"],"names":["Resizer","resizeFile","file","w","h","Promise","resolve","imageFileResizer","uri","ResizeImage","width","height"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,0BAApB;;AAEA,MAAMC,UAAU,GAAG,CAACC,IAAD,EAAOC,CAAP,EAAUC,CAAV,KAAgB,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AACxDN,EAAAA,OAAO,CAACO,gBAAR,CAAyBL,IAAzB,EAA+BC,CAA/B,EAAkCC,CAAlC,EAAqC,MAArC,EAA6C,GAA7C,EAAkD,CAAlD,EACAI,GAAG,IAAI;AACLF,IAAAA,OAAO,CAACE,GAAD,CAAP;AACD,GAHD,EAIA,QAJA;AAMD,CAPkC,CAAnC;;AASA,MAAMC,WAAW,GAAG,OAAOP,IAAP,EAAaQ,KAAb,EAAoBC,MAApB,KAA+B;AACjD,SAAO,MAAMV,UAAU,CAACC,IAAD,EAAOQ,KAAP,EAAcC,MAAd,CAAvB;AACD,CAFD;;KAAMF,W;AAIN,eAAeA,WAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import Resizer from 'react-image-file-resizer';\n\nconst resizeFile = (file, w, h) => new Promise(resolve => {\n  Resizer.imageFileResizer(file, w, h, 'JPEG', 100, 0,\n  uri => {\n    resolve(uri);\n  },\n  'base64'\n  );\n});\n\nconst ResizeImage = async (file, width, height) => {\n  return await resizeFile(file, width, height);\n}\n\nexport default ResizeImage\n// Resizer.imageFileResizer(\n//     file, // Is the file of the image which will resized.\n//     maxWidth, // Is the maxWidth of the resized new image.\n//     maxHeight, // Is the maxHeight of the resized new image.\n//     compressFormat, // Is the compressFormat of the resized new image.\n//     quality, // Is the quality of the resized new image.\n//     rotation, // Is the degree of clockwise rotation to apply to uploaded image. \n//     responseUriFunc,  // Is the callBack function of the resized new image URI.\n//     outputType,  // Is the output type of the resized new image.\n//     minWidth, // Is the minWidth of the resized new image.\n//     minHeight, // Is the minHeight of the resized new image.\n//     );"]},"metadata":{},"sourceType":"module"}