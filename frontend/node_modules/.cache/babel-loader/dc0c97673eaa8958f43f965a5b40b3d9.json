{"ast":null,"code":"// import Resizer from 'react-image-file-resizer';\nconst resizeFile = (file, w, h) => new Promise(resolve => {\n  // const fr = new FileReader();\n  let img = new Image();\n  img.src = Buffer.from(file[0].data_url); //file[0].data_url;\n\n  let canvas = document.createElement(\"canvas\");\n  let context = canvas.getContext(\"2d\");\n  canvas.width = img.width / 4;\n  canvas.height = img.height / 4;\n  context.drawImage(img, 0, 0, img.width, img.height, 0, 0, canvas.width, canvas.height); // console.log('fr',fr)\n\n  console.log('ResizeImage file', Buffer.from(file[0].data_url));\n  console.log('ResizeImage img', img);\n  console.log('ResizeImage canvas', canvas);\n  return canvas.toDataURL(); // Resizer.imageFileResizer([img], w, h, 'JPEG', 100, 0,\n  // uri => {\n  //   resolve(uri);\n  // },\n  // 'base64'\n  // );\n});\n\nconst ResizeImage = async (file, width, height) => {\n  const res = await resizeFile(file, width, height);\n  console.log('res', res);\n  return res;\n};\n\n_c = ResizeImage;\nexport default ResizeImage; // Resizer.imageFileResizer(\n//     file, // Is the file of the image which will resized.\n//     maxWidth, // Is the maxWidth of the resized new image.\n//     maxHeight, // Is the maxHeight of the resized new image.\n//     compressFormat, // Is the compressFormat of the resized new image.\n//     quality, // Is the quality of the resized new image.\n//     rotation, // Is the degree of clockwise rotation to apply to uploaded image. \n//     responseUriFunc,  // Is the callBack function of the resized new image URI.\n//     outputType,  // Is the output type of the resized new image.\n//     minWidth, // Is the minWidth of the resized new image.\n//     minHeight, // Is the minHeight of the resized new image.\n//     );\n\nvar _c;\n\n$RefreshReg$(_c, \"ResizeImage\");","map":{"version":3,"sources":["/home/fv/js/capstone2/dogfriends/frontend/src/features/dogfriends/components/ResizeImage.js"],"names":["resizeFile","file","w","h","Promise","resolve","img","Image","src","Buffer","from","data_url","canvas","document","createElement","context","getContext","width","height","drawImage","console","log","toDataURL","ResizeImage","res"],"mappings":"AAAA;AAEA,MAAMA,UAAU,GAAG,CAACC,IAAD,EAAOC,CAAP,EAAUC,CAAV,KAAgB,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AACxD;AACA,MAAIC,GAAG,GAAG,IAAIC,KAAJ,EAAV;AACAD,EAAAA,GAAG,CAACE,GAAJ,GAAUC,MAAM,CAACC,IAAP,CAAYT,IAAI,CAAC,CAAD,CAAJ,CAAQU,QAApB,CAAV,CAHwD,CAGjB;;AACvC,MAAIC,MAAM,GAACC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAX;AACA,MAAIC,OAAO,GAACH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AACAJ,EAAAA,MAAM,CAACK,KAAP,GAAaX,GAAG,CAACW,KAAJ,GAAU,CAAvB;AACAL,EAAAA,MAAM,CAACM,MAAP,GAAcZ,GAAG,CAACY,MAAJ,GAAW,CAAzB;AACAH,EAAAA,OAAO,CAACI,SAAR,CAAkBb,GAAlB,EACI,CADJ,EAEI,CAFJ,EAGIA,GAAG,CAACW,KAHR,EAIIX,GAAG,CAACY,MAJR,EAKI,CALJ,EAMI,CANJ,EAOIN,MAAM,CAACK,KAPX,EAQIL,MAAM,CAACM,MARX,EARwD,CAkBxD;;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAA+BZ,MAAM,CAACC,IAAP,CAAYT,IAAI,CAAC,CAAD,CAAJ,CAAQU,QAApB,CAA/B;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+Bf,GAA/B;AACAc,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAiCT,MAAjC;AACA,SAAOA,MAAM,CAACU,SAAP,EAAP,CAtBwD,CAuBxD;AACA;AACA;AACA;AACA;AACA;AACD,CA7BkC,CAAnC;;AA+BA,MAAMC,WAAW,GAAG,OAAOtB,IAAP,EAAagB,KAAb,EAAoBC,MAApB,KAA+B;AACjD,QAAMM,GAAG,GAAG,MAAMxB,UAAU,CAACC,IAAD,EAAOgB,KAAP,EAAcC,MAAd,CAA5B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBG,GAAlB;AACA,SAAOA,GAAP;AACD,CAJD;;KAAMD,W;AAMN,eAAeA,WAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import Resizer from 'react-image-file-resizer';\n\nconst resizeFile = (file, w, h) => new Promise(resolve => {\n  // const fr = new FileReader();\n  let img = new Image();\n  img.src = Buffer.from(file[0].data_url)//file[0].data_url;\n  let canvas=document.createElement(\"canvas\");\n  let context=canvas.getContext(\"2d\");\n  canvas.width=img.width/4;\n  canvas.height=img.height/4;\n  context.drawImage(img,\n      0,\n      0,\n      img.width,\n      img.height,\n      0,\n      0,\n      canvas.width,\n      canvas.height\n  );\n  // console.log('fr',fr)\n  console.log('ResizeImage file',Buffer.from(file[0].data_url))\n  console.log('ResizeImage img', img)\n  console.log('ResizeImage canvas',canvas)\n  return canvas.toDataURL();\n  // Resizer.imageFileResizer([img], w, h, 'JPEG', 100, 0,\n  // uri => {\n  //   resolve(uri);\n  // },\n  // 'base64'\n  // );\n});\n\nconst ResizeImage = async (file, width, height) => {\n  const res = await resizeFile(file, width, height);\n  console.log('res',res)\n  return res\n}\n\nexport default ResizeImage\n// Resizer.imageFileResizer(\n//     file, // Is the file of the image which will resized.\n//     maxWidth, // Is the maxWidth of the resized new image.\n//     maxHeight, // Is the maxHeight of the resized new image.\n//     compressFormat, // Is the compressFormat of the resized new image.\n//     quality, // Is the quality of the resized new image.\n//     rotation, // Is the degree of clockwise rotation to apply to uploaded image. \n//     responseUriFunc,  // Is the callBack function of the resized new image URI.\n//     outputType,  // Is the output type of the resized new image.\n//     minWidth, // Is the minWidth of the resized new image.\n//     minHeight, // Is the minHeight of the resized new image.\n//     );"]},"metadata":{},"sourceType":"module"}