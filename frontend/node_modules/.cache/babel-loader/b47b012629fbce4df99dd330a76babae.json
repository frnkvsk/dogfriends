{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = 'http://localhost:5000/api/';\n\nconst request = async (endpoint, paramsOrData = {}, verb = \"get\") => {\n  console.debug(\"API Call:\", endpoint, paramsOrData, verb);\n\n  try {\n    const res = await axios({\n      method: verb,\n      url: `${BASE_URL}${endpoint}`,\n      [verb === \"get\" ? \"params\" : \"data\"]: paramsOrData\n    }); // console.log(\"API Call2:\", endpoint, res, verb);\n\n    return res; // axios sends query string data via the \"params\" key,\n    // and request body data via the \"data\" key,\n    // so the key we need depends on the HTTP verb\n  } catch (err) {\n    let message = err.response ? err.response.data.message : err;\n    throw Array.isArray(message) ? message : [message];\n  }\n}; // posts\n\n\nconst getPosts = async () => {\n  let res = await request('posts');\n  return res;\n};\n\nconst getPostById = async id => {\n  return await request(`posts/${id}`);\n};\n\nconst postPostVote = async (id, direction, token) => {\n  return await request(`posts/${id}/vote/${direction}`, {\n    _token: token\n  }, 'post');\n};\n\nconst postPostNew = async (title, parent_id, photo_id, body, token) => {\n  const data = {\n    title: title,\n    parent_id: parent_id,\n    photo_id: photo_id,\n    body: body,\n    _token: token\n  };\n  return await request('posts/', data, 'post');\n};\n\nconst putPostUpdate = async (id, title, body, username, token) => {\n  const data = {\n    title: title,\n    body: body,\n    username: username,\n    _token: token\n  };\n  return await request(`posts/${id}`, data, 'put');\n};\n\nconst deletePost = async (id, username, token) => {\n  const data = {\n    id: id,\n    username: username,\n    _token: token\n  };\n  return await request(`posts/${id}`, data, 'delete');\n}; // login / signup\n\n\nconst login = async (username, password) => {\n  try {\n    return await request('login/', {\n      username: username,\n      password: password\n    }, 'post');\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst signup = async ({\n  username,\n  password,\n  first_name,\n  last_name,\n  email,\n  photo_url,\n  city,\n  state,\n  country\n}) => {\n  try {\n    const res = await request('users/', {\n      username: username,\n      password: password,\n      first_name: first_name,\n      last_name: last_name,\n      email: email,\n      photo_id: null,\n      admin: false,\n      city: city,\n      state: state,\n      country: country\n    }, 'post'); // if a photo_url is provided during registration\n    //  1. add a new photo to the photos table\n    //  2. patch user table to show photo_id of the new photo\n\n    if (photo_url.length) {\n      const photoInfo = await postPhotoNew(res.data.token, photo_url, username);\n      const data = {\n        username: username,\n        password: password,\n        first_name: first_name,\n        last_name: last_name,\n        email: email,\n        photo_id: photoInfo.data.id,\n        city: city,\n        state: state,\n        country: country,\n        _token: res.data.token\n      };\n      await request(`users/${username}`, data, 'patch');\n    }\n\n    return res;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst getUserInfo = async payload => {\n  const {\n    username,\n    token\n  } = payload;\n  let photo_url = null;\n\n  try {\n    const res = await request(`users/${username}/`, {\n      _token: token\n    });\n\n    if (res.data.user.photo_id) {\n      photo_url = await request(`photos/${res.data.user.photo_id}`);\n    }\n\n    res.data.user.photo_url = photo_url.url;\n    return res;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst patchUserInfo = async (token, userInfo) => {\n  userInfo._token = token;\n  let photo_id = null;\n\n  if (userInfo.photo_url) {\n    photo_id = await postPhotoNew(token, userInfo.photo_url, userInfo.username);\n  }\n\n  delete userInfo.photo_url;\n  userInfo.photo_id = photo_id.data.id;\n\n  try {\n    return await request(`users/${userInfo.username}`, userInfo, 'patch');\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst postPhotoNew = async (token, photo_url, username) => {\n  const data = {\n    _token: token,\n    url: photo_url,\n    username: username\n  };\n  return await request('photos', data, 'post');\n};\n\nexport { getPosts, getPostById, postPostVote, postPostNew, putPostUpdate, deletePost, login, signup, getUserInfo, patchUserInfo };","map":{"version":3,"sources":["/home/fv/js/capstone2/dogfriends/frontend/src/features/dogfriends/api/DogfriendsApi.js"],"names":["axios","BASE_URL","request","endpoint","paramsOrData","verb","console","debug","res","method","url","err","message","response","data","Array","isArray","getPosts","getPostById","id","postPostVote","direction","token","_token","postPostNew","title","parent_id","photo_id","body","putPostUpdate","username","deletePost","login","password","error","signup","first_name","last_name","email","photo_url","city","state","country","admin","length","photoInfo","postPhotoNew","getUserInfo","payload","user","patchUserInfo","userInfo"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\n\nconst BASE_URL = 'http://localhost:5000/api/';\n\nconst request = async (endpoint, paramsOrData = {}, verb = \"get\") => {  \n  \n  console.debug(\"API Call:\", endpoint, paramsOrData, verb);\n  try {\n    const res = await axios({\n      method: verb,\n      url: `${BASE_URL}${endpoint}`,\n      [verb === \"get\" ? \"params\" : \"data\"]: paramsOrData});\n    \n      // console.log(\"API Call2:\", endpoint, res, verb);\n    return res;\n      // axios sends query string data via the \"params\" key,\n      // and request body data via the \"data\" key,\n      // so the key we need depends on the HTTP verb\n  }catch(err) {\n    let message = err.response ? err.response.data.message : err;\n    throw Array.isArray(message) ? message : [message];\n  }\n}\n// posts\nconst getPosts = async () => {\n  let res = await request('posts');\n  return res;\n}\nconst getPostById = async (id) => {\n  return await request(`posts/${id}`);\n}\nconst postPostVote = async (id, direction, token) => {\n  return await request(`posts/${id}/vote/${direction}`, {_token: token}, 'post');\n}\nconst postPostNew = async (title, parent_id, photo_id, body, token) => {\n  const data = {\n    title: title,\n    parent_id: parent_id, \n    photo_id: photo_id, \n    body: body, \n    _token: token   \n  }\n  return await request('posts/', data, 'post');\n}\nconst putPostUpdate = async (id, title, body, username, token) => {\n  \n  const data = {\n    title: title,\n    body: body,  \n    username: username,\n    _token: token  \n  }\n  return await request(`posts/${id}`, data, 'put');\n}\nconst deletePost = async (id, username, token) => {\n  const data = {\n    id: id,\n    username: username,\n    _token: token  \n  }\n  return await request(`posts/${id}`, data, 'delete');\n}\n\n// login / signup\nconst login = async (username, password) => {\n  try {\n    return await request('login/', {username: username, password: password}, 'post');\n  } catch (error) {\n    console.error(error);\n  }   \n}\n\nconst signup = async ({username, \n                      password, \n                      first_name, \n                      last_name, \n                      email, \n                      photo_url, \n                      city, \n                      state, \n                      country}) => {\n                        \n  try {\n    const res = await request('users/', {\n      username: username, \n      password: password, \n      first_name: first_name, \n      last_name: last_name, \n      email: email,\n      photo_id: null,\n      admin: false, \n      city: city, \n      state: state, \n      country: country, \n      }, 'post');\n    \n    // if a photo_url is provided during registration\n    //  1. add a new photo to the photos table\n    //  2. patch user table to show photo_id of the new photo\n    if(photo_url.length) {\n      const photoInfo = await postPhotoNew(res.data.token, photo_url, username);\n      const data = {\n        username: username, \n        password: password, \n        first_name: first_name, \n        last_name: last_name, \n        email: email,\n        photo_id: photoInfo.data.id,\n        city: city, \n        state: state, \n        country: country,\n        _token: res.data.token\n      }\n\n      await request(`users/${username}`, data, 'patch');\n    }\n    return res;\n  } catch (error) {\n    console.error(error);\n  }   \n}\nconst getUserInfo = async (payload) => {\n  const {username, token} = payload;\n  let photo_url = null;\n  try {  \n    const res = await request(`users/${username}/`, {_token: token});\n    if(res.data.user.photo_id) {\n      photo_url = await request(`photos/${res.data.user.photo_id}`);\n    }\n    res.data.user.photo_url = photo_url.url;\n    return res;\n  } catch (error) {\n    console.error(error);\n  }   \n}\nconst patchUserInfo = async (token, userInfo) => {\n  userInfo._token = token;\n  let photo_id = null;\n  if(userInfo.photo_url) {\n    photo_id = await postPhotoNew(token, userInfo.photo_url, userInfo.username);\n  }\n  delete userInfo.photo_url;\n  userInfo.photo_id = photo_id.data.id;\n  try {\n    return await request(`users/${userInfo.username}`, userInfo, 'patch');\n  } catch (error) {\n    console.error(error);\n  }   \n}\nconst postPhotoNew = async (token, photo_url, username) => {\n  const data = {\n    _token: token,\n    url: photo_url,\n    username: username\n  }\n  return await request('photos', data, 'post');\n}\n\nexport {\n  getPosts,\n  getPostById,\n  postPostVote,\n  postPostNew,\n  putPostUpdate,\n  deletePost,\n  login,\n  signup,\n  getUserInfo,\n  patchUserInfo,\n};"]},"metadata":{},"sourceType":"module"}