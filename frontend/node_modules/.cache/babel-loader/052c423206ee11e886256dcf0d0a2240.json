{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { login, getUserInfo } from './api/DogfriendsApi';\nexport const loginSlice = createAsyncThunk('login', async payload => {\n  // console.log('dogfriendsUserSlice payload',payload)\n  const response = await login(payload);\n  return response.data;\n});\nexport const getUserInfoData = createAsyncThunk('getUserInfo', async payload => {\n  // console.log('dogfriendsUserSlice payload',payload)\n  const response = await getUserInfo(payload);\n  return response.data;\n});\nexport const dogfriendsUserSlice = createSlice({\n  name: 'userList',\n  initialState: {\n    userList: {\n      status: 'idle',\n      data: {},\n      error: {}\n    }\n  },\n  reducers: {\n    logout: (state, action) => {\n      state.userList = action.payload;\n    }\n  },\n  extraReducers: {\n    // login\n    [login.pending]: (state, action) => {\n      state.userList = {\n        status: 'pending',\n        data: {},\n        error: {}\n      };\n    },\n    [login.fulfilled]: (state, action) => {\n      state.userList = {\n        status: 'fulfilled',\n        data: action.payload,\n        error: {}\n      };\n    },\n    [login.rejected]: (state, action) => {\n      state.userList = {\n        status: 'rejected',\n        data: {},\n        error: action.payload\n      };\n    },\n    // get user info\n    [getUserInfoData.pending]: (state, action) => {\n      state.userList = {\n        status: 'pending',\n        data: {},\n        error: {}\n      };\n    },\n    [getUserInfoData.fulfilled]: (state, action) => {\n      state.userList = {\n        status: 'fulfilled',\n        data: action.payload,\n        error: {}\n      };\n    },\n    [getUserInfoData.rejected]: (state, action) => {\n      state.userList = {\n        status: 'rejected',\n        data: {},\n        error: action.payload\n      };\n    }\n  }\n});\nexport const {\n  logout\n} = dogfriendsUserSlice.actions;\nexport const selectUser = state => state.userList.userList;\nexport default dogfriendsUserSlice.reducer;","map":{"version":3,"sources":["/home/fv/js/capstone2/dogfriends/frontend/src/features/dogfriends/dogfriendsUserSlice.js"],"names":["createAsyncThunk","createSlice","login","getUserInfo","loginSlice","payload","response","data","getUserInfoData","dogfriendsUserSlice","name","initialState","userList","status","error","reducers","logout","state","action","extraReducers","pending","fulfilled","rejected","actions","selectUser","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport {\n  login,\n  getUserInfo\n} from './api/DogfriendsApi';\n\n\nexport const loginSlice = createAsyncThunk(\n  'login',\n  async (payload) => {\n    // console.log('dogfriendsUserSlice payload',payload)\n    const response = await login(payload);\n    return response.data;\n  }\n);\n\nexport const getUserInfoData = createAsyncThunk(\n  'getUserInfo',\n  async (payload) => {\n    // console.log('dogfriendsUserSlice payload',payload)\n    const response = await getUserInfo(payload);\n    return response.data;\n  }\n);\n\nexport const dogfriendsUserSlice = createSlice({\n  name: 'userList',\n  initialState: {\n    userList: {\n      status: 'idle',\n      data: {},\n      error: {}\n    }\n  },\n  reducers: {\n    logout: (state, action) => {\n      state.userList = action.payload;\n    }\n  },\n  extraReducers: {\n    // login\n    [login.pending]: (state, action) => {\n      state.userList = {\n        status: 'pending',\n        data: {},\n        error: {}\n      };\n    },\n    [login.fulfilled]: (state, action) => {\n      state.userList = {\n        status: 'fulfilled',\n        data: action.payload,\n        error: {}\n      };\n    },\n    [login.rejected]: (state, action) => {\n      state.userList = {\n        status: 'rejected',\n        data: {},\n        error: action.payload,\n      };\n    }, \n    // get user info\n    [getUserInfoData.pending]: (state, action) => {\n      state.userList = {\n        status: 'pending',\n        data: {},\n        error: {}\n      };\n    },\n    [getUserInfoData.fulfilled]: (state, action) => {\n      state.userList = {\n        status: 'fulfilled',\n        data: action.payload,\n        error: {}\n      };\n    },\n    [getUserInfoData.rejected]: (state, action) => {\n      state.userList = {\n        status: 'rejected',\n        data: {},\n        error: action.payload,\n      };\n    }, \n  }\n});\n\nexport const {\n  logout,\n} = dogfriendsUserSlice.actions;\n\nexport const selectUser = state => state.userList.userList;\n\nexport default dogfriendsUserSlice.reducer;"]},"metadata":{},"sourceType":"module"}