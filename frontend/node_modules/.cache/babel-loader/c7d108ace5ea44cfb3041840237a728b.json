{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { login, getUserInfo, patchUserInfo, preSignupUsernameCheck, signup } from './api/DogfriendsApi';\nexport const loginSlice = createAsyncThunk('login', async payload => {\n  // console.log('dogfriendsUserSlice payload',payload)\n  const response = await login({\n    username: payload.username,\n    password: payload.password\n  });\n  return response.data;\n});\nexport const preSignupSlice = createAsyncThunk('preSignup', async payload => {\n  try {\n    // console.log('preSignupSlice payload',payload)\n    const response = await preSignupUsernameCheck({\n      username: payload.username\n    }); // console.log('--preSignupSlice response',response)\n\n    return response;\n  } catch (error) {\n    console.error('dogfriendsUserSlice preSignupSlice error', error);\n  }\n});\nexport const signUpSlice = createAsyncThunk('signup', async payload => {\n  // console.log('dogfriendsUserSlice payload',payload)\n  const response = await signup({\n    username: payload.username,\n    password: payload.password,\n    first_name: payload.first_name,\n    last_name: payload.last_name,\n    email: payload.email,\n    photo_id: payload.photo_id,\n    city: payload.city,\n    state: payload.state,\n    country: payload.country\n  });\n  return response.data;\n});\nexport const getUserInfoSlice = createAsyncThunk('getUserInfo', async payload => {\n  // console.log('dogfriendsUserSlice getUserInfoSlice payload',payload)\n  const response = await getUserInfo(payload); // console.log('dogfriendsUserSlice getUserInfoSlice response',response)\n\n  return response.data;\n});\nexport const updateUserInfoSlice = createAsyncThunk('patchUserInfo', async payload => {\n  // console.log('updateUserInfoSlice payload',payload)\n  const response = await patchUserInfo(payload);\n  return response.data;\n});\nexport const dogfriendsUserSlice = createSlice({\n  name: 'userList',\n  initialState: {\n    userList: {\n      status: 'idle',\n      data: {},\n      error: {}\n    }\n  },\n  reducers: {\n    logout: (state, action) => {\n      state.userList = action.payload;\n    },\n    setUserList: (state, action) => {\n      state.userList = action.payload;\n    }\n  },\n  extraReducers: {\n    // login\n    [login.pending]: (state, action) => {\n      state.userList = {\n        status: 'pending',\n        data: {},\n        error: {}\n      };\n    },\n    [login.fulfilled]: (state, action) => {\n      state.userList = {\n        status: 'fulfilled',\n        data: action.payload,\n        error: {}\n      };\n    },\n    [login.rejected]: (state, action) => {\n      state.userList = {\n        status: 'rejected',\n        data: {},\n        error: action.payload\n      };\n    },\n    // signup\n    [signup.pending]: (state, action) => {\n      state.userList = {\n        status: 'pending',\n        data: {},\n        error: {}\n      };\n    },\n    [signup.fulfilled]: (state, action) => {\n      state.userList = {\n        status: 'fulfilled',\n        data: action.payload,\n        error: {}\n      };\n    },\n    [signup.rejected]: (state, action) => {\n      state.userList = {\n        status: 'rejected',\n        data: {},\n        error: action.payload\n      };\n    },\n    // get user info\n    [getUserInfoSlice.pending]: (state, action) => {\n      state.userList = {\n        status: 'pending',\n        data: {},\n        error: {}\n      };\n    },\n    [getUserInfoSlice.fulfilled]: (state, action) => {\n      state.userList = {\n        status: 'fulfilled',\n        data: action.payload,\n        error: {}\n      };\n    },\n    [getUserInfoSlice.rejected]: (state, action) => {\n      state.userList = {\n        status: 'rejected',\n        data: {},\n        error: action.payload\n      };\n    },\n    // patch/update user info\n    [updateUserInfoSlice.pending]: (state, action) => {\n      state.userList = {\n        status: 'pending',\n        data: {},\n        error: {}\n      };\n    },\n    [updateUserInfoSlice.fulfilled]: (state, action) => {\n      state.userList = {\n        status: 'fulfilled',\n        data: action.payload,\n        error: {}\n      };\n    },\n    [updateUserInfoSlice.rejected]: (state, action) => {\n      state.userList = {\n        status: 'rejected',\n        data: {},\n        error: action.payload\n      };\n    }\n  }\n});\nexport const {\n  logout,\n  setUserList\n} = dogfriendsUserSlice.actions;\nexport const selectUser = state => state.userList.userList;\nexport default dogfriendsUserSlice.reducer;","map":{"version":3,"sources":["/home/fv/js/capstone2/dogfriends/frontend/src/features/dogfriends/dogfriendsUserSlice.js"],"names":["createAsyncThunk","createSlice","login","getUserInfo","patchUserInfo","preSignupUsernameCheck","signup","loginSlice","payload","response","username","password","data","preSignupSlice","error","console","signUpSlice","first_name","last_name","email","photo_id","city","state","country","getUserInfoSlice","updateUserInfoSlice","dogfriendsUserSlice","name","initialState","userList","status","reducers","logout","action","setUserList","extraReducers","pending","fulfilled","rejected","actions","selectUser","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport {\n  login,\n  getUserInfo,\n  patchUserInfo,\n  preSignupUsernameCheck,\n  signup,\n} from './api/DogfriendsApi';\n\n\nexport const loginSlice = createAsyncThunk(\n  'login',\n  async (payload) => {\n    // console.log('dogfriendsUserSlice payload',payload)\n    const response = await login({\n      username: payload.username,\n      password: payload.password\n    });\n    return response.data;\n  }\n);\n\nexport const preSignupSlice = createAsyncThunk(\n  'preSignup',\n  async (payload) => {\n    try {\n      // console.log('preSignupSlice payload',payload)\n      const response = await preSignupUsernameCheck({\n        username: payload.username\n      });\n      // console.log('--preSignupSlice response',response)\n      return response;\n    } catch (error) {\n      console.error('dogfriendsUserSlice preSignupSlice error',error)\n    }\n    \n  }\n);\n\nexport const signUpSlice = createAsyncThunk(\n  'signup',\n  async (payload) => {\n    // console.log('dogfriendsUserSlice payload',payload)\n    const response = await signup({\n      username: payload.username, \n      password: payload.password, \n      first_name: payload.first_name, \n      last_name: payload.last_name, \n      email: payload.email, \n      photo_id: payload.photo_id, \n      city: payload.city, \n      state: payload.state, \n      country: payload.country\n    });\n    return response.data;\n  }\n);\n\nexport const getUserInfoSlice = createAsyncThunk(\n  'getUserInfo',\n  async (payload) => {\n    // console.log('dogfriendsUserSlice getUserInfoSlice payload',payload)\n    const response = await getUserInfo(payload);\n    // console.log('dogfriendsUserSlice getUserInfoSlice response',response)\n    return response.data;\n  }\n);\n\nexport const updateUserInfoSlice = createAsyncThunk(\n  'patchUserInfo',\n  async (payload) => {\n    // console.log('updateUserInfoSlice payload',payload)\n    const response = await patchUserInfo(payload);\n    return response.data;\n  }\n);\n\nexport const dogfriendsUserSlice = createSlice({\n  name: 'userList',\n  initialState: {\n    userList: {\n      status: 'idle',\n      data: {},\n      error: {}\n    }\n  },\n  reducers: {\n    logout: (state, action) => {\n      state.userList = action.payload;\n    },\n    setUserList: (state, action) => {\n      state.userList = action.payload;\n    },\n  },\n  extraReducers: {\n    // login\n    [login.pending]: (state, action) => {\n      state.userList = {\n        status: 'pending',\n        data: {},\n        error: {}\n      };\n    },\n    [login.fulfilled]: (state, action) => {\n      state.userList = {\n        status: 'fulfilled',\n        data: action.payload,\n        error: {}\n      };\n    },\n    [login.rejected]: (state, action) => {\n      state.userList = {\n        status: 'rejected',\n        data: {},\n        error: action.payload,\n      };\n    }, \n    // signup\n    [signup.pending]: (state, action) => {\n      state.userList = {\n        status: 'pending',\n        data: {},\n        error: {}\n      };\n    },\n    [signup.fulfilled]: (state, action) => {\n      state.userList = {\n        status: 'fulfilled',\n        data: action.payload,\n        error: {}\n      };\n    },\n    [signup.rejected]: (state, action) => {\n      state.userList = {\n        status: 'rejected',\n        data: {},\n        error: action.payload,\n      };\n    }, \n    // get user info\n    [getUserInfoSlice.pending]: (state, action) => {\n      state.userList = {\n        status: 'pending',\n        data: {},\n        error: {}\n      };\n    },\n    [getUserInfoSlice.fulfilled]: (state, action) => {\n      state.userList = {\n        status: 'fulfilled',\n        data: action.payload,\n        error: {}\n      };\n    },\n    [getUserInfoSlice.rejected]: (state, action) => {\n      state.userList = {\n        status: 'rejected',\n        data: {},\n        error: action.payload,\n      };\n    }, \n    // patch/update user info\n    [updateUserInfoSlice.pending]: (state, action) => {\n      state.userList = {\n        status: 'pending',\n        data: {},\n        error: {}\n      };\n    },\n    [updateUserInfoSlice.fulfilled]: (state, action) => {\n      state.userList = {\n        status: 'fulfilled',\n        data: action.payload,\n        error: {}\n      };\n    },\n    [updateUserInfoSlice.rejected]: (state, action) => {\n      state.userList = {\n        status: 'rejected',\n        data: {},\n        error: action.payload,\n      };\n    }, \n  }\n});\n\nexport const {\n  logout,\n  setUserList\n} = dogfriendsUserSlice.actions;\n\nexport const selectUser = state => state.userList.userList;\n\nexport default dogfriendsUserSlice.reducer;"]},"metadata":{},"sourceType":"module"}