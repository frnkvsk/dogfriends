{"ast":null,"code":"'use strict';\n\nconst {\n  flatten: flattenArray\n} = require('array-flatten');\n\nconst color = require('color');\n\nconst is = require('./is');\n/**\n * Rotate the output image by either an explicit angle\n * or auto-orient based on the EXIF `Orientation` tag.\n *\n * If an angle is provided, it is converted to a valid positive degree rotation.\n * For example, `-450` will produce a 270deg rotation.\n *\n * When rotating by an angle other than a multiple of 90,\n * the background colour can be provided with the `background` option.\n *\n * If no angle is provided, it is determined from the EXIF data.\n * Mirroring is supported and may infer the use of a flip operation.\n *\n * The use of `rotate` implies the removal of the EXIF `Orientation` tag, if any.\n *\n * Method order is important when both rotating and extracting regions,\n * for example `rotate(x).extract(y)` will produce a different result to `extract(y).rotate(x)`.\n *\n * @example\n * const pipeline = sharp()\n *   .rotate()\n *   .resize(null, 200)\n *   .toBuffer(function (err, outputBuffer, info) {\n *     // outputBuffer contains 200px high JPEG image data,\n *     // auto-rotated using EXIF Orientation tag\n *     // info.width and info.height contain the dimensions of the resized image\n *   });\n * readableStream.pipe(pipeline);\n *\n * @param {number} [angle=auto] angle of rotation.\n * @param {Object} [options] - if present, is an Object with optional attributes.\n * @param {string|Object} [options.background=\"#000000\"] parsed by the [color](https://www.npmjs.org/package/color) module to extract values for red, green, blue and alpha.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction rotate(angle, options) {\n  if (!is.defined(angle)) {\n    this.options.useExifOrientation = true;\n  } else if (is.integer(angle) && !(angle % 90)) {\n    this.options.angle = angle;\n  } else if (is.number(angle)) {\n    this.options.rotationAngle = angle;\n\n    if (is.object(options) && options.background) {\n      const backgroundColour = color(options.background);\n      this.options.rotationBackground = [backgroundColour.red(), backgroundColour.green(), backgroundColour.blue(), Math.round(backgroundColour.alpha() * 255)];\n    }\n  } else {\n    throw is.invalidParameterError('angle', 'numeric', angle);\n  }\n\n  return this;\n}\n/**\n * Flip the image about the vertical Y axis. This always occurs after rotation, if any.\n * The use of `flip` implies the removal of the EXIF `Orientation` tag, if any.\n * @param {Boolean} [flip=true]\n * @returns {Sharp}\n */\n\n\nfunction flip(flip) {\n  this.options.flip = is.bool(flip) ? flip : true;\n  return this;\n}\n/**\n * Flop the image about the horizontal X axis. This always occurs after rotation, if any.\n * The use of `flop` implies the removal of the EXIF `Orientation` tag, if any.\n * @param {Boolean} [flop=true]\n * @returns {Sharp}\n */\n\n\nfunction flop(flop) {\n  this.options.flop = is.bool(flop) ? flop : true;\n  return this;\n}\n/**\n * Perform an affine transform on an image. This operation will always occur after resizing, extraction and rotation, if any.\n *\n * You must provide an array of length 4 or a 2x2 affine transformation matrix.\n * By default, new pixels are filled with a black background. You can provide a background color with the `background` option.\n * A particular interpolator may also be specified. Set the `interpolator` option to an attribute of the `sharp.interpolator` Object e.g. `sharp.interpolator.nohalo`.\n *\n * In the case of a 2x2 matrix, the transform is:\n * - X = `matrix[0, 0]` \\* (x + `idx`) + `matrix[0, 1]` \\* (y + `idy`) + `odx`\n * - Y = `matrix[1, 0]` \\* (x + `idx`) + `matrix[1, 1]` \\* (y + `idy`) + `ody`\n *\n * where:\n * - x and y are the coordinates in input image.\n * - X and Y are the coordinates in output image.\n * - (0,0) is the upper left corner.\n *\n * @since 0.27.0\n *\n * @example\n * const pipeline = sharp()\n *   .affine([[1, 0.3], [0.1, 0.7]], {\n *      background: 'white',\n *      interpolate: sharp.interpolators.nohalo\n *   })\n *   .toBuffer((err, outputBuffer, info) => {\n *      // outputBuffer contains the transformed image\n *      // info.width and info.height contain the new dimensions\n *   });\n *\n * inputStream\n *   .pipe(pipeline);\n *\n * @param {Array<Array<number>>|Array<number>} matrix - affine transformation matrix\n * @param {Object} [options] - if present, is an Object with optional attributes.\n * @param {String|Object} [options.background=\"#000000\"] - parsed by the [color](https://www.npmjs.org/package/color) module to extract values for red, green, blue and alpha.\n * @param {Number} [options.idx=0] - input horizontal offset\n * @param {Number} [options.idy=0] - input vertical offset\n * @param {Number} [options.odx=0] - output horizontal offset\n * @param {Number} [options.ody=0] - output vertical offset\n * @param {String} [options.interpolator=sharp.interpolators.bicubic] - interpolator\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction affine(matrix, options) {\n  const flatMatrix = flattenArray(matrix);\n\n  if (flatMatrix.length === 4 && flatMatrix.every(is.number)) {\n    this.options.affineMatrix = flatMatrix;\n  } else {\n    throw is.invalidParameterError('matrix', '1x4 or 2x2 array', matrix);\n  }\n\n  if (is.defined(options)) {\n    if (is.object(options)) {\n      this._setBackgroundColourOption('affineBackground', options.background);\n\n      if (is.defined(options.idx)) {\n        if (is.number(options.idx)) {\n          this.options.affineIdx = options.idx;\n        } else {\n          throw is.invalidParameterError('options.idx', 'number', options.idx);\n        }\n      }\n\n      if (is.defined(options.idy)) {\n        if (is.number(options.idy)) {\n          this.options.affineIdy = options.idy;\n        } else {\n          throw is.invalidParameterError('options.idy', 'number', options.idy);\n        }\n      }\n\n      if (is.defined(options.odx)) {\n        if (is.number(options.odx)) {\n          this.options.affineOdx = options.odx;\n        } else {\n          throw is.invalidParameterError('options.odx', 'number', options.odx);\n        }\n      }\n\n      if (is.defined(options.ody)) {\n        if (is.number(options.ody)) {\n          this.options.affineOdy = options.ody;\n        } else {\n          throw is.invalidParameterError('options.ody', 'number', options.ody);\n        }\n      }\n\n      if (is.defined(options.interpolator)) {\n        if (is.inArray(options.interpolator, Object.values(this.constructor.interpolators))) {\n          this.options.affineInterpolator = options.interpolator;\n        } else {\n          throw is.invalidParameterError('options.interpolator', 'valid interpolator name', options.interpolator);\n        }\n      }\n    } else {\n      throw is.invalidParameterError('options', 'object', options);\n    }\n  }\n\n  return this;\n}\n/**\n * Sharpen the image.\n * When used without parameters, performs a fast, mild sharpen of the output image.\n * When a `sigma` is provided, performs a slower, more accurate sharpen of the L channel in the LAB colour space.\n * Separate control over the level of sharpening in \"flat\" and \"jagged\" areas is available.\n *\n * @param {number} [sigma] - the sigma of the Gaussian mask, where `sigma = 1 + radius / 2`.\n * @param {number} [flat=1.0] - the level of sharpening to apply to \"flat\" areas.\n * @param {number} [jagged=2.0] - the level of sharpening to apply to \"jagged\" areas.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction sharpen(sigma, flat, jagged) {\n  if (!is.defined(sigma)) {\n    // No arguments: default to mild sharpen\n    this.options.sharpenSigma = -1;\n  } else if (is.bool(sigma)) {\n    // Boolean argument: apply mild sharpen?\n    this.options.sharpenSigma = sigma ? -1 : 0;\n  } else if (is.number(sigma) && is.inRange(sigma, 0.01, 10000)) {\n    // Numeric argument: specific sigma\n    this.options.sharpenSigma = sigma; // Control over flat areas\n\n    if (is.defined(flat)) {\n      if (is.number(flat) && is.inRange(flat, 0, 10000)) {\n        this.options.sharpenFlat = flat;\n      } else {\n        throw is.invalidParameterError('flat', 'number between 0 and 10000', flat);\n      }\n    } // Control over jagged areas\n\n\n    if (is.defined(jagged)) {\n      if (is.number(jagged) && is.inRange(jagged, 0, 10000)) {\n        this.options.sharpenJagged = jagged;\n      } else {\n        throw is.invalidParameterError('jagged', 'number between 0 and 10000', jagged);\n      }\n    }\n  } else {\n    throw is.invalidParameterError('sigma', 'number between 0.01 and 10000', sigma);\n  }\n\n  return this;\n}\n/**\n * Apply median filter.\n * When used without parameters the default window is 3x3.\n * @param {number} [size=3] square mask size: size x size\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction median(size) {\n  if (!is.defined(size)) {\n    // No arguments: default to 3x3\n    this.options.medianSize = 3;\n  } else if (is.integer(size) && is.inRange(size, 1, 1000)) {\n    // Numeric argument: specific sigma\n    this.options.medianSize = size;\n  } else {\n    throw is.invalidParameterError('size', 'integer between 1 and 1000', size);\n  }\n\n  return this;\n}\n/**\n * Blur the image.\n * When used without parameters, performs a fast, mild blur of the output image.\n * When a `sigma` is provided, performs a slower, more accurate Gaussian blur.\n * @param {number} [sigma] a value between 0.3 and 1000 representing the sigma of the Gaussian mask, where `sigma = 1 + radius / 2`.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction blur(sigma) {\n  if (!is.defined(sigma)) {\n    // No arguments: default to mild blur\n    this.options.blurSigma = -1;\n  } else if (is.bool(sigma)) {\n    // Boolean argument: apply mild blur?\n    this.options.blurSigma = sigma ? -1 : 0;\n  } else if (is.number(sigma) && is.inRange(sigma, 0.3, 1000)) {\n    // Numeric argument: specific sigma\n    this.options.blurSigma = sigma;\n  } else {\n    throw is.invalidParameterError('sigma', 'number between 0.3 and 1000', sigma);\n  }\n\n  return this;\n}\n/**\n * Merge alpha transparency channel, if any, with a background.\n * @param {Object} [options]\n * @param {string|Object} [options.background={r: 0, g: 0, b: 0}] - background colour, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to black.\n * @returns {Sharp}\n */\n\n\nfunction flatten(options) {\n  this.options.flatten = is.bool(options) ? options : true;\n\n  if (is.object(options)) {\n    this._setBackgroundColourOption('flattenBackground', options.background);\n  }\n\n  return this;\n}\n/**\n * Apply a gamma correction by reducing the encoding (darken) pre-resize at a factor of `1/gamma`\n * then increasing the encoding (brighten) post-resize at a factor of `gamma`.\n * This can improve the perceived brightness of a resized image in non-linear colour spaces.\n * JPEG and WebP input images will not take advantage of the shrink-on-load performance optimisation\n * when applying a gamma correction.\n *\n * Supply a second argument to use a different output gamma value, otherwise the first value is used in both cases.\n *\n * @param {number} [gamma=2.2] value between 1.0 and 3.0.\n * @param {number} [gammaOut] value between 1.0 and 3.0. (optional, defaults to same as `gamma`)\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction gamma(gamma, gammaOut) {\n  if (!is.defined(gamma)) {\n    // Default gamma correction of 2.2 (sRGB)\n    this.options.gamma = 2.2;\n  } else if (is.number(gamma) && is.inRange(gamma, 1, 3)) {\n    this.options.gamma = gamma;\n  } else {\n    throw is.invalidParameterError('gamma', 'number between 1.0 and 3.0', gamma);\n  }\n\n  if (!is.defined(gammaOut)) {\n    // Default gamma correction for output is same as input\n    this.options.gammaOut = this.options.gamma;\n  } else if (is.number(gammaOut) && is.inRange(gammaOut, 1, 3)) {\n    this.options.gammaOut = gammaOut;\n  } else {\n    throw is.invalidParameterError('gammaOut', 'number between 1.0 and 3.0', gammaOut);\n  }\n\n  return this;\n}\n/**\n * Produce the \"negative\" of the image.\n * @param {Boolean} [negate=true]\n * @returns {Sharp}\n */\n\n\nfunction negate(negate) {\n  this.options.negate = is.bool(negate) ? negate : true;\n  return this;\n}\n/**\n * Enhance output image contrast by stretching its luminance to cover the full dynamic range.\n * @param {Boolean} [normalise=true]\n * @returns {Sharp}\n */\n\n\nfunction normalise(normalise) {\n  this.options.normalise = is.bool(normalise) ? normalise : true;\n  return this;\n}\n/**\n * Alternative spelling of normalise.\n * @param {Boolean} [normalize=true]\n * @returns {Sharp}\n */\n\n\nfunction normalize(normalize) {\n  return this.normalise(normalize);\n}\n/**\n * Convolve the image with the specified kernel.\n *\n * @example\n * sharp(input)\n *   .convolve({\n *     width: 3,\n *     height: 3,\n *     kernel: [-1, 0, 1, -2, 0, 2, -1, 0, 1]\n *   })\n *   .raw()\n *   .toBuffer(function(err, data, info) {\n *     // data contains the raw pixel data representing the convolution\n *     // of the input image with the horizontal Sobel operator\n *   });\n *\n * @param {Object} kernel\n * @param {number} kernel.width - width of the kernel in pixels.\n * @param {number} kernel.height - width of the kernel in pixels.\n * @param {Array<number>} kernel.kernel - Array of length `width*height` containing the kernel values.\n * @param {number} [kernel.scale=sum] - the scale of the kernel in pixels.\n * @param {number} [kernel.offset=0] - the offset of the kernel in pixels.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction convolve(kernel) {\n  if (!is.object(kernel) || !Array.isArray(kernel.kernel) || !is.integer(kernel.width) || !is.integer(kernel.height) || !is.inRange(kernel.width, 3, 1001) || !is.inRange(kernel.height, 3, 1001) || kernel.height * kernel.width !== kernel.kernel.length) {\n    // must pass in a kernel\n    throw new Error('Invalid convolution kernel');\n  } // Default scale is sum of kernel values\n\n\n  if (!is.integer(kernel.scale)) {\n    kernel.scale = kernel.kernel.reduce(function (a, b) {\n      return a + b;\n    }, 0);\n  } // Clip scale to a minimum value of 1\n\n\n  if (kernel.scale < 1) {\n    kernel.scale = 1;\n  }\n\n  if (!is.integer(kernel.offset)) {\n    kernel.offset = 0;\n  }\n\n  this.options.convKernel = kernel;\n  return this;\n}\n/**\n * Any pixel value greather than or equal to the threshold value will be set to 255, otherwise it will be set to 0.\n * @param {number} [threshold=128] - a value in the range 0-255 representing the level at which the threshold will be applied.\n * @param {Object} [options]\n * @param {Boolean} [options.greyscale=true] - convert to single channel greyscale.\n * @param {Boolean} [options.grayscale=true] - alternative spelling for greyscale.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction threshold(threshold, options) {\n  if (!is.defined(threshold)) {\n    this.options.threshold = 128;\n  } else if (is.bool(threshold)) {\n    this.options.threshold = threshold ? 128 : 0;\n  } else if (is.integer(threshold) && is.inRange(threshold, 0, 255)) {\n    this.options.threshold = threshold;\n  } else {\n    throw is.invalidParameterError('threshold', 'integer between 0 and 255', threshold);\n  }\n\n  if (!is.object(options) || options.greyscale === true || options.grayscale === true) {\n    this.options.thresholdGrayscale = true;\n  } else {\n    this.options.thresholdGrayscale = false;\n  }\n\n  return this;\n}\n/**\n * Perform a bitwise boolean operation with operand image.\n *\n * This operation creates an output image where each pixel is the result of\n * the selected bitwise boolean `operation` between the corresponding pixels of the input images.\n *\n * @param {Buffer|string} operand - Buffer containing image data or string containing the path to an image file.\n * @param {string} operator - one of `and`, `or` or `eor` to perform that bitwise operation, like the C logic operators `&`, `|` and `^` respectively.\n * @param {Object} [options]\n * @param {Object} [options.raw] - describes operand when using raw pixel data.\n * @param {number} [options.raw.width]\n * @param {number} [options.raw.height]\n * @param {number} [options.raw.channels]\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction boolean(operand, operator, options) {\n  this.options.boolean = this._createInputDescriptor(operand, options);\n\n  if (is.string(operator) && is.inArray(operator, ['and', 'or', 'eor'])) {\n    this.options.booleanOp = operator;\n  } else {\n    throw is.invalidParameterError('operator', 'one of: and, or, eor', operator);\n  }\n\n  return this;\n}\n/**\n * Apply the linear formula a * input + b to the image (levels adjustment)\n * @param {number} [a=1.0] multiplier\n * @param {number} [b=0.0] offset\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction linear(a, b) {\n  if (!is.defined(a)) {\n    this.options.linearA = 1.0;\n  } else if (is.number(a)) {\n    this.options.linearA = a;\n  } else {\n    throw is.invalidParameterError('a', 'numeric', a);\n  }\n\n  if (!is.defined(b)) {\n    this.options.linearB = 0.0;\n  } else if (is.number(b)) {\n    this.options.linearB = b;\n  } else {\n    throw is.invalidParameterError('b', 'numeric', b);\n  }\n\n  return this;\n}\n/**\n * Recomb the image with the specified matrix.\n *\n * @since 0.21.1\n *\n * @example\n * sharp(input)\n *   .recomb([\n *    [0.3588, 0.7044, 0.1368],\n *    [0.2990, 0.5870, 0.1140],\n *    [0.2392, 0.4696, 0.0912],\n *   ])\n *   .raw()\n *   .toBuffer(function(err, data, info) {\n *     // data contains the raw pixel data after applying the recomb\n *     // With this example input, a sepia filter has been applied\n *   });\n *\n * @param {Array<Array<number>>} inputMatrix - 3x3 Recombination matrix\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction recomb(inputMatrix) {\n  if (!Array.isArray(inputMatrix) || inputMatrix.length !== 3 || inputMatrix[0].length !== 3 || inputMatrix[1].length !== 3 || inputMatrix[2].length !== 3) {\n    // must pass in a kernel\n    throw new Error('Invalid recombination matrix');\n  }\n\n  this.options.recombMatrix = [inputMatrix[0][0], inputMatrix[0][1], inputMatrix[0][2], inputMatrix[1][0], inputMatrix[1][1], inputMatrix[1][2], inputMatrix[2][0], inputMatrix[2][1], inputMatrix[2][2]].map(Number);\n  return this;\n}\n/**\n * Transforms the image using brightness, saturation and hue rotation.\n *\n * @since 0.22.1\n *\n * @example\n * sharp(input)\n *   .modulate({\n *     brightness: 2 // increase lightness by a factor of 2\n *   });\n *\n * sharp(input)\n *   .modulate({\n *     hue: 180 // hue-rotate by 180 degrees\n *   });\n *\n * // decreate brightness and saturation while also hue-rotating by 90 degrees\n * sharp(input)\n *   .modulate({\n *     brightness: 0.5,\n *     saturation: 0.5,\n *     hue: 90\n *   });\n *\n * @param {Object} [options]\n * @param {number} [options.brightness] Brightness multiplier\n * @param {number} [options.saturation] Saturation multiplier\n * @param {number} [options.hue] Degrees for hue rotation\n * @returns {Sharp}\n */\n\n\nfunction modulate(options) {\n  if (!is.plainObject(options)) {\n    throw is.invalidParameterError('options', 'plain object', options);\n  }\n\n  if ('brightness' in options) {\n    if (is.number(options.brightness) && options.brightness >= 0) {\n      this.options.brightness = options.brightness;\n    } else {\n      throw is.invalidParameterError('brightness', 'number above zero', options.brightness);\n    }\n  }\n\n  if ('saturation' in options) {\n    if (is.number(options.saturation) && options.saturation >= 0) {\n      this.options.saturation = options.saturation;\n    } else {\n      throw is.invalidParameterError('saturation', 'number above zero', options.saturation);\n    }\n  }\n\n  if ('hue' in options) {\n    if (is.integer(options.hue)) {\n      this.options.hue = options.hue % 360;\n    } else {\n      throw is.invalidParameterError('hue', 'number', options.hue);\n    }\n  }\n\n  return this;\n}\n/**\n * Decorate the Sharp prototype with operation-related functions.\n * @private\n */\n\n\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    rotate,\n    flip,\n    flop,\n    affine,\n    sharpen,\n    median,\n    blur,\n    flatten,\n    gamma,\n    negate,\n    normalise,\n    normalize,\n    convolve,\n    threshold,\n    boolean,\n    linear,\n    recomb,\n    modulate\n  });\n};","map":{"version":3,"sources":["/home/fv/js/capstone2/dogfriends/frontend/node_modules/sharp/lib/operation.js"],"names":["flatten","flattenArray","require","color","is","rotate","angle","options","defined","useExifOrientation","integer","number","rotationAngle","object","background","backgroundColour","rotationBackground","red","green","blue","Math","round","alpha","invalidParameterError","flip","bool","flop","affine","matrix","flatMatrix","length","every","affineMatrix","_setBackgroundColourOption","idx","affineIdx","idy","affineIdy","odx","affineOdx","ody","affineOdy","interpolator","inArray","Object","values","constructor","interpolators","affineInterpolator","sharpen","sigma","flat","jagged","sharpenSigma","inRange","sharpenFlat","sharpenJagged","median","size","medianSize","blur","blurSigma","gamma","gammaOut","negate","normalise","normalize","convolve","kernel","Array","isArray","width","height","Error","scale","reduce","a","b","offset","convKernel","threshold","greyscale","grayscale","thresholdGrayscale","boolean","operand","operator","_createInputDescriptor","string","booleanOp","linear","linearA","linearB","recomb","inputMatrix","recombMatrix","map","Number","modulate","plainObject","brightness","saturation","hue","module","exports","Sharp","assign","prototype"],"mappings":"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","sourcesContent":["'use strict';\n\nconst { flatten: flattenArray } = require('array-flatten');\nconst color = require('color');\nconst is = require('./is');\n\n/**\n * Rotate the output image by either an explicit angle\n * or auto-orient based on the EXIF `Orientation` tag.\n *\n * If an angle is provided, it is converted to a valid positive degree rotation.\n * For example, `-450` will produce a 270deg rotation.\n *\n * When rotating by an angle other than a multiple of 90,\n * the background colour can be provided with the `background` option.\n *\n * If no angle is provided, it is determined from the EXIF data.\n * Mirroring is supported and may infer the use of a flip operation.\n *\n * The use of `rotate` implies the removal of the EXIF `Orientation` tag, if any.\n *\n * Method order is important when both rotating and extracting regions,\n * for example `rotate(x).extract(y)` will produce a different result to `extract(y).rotate(x)`.\n *\n * @example\n * const pipeline = sharp()\n *   .rotate()\n *   .resize(null, 200)\n *   .toBuffer(function (err, outputBuffer, info) {\n *     // outputBuffer contains 200px high JPEG image data,\n *     // auto-rotated using EXIF Orientation tag\n *     // info.width and info.height contain the dimensions of the resized image\n *   });\n * readableStream.pipe(pipeline);\n *\n * @param {number} [angle=auto] angle of rotation.\n * @param {Object} [options] - if present, is an Object with optional attributes.\n * @param {string|Object} [options.background=\"#000000\"] parsed by the [color](https://www.npmjs.org/package/color) module to extract values for red, green, blue and alpha.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction rotate (angle, options) {\n  if (!is.defined(angle)) {\n    this.options.useExifOrientation = true;\n  } else if (is.integer(angle) && !(angle % 90)) {\n    this.options.angle = angle;\n  } else if (is.number(angle)) {\n    this.options.rotationAngle = angle;\n    if (is.object(options) && options.background) {\n      const backgroundColour = color(options.background);\n      this.options.rotationBackground = [\n        backgroundColour.red(),\n        backgroundColour.green(),\n        backgroundColour.blue(),\n        Math.round(backgroundColour.alpha() * 255)\n      ];\n    }\n  } else {\n    throw is.invalidParameterError('angle', 'numeric', angle);\n  }\n  return this;\n}\n\n/**\n * Flip the image about the vertical Y axis. This always occurs after rotation, if any.\n * The use of `flip` implies the removal of the EXIF `Orientation` tag, if any.\n * @param {Boolean} [flip=true]\n * @returns {Sharp}\n */\nfunction flip (flip) {\n  this.options.flip = is.bool(flip) ? flip : true;\n  return this;\n}\n\n/**\n * Flop the image about the horizontal X axis. This always occurs after rotation, if any.\n * The use of `flop` implies the removal of the EXIF `Orientation` tag, if any.\n * @param {Boolean} [flop=true]\n * @returns {Sharp}\n */\nfunction flop (flop) {\n  this.options.flop = is.bool(flop) ? flop : true;\n  return this;\n}\n\n/**\n * Perform an affine transform on an image. This operation will always occur after resizing, extraction and rotation, if any.\n *\n * You must provide an array of length 4 or a 2x2 affine transformation matrix.\n * By default, new pixels are filled with a black background. You can provide a background color with the `background` option.\n * A particular interpolator may also be specified. Set the `interpolator` option to an attribute of the `sharp.interpolator` Object e.g. `sharp.interpolator.nohalo`.\n *\n * In the case of a 2x2 matrix, the transform is:\n * - X = `matrix[0, 0]` \\* (x + `idx`) + `matrix[0, 1]` \\* (y + `idy`) + `odx`\n * - Y = `matrix[1, 0]` \\* (x + `idx`) + `matrix[1, 1]` \\* (y + `idy`) + `ody`\n *\n * where:\n * - x and y are the coordinates in input image.\n * - X and Y are the coordinates in output image.\n * - (0,0) is the upper left corner.\n *\n * @since 0.27.0\n *\n * @example\n * const pipeline = sharp()\n *   .affine([[1, 0.3], [0.1, 0.7]], {\n *      background: 'white',\n *      interpolate: sharp.interpolators.nohalo\n *   })\n *   .toBuffer((err, outputBuffer, info) => {\n *      // outputBuffer contains the transformed image\n *      // info.width and info.height contain the new dimensions\n *   });\n *\n * inputStream\n *   .pipe(pipeline);\n *\n * @param {Array<Array<number>>|Array<number>} matrix - affine transformation matrix\n * @param {Object} [options] - if present, is an Object with optional attributes.\n * @param {String|Object} [options.background=\"#000000\"] - parsed by the [color](https://www.npmjs.org/package/color) module to extract values for red, green, blue and alpha.\n * @param {Number} [options.idx=0] - input horizontal offset\n * @param {Number} [options.idy=0] - input vertical offset\n * @param {Number} [options.odx=0] - output horizontal offset\n * @param {Number} [options.ody=0] - output vertical offset\n * @param {String} [options.interpolator=sharp.interpolators.bicubic] - interpolator\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction affine (matrix, options) {\n  const flatMatrix = flattenArray(matrix);\n  if (flatMatrix.length === 4 && flatMatrix.every(is.number)) {\n    this.options.affineMatrix = flatMatrix;\n  } else {\n    throw is.invalidParameterError('matrix', '1x4 or 2x2 array', matrix);\n  }\n\n  if (is.defined(options)) {\n    if (is.object(options)) {\n      this._setBackgroundColourOption('affineBackground', options.background);\n      if (is.defined(options.idx)) {\n        if (is.number(options.idx)) {\n          this.options.affineIdx = options.idx;\n        } else {\n          throw is.invalidParameterError('options.idx', 'number', options.idx);\n        }\n      }\n      if (is.defined(options.idy)) {\n        if (is.number(options.idy)) {\n          this.options.affineIdy = options.idy;\n        } else {\n          throw is.invalidParameterError('options.idy', 'number', options.idy);\n        }\n      }\n      if (is.defined(options.odx)) {\n        if (is.number(options.odx)) {\n          this.options.affineOdx = options.odx;\n        } else {\n          throw is.invalidParameterError('options.odx', 'number', options.odx);\n        }\n      }\n      if (is.defined(options.ody)) {\n        if (is.number(options.ody)) {\n          this.options.affineOdy = options.ody;\n        } else {\n          throw is.invalidParameterError('options.ody', 'number', options.ody);\n        }\n      }\n      if (is.defined(options.interpolator)) {\n        if (is.inArray(options.interpolator, Object.values(this.constructor.interpolators))) {\n          this.options.affineInterpolator = options.interpolator;\n        } else {\n          throw is.invalidParameterError('options.interpolator', 'valid interpolator name', options.interpolator);\n        }\n      }\n    } else {\n      throw is.invalidParameterError('options', 'object', options);\n    }\n  }\n\n  return this;\n}\n\n/**\n * Sharpen the image.\n * When used without parameters, performs a fast, mild sharpen of the output image.\n * When a `sigma` is provided, performs a slower, more accurate sharpen of the L channel in the LAB colour space.\n * Separate control over the level of sharpening in \"flat\" and \"jagged\" areas is available.\n *\n * @param {number} [sigma] - the sigma of the Gaussian mask, where `sigma = 1 + radius / 2`.\n * @param {number} [flat=1.0] - the level of sharpening to apply to \"flat\" areas.\n * @param {number} [jagged=2.0] - the level of sharpening to apply to \"jagged\" areas.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction sharpen (sigma, flat, jagged) {\n  if (!is.defined(sigma)) {\n    // No arguments: default to mild sharpen\n    this.options.sharpenSigma = -1;\n  } else if (is.bool(sigma)) {\n    // Boolean argument: apply mild sharpen?\n    this.options.sharpenSigma = sigma ? -1 : 0;\n  } else if (is.number(sigma) && is.inRange(sigma, 0.01, 10000)) {\n    // Numeric argument: specific sigma\n    this.options.sharpenSigma = sigma;\n    // Control over flat areas\n    if (is.defined(flat)) {\n      if (is.number(flat) && is.inRange(flat, 0, 10000)) {\n        this.options.sharpenFlat = flat;\n      } else {\n        throw is.invalidParameterError('flat', 'number between 0 and 10000', flat);\n      }\n    }\n    // Control over jagged areas\n    if (is.defined(jagged)) {\n      if (is.number(jagged) && is.inRange(jagged, 0, 10000)) {\n        this.options.sharpenJagged = jagged;\n      } else {\n        throw is.invalidParameterError('jagged', 'number between 0 and 10000', jagged);\n      }\n    }\n  } else {\n    throw is.invalidParameterError('sigma', 'number between 0.01 and 10000', sigma);\n  }\n  return this;\n}\n\n/**\n * Apply median filter.\n * When used without parameters the default window is 3x3.\n * @param {number} [size=3] square mask size: size x size\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction median (size) {\n  if (!is.defined(size)) {\n    // No arguments: default to 3x3\n    this.options.medianSize = 3;\n  } else if (is.integer(size) && is.inRange(size, 1, 1000)) {\n    // Numeric argument: specific sigma\n    this.options.medianSize = size;\n  } else {\n    throw is.invalidParameterError('size', 'integer between 1 and 1000', size);\n  }\n  return this;\n}\n\n/**\n * Blur the image.\n * When used without parameters, performs a fast, mild blur of the output image.\n * When a `sigma` is provided, performs a slower, more accurate Gaussian blur.\n * @param {number} [sigma] a value between 0.3 and 1000 representing the sigma of the Gaussian mask, where `sigma = 1 + radius / 2`.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction blur (sigma) {\n  if (!is.defined(sigma)) {\n    // No arguments: default to mild blur\n    this.options.blurSigma = -1;\n  } else if (is.bool(sigma)) {\n    // Boolean argument: apply mild blur?\n    this.options.blurSigma = sigma ? -1 : 0;\n  } else if (is.number(sigma) && is.inRange(sigma, 0.3, 1000)) {\n    // Numeric argument: specific sigma\n    this.options.blurSigma = sigma;\n  } else {\n    throw is.invalidParameterError('sigma', 'number between 0.3 and 1000', sigma);\n  }\n  return this;\n}\n\n/**\n * Merge alpha transparency channel, if any, with a background.\n * @param {Object} [options]\n * @param {string|Object} [options.background={r: 0, g: 0, b: 0}] - background colour, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to black.\n * @returns {Sharp}\n */\nfunction flatten (options) {\n  this.options.flatten = is.bool(options) ? options : true;\n  if (is.object(options)) {\n    this._setBackgroundColourOption('flattenBackground', options.background);\n  }\n  return this;\n}\n\n/**\n * Apply a gamma correction by reducing the encoding (darken) pre-resize at a factor of `1/gamma`\n * then increasing the encoding (brighten) post-resize at a factor of `gamma`.\n * This can improve the perceived brightness of a resized image in non-linear colour spaces.\n * JPEG and WebP input images will not take advantage of the shrink-on-load performance optimisation\n * when applying a gamma correction.\n *\n * Supply a second argument to use a different output gamma value, otherwise the first value is used in both cases.\n *\n * @param {number} [gamma=2.2] value between 1.0 and 3.0.\n * @param {number} [gammaOut] value between 1.0 and 3.0. (optional, defaults to same as `gamma`)\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction gamma (gamma, gammaOut) {\n  if (!is.defined(gamma)) {\n    // Default gamma correction of 2.2 (sRGB)\n    this.options.gamma = 2.2;\n  } else if (is.number(gamma) && is.inRange(gamma, 1, 3)) {\n    this.options.gamma = gamma;\n  } else {\n    throw is.invalidParameterError('gamma', 'number between 1.0 and 3.0', gamma);\n  }\n  if (!is.defined(gammaOut)) {\n    // Default gamma correction for output is same as input\n    this.options.gammaOut = this.options.gamma;\n  } else if (is.number(gammaOut) && is.inRange(gammaOut, 1, 3)) {\n    this.options.gammaOut = gammaOut;\n  } else {\n    throw is.invalidParameterError('gammaOut', 'number between 1.0 and 3.0', gammaOut);\n  }\n  return this;\n}\n\n/**\n * Produce the \"negative\" of the image.\n * @param {Boolean} [negate=true]\n * @returns {Sharp}\n */\nfunction negate (negate) {\n  this.options.negate = is.bool(negate) ? negate : true;\n  return this;\n}\n\n/**\n * Enhance output image contrast by stretching its luminance to cover the full dynamic range.\n * @param {Boolean} [normalise=true]\n * @returns {Sharp}\n */\nfunction normalise (normalise) {\n  this.options.normalise = is.bool(normalise) ? normalise : true;\n  return this;\n}\n\n/**\n * Alternative spelling of normalise.\n * @param {Boolean} [normalize=true]\n * @returns {Sharp}\n */\nfunction normalize (normalize) {\n  return this.normalise(normalize);\n}\n\n/**\n * Convolve the image with the specified kernel.\n *\n * @example\n * sharp(input)\n *   .convolve({\n *     width: 3,\n *     height: 3,\n *     kernel: [-1, 0, 1, -2, 0, 2, -1, 0, 1]\n *   })\n *   .raw()\n *   .toBuffer(function(err, data, info) {\n *     // data contains the raw pixel data representing the convolution\n *     // of the input image with the horizontal Sobel operator\n *   });\n *\n * @param {Object} kernel\n * @param {number} kernel.width - width of the kernel in pixels.\n * @param {number} kernel.height - width of the kernel in pixels.\n * @param {Array<number>} kernel.kernel - Array of length `width*height` containing the kernel values.\n * @param {number} [kernel.scale=sum] - the scale of the kernel in pixels.\n * @param {number} [kernel.offset=0] - the offset of the kernel in pixels.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction convolve (kernel) {\n  if (!is.object(kernel) || !Array.isArray(kernel.kernel) ||\n      !is.integer(kernel.width) || !is.integer(kernel.height) ||\n      !is.inRange(kernel.width, 3, 1001) || !is.inRange(kernel.height, 3, 1001) ||\n      kernel.height * kernel.width !== kernel.kernel.length\n  ) {\n    // must pass in a kernel\n    throw new Error('Invalid convolution kernel');\n  }\n  // Default scale is sum of kernel values\n  if (!is.integer(kernel.scale)) {\n    kernel.scale = kernel.kernel.reduce(function (a, b) {\n      return a + b;\n    }, 0);\n  }\n  // Clip scale to a minimum value of 1\n  if (kernel.scale < 1) {\n    kernel.scale = 1;\n  }\n  if (!is.integer(kernel.offset)) {\n    kernel.offset = 0;\n  }\n  this.options.convKernel = kernel;\n  return this;\n}\n\n/**\n * Any pixel value greather than or equal to the threshold value will be set to 255, otherwise it will be set to 0.\n * @param {number} [threshold=128] - a value in the range 0-255 representing the level at which the threshold will be applied.\n * @param {Object} [options]\n * @param {Boolean} [options.greyscale=true] - convert to single channel greyscale.\n * @param {Boolean} [options.grayscale=true] - alternative spelling for greyscale.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction threshold (threshold, options) {\n  if (!is.defined(threshold)) {\n    this.options.threshold = 128;\n  } else if (is.bool(threshold)) {\n    this.options.threshold = threshold ? 128 : 0;\n  } else if (is.integer(threshold) && is.inRange(threshold, 0, 255)) {\n    this.options.threshold = threshold;\n  } else {\n    throw is.invalidParameterError('threshold', 'integer between 0 and 255', threshold);\n  }\n  if (!is.object(options) || options.greyscale === true || options.grayscale === true) {\n    this.options.thresholdGrayscale = true;\n  } else {\n    this.options.thresholdGrayscale = false;\n  }\n  return this;\n}\n\n/**\n * Perform a bitwise boolean operation with operand image.\n *\n * This operation creates an output image where each pixel is the result of\n * the selected bitwise boolean `operation` between the corresponding pixels of the input images.\n *\n * @param {Buffer|string} operand - Buffer containing image data or string containing the path to an image file.\n * @param {string} operator - one of `and`, `or` or `eor` to perform that bitwise operation, like the C logic operators `&`, `|` and `^` respectively.\n * @param {Object} [options]\n * @param {Object} [options.raw] - describes operand when using raw pixel data.\n * @param {number} [options.raw.width]\n * @param {number} [options.raw.height]\n * @param {number} [options.raw.channels]\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction boolean (operand, operator, options) {\n  this.options.boolean = this._createInputDescriptor(operand, options);\n  if (is.string(operator) && is.inArray(operator, ['and', 'or', 'eor'])) {\n    this.options.booleanOp = operator;\n  } else {\n    throw is.invalidParameterError('operator', 'one of: and, or, eor', operator);\n  }\n  return this;\n}\n\n/**\n * Apply the linear formula a * input + b to the image (levels adjustment)\n * @param {number} [a=1.0] multiplier\n * @param {number} [b=0.0] offset\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction linear (a, b) {\n  if (!is.defined(a)) {\n    this.options.linearA = 1.0;\n  } else if (is.number(a)) {\n    this.options.linearA = a;\n  } else {\n    throw is.invalidParameterError('a', 'numeric', a);\n  }\n  if (!is.defined(b)) {\n    this.options.linearB = 0.0;\n  } else if (is.number(b)) {\n    this.options.linearB = b;\n  } else {\n    throw is.invalidParameterError('b', 'numeric', b);\n  }\n  return this;\n}\n\n/**\n * Recomb the image with the specified matrix.\n *\n * @since 0.21.1\n *\n * @example\n * sharp(input)\n *   .recomb([\n *    [0.3588, 0.7044, 0.1368],\n *    [0.2990, 0.5870, 0.1140],\n *    [0.2392, 0.4696, 0.0912],\n *   ])\n *   .raw()\n *   .toBuffer(function(err, data, info) {\n *     // data contains the raw pixel data after applying the recomb\n *     // With this example input, a sepia filter has been applied\n *   });\n *\n * @param {Array<Array<number>>} inputMatrix - 3x3 Recombination matrix\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction recomb (inputMatrix) {\n  if (!Array.isArray(inputMatrix) || inputMatrix.length !== 3 ||\n      inputMatrix[0].length !== 3 ||\n      inputMatrix[1].length !== 3 ||\n      inputMatrix[2].length !== 3\n  ) {\n    // must pass in a kernel\n    throw new Error('Invalid recombination matrix');\n  }\n  this.options.recombMatrix = [\n    inputMatrix[0][0], inputMatrix[0][1], inputMatrix[0][2],\n    inputMatrix[1][0], inputMatrix[1][1], inputMatrix[1][2],\n    inputMatrix[2][0], inputMatrix[2][1], inputMatrix[2][2]\n  ].map(Number);\n  return this;\n}\n\n/**\n * Transforms the image using brightness, saturation and hue rotation.\n *\n * @since 0.22.1\n *\n * @example\n * sharp(input)\n *   .modulate({\n *     brightness: 2 // increase lightness by a factor of 2\n *   });\n *\n * sharp(input)\n *   .modulate({\n *     hue: 180 // hue-rotate by 180 degrees\n *   });\n *\n * // decreate brightness and saturation while also hue-rotating by 90 degrees\n * sharp(input)\n *   .modulate({\n *     brightness: 0.5,\n *     saturation: 0.5,\n *     hue: 90\n *   });\n *\n * @param {Object} [options]\n * @param {number} [options.brightness] Brightness multiplier\n * @param {number} [options.saturation] Saturation multiplier\n * @param {number} [options.hue] Degrees for hue rotation\n * @returns {Sharp}\n */\nfunction modulate (options) {\n  if (!is.plainObject(options)) {\n    throw is.invalidParameterError('options', 'plain object', options);\n  }\n  if ('brightness' in options) {\n    if (is.number(options.brightness) && options.brightness >= 0) {\n      this.options.brightness = options.brightness;\n    } else {\n      throw is.invalidParameterError('brightness', 'number above zero', options.brightness);\n    }\n  }\n  if ('saturation' in options) {\n    if (is.number(options.saturation) && options.saturation >= 0) {\n      this.options.saturation = options.saturation;\n    } else {\n      throw is.invalidParameterError('saturation', 'number above zero', options.saturation);\n    }\n  }\n  if ('hue' in options) {\n    if (is.integer(options.hue)) {\n      this.options.hue = options.hue % 360;\n    } else {\n      throw is.invalidParameterError('hue', 'number', options.hue);\n    }\n  }\n  return this;\n}\n\n/**\n * Decorate the Sharp prototype with operation-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    rotate,\n    flip,\n    flop,\n    affine,\n    sharpen,\n    median,\n    blur,\n    flatten,\n    gamma,\n    negate,\n    normalise,\n    normalize,\n    convolve,\n    threshold,\n    boolean,\n    linear,\n    recomb,\n    modulate\n  });\n};\n"]},"metadata":{},"sourceType":"script"}