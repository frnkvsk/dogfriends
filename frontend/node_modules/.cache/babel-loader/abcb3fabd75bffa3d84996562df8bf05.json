{"ast":null,"code":"// import Resizer from 'react-image-file-resizer';\n// const resizeFile = (file, w, h) => new Promise(resolve => {\n//   // const fr = new FileReader();\n//   var image = new Image();\n//   image.url = file[0].data_url;\n//   var canvas=document.createElement(\"canvas\");\n//   var context=canvas.getContext(\"2d\");\n//   canvas.width=w //image.width/4;\n//   canvas.height=h //image.height/4;\n//   context.drawImage(image,\n//       0,\n//       0,\n//       image.width,\n//       image.height,\n//       0,\n//       0,\n//       canvas.width,\n//       canvas.height\n//   );\n//   image.src = canvas.toDataURL();\n//   console.log('resizeFile image',image)\n//   console.log('resizeFile image.width',image.width)\n//   return image\n// });\n// var loadImageFile = function () {\n//   var uploadImage = document.getElementById(\"upload-Image\");\n//   //check and retuns the length of uploded file.\n//   if (uploadImage.files.length === 0) { \n//     return; \n//   }\n//   //Is Used for validate a valid file.\n//   var uploadFile = document.getElementById(\"upload-Image\").files[0];\n//   if (!filterType.test(uploadFile.type)) {\n//     alert(\"Please select a valid image.\"); \n//     return;\n//   }\n//   fileReader.readAsDataURL(uploadFile);\n// }\nconst ResizeImage = async (file, width, height) => {\n  let fileReader = new FileReader();\n  let blob = new Blob(Buffer.from(file[0].data_url));\n  fileReader.readAsArrayBuffer(blob);\n  let resized = null;\n\n  fileReader.onload = function (event) {\n    let img = new Image();\n\n    img.onload = function () {\n      let canvas = document.createElement(\"canvas\");\n      let context = canvas.getContext(\"2d\");\n      canvas.width = img.width / 4;\n      canvas.height = img.height / 4;\n      context.drawImage(img, 0, 0, img.width, img.height, 0, 0, canvas.width, canvas.height);\n      resized = canvas.toDataURL();\n      console.log('resized', resized);\n    };\n\n    img.src = event.target.result;\n  };\n\n  const res = resized; //await resizeFile(file, width, height);\n\n  console.log('res', res);\n  return res;\n};\n\n_c = ResizeImage;\nexport default ResizeImage; // Resizer.imageFileResizer(\n//     file, // Is the file of the image which will resized.\n//     maxWidth, // Is the maxWidth of the resized new image.\n//     maxHeight, // Is the maxHeight of the resized new image.\n//     compressFormat, // Is the compressFormat of the resized new image.\n//     quality, // Is the quality of the resized new image.\n//     rotation, // Is the degree of clockwise rotation to apply to uploaded image. \n//     responseUriFunc,  // Is the callBack function of the resized new image URI.\n//     outputType,  // Is the output type of the resized new image.\n//     minWidth, // Is the minWidth of the resized new image.\n//     minHeight, // Is the minHeight of the resized new image.\n//     );\n\nvar _c;\n\n$RefreshReg$(_c, \"ResizeImage\");","map":{"version":3,"sources":["/home/fv/js/capstone2/dogfriends/frontend/src/features/dogfriends/components/ResizeImage.js"],"names":["ResizeImage","file","width","height","fileReader","FileReader","blob","Blob","Buffer","from","data_url","readAsArrayBuffer","resized","onload","event","img","Image","canvas","document","createElement","context","getContext","drawImage","toDataURL","console","log","src","target","result","res"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,MAAMA,WAAW,GAAG,OAAOC,IAAP,EAAaC,KAAb,EAAoBC,MAApB,KAA+B;AACjD,MAAIC,UAAU,GAAG,IAAIC,UAAJ,EAAjB;AACA,MAAIC,IAAI,GAAG,IAAIC,IAAJ,CAASC,MAAM,CAACC,IAAP,CAAYR,IAAI,CAAC,CAAD,CAAJ,CAAQS,QAApB,CAAT,CAAX;AACAN,EAAAA,UAAU,CAACO,iBAAX,CAA6BL,IAA7B;AACA,MAAIM,OAAO,GAAG,IAAd;;AAEAR,EAAAA,UAAU,CAACS,MAAX,GAAoB,UAAUC,KAAV,EAAiB;AACnC,QAAIC,GAAG,GAAG,IAAIC,KAAJ,EAAV;;AAEAD,IAAAA,GAAG,CAACF,MAAJ,GAAW,YAAU;AACjB,UAAII,MAAM,GAACC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAX;AACA,UAAIC,OAAO,GAACH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AACAJ,MAAAA,MAAM,CAACf,KAAP,GAAaa,GAAG,CAACb,KAAJ,GAAU,CAAvB;AACAe,MAAAA,MAAM,CAACd,MAAP,GAAcY,GAAG,CAACZ,MAAJ,GAAW,CAAzB;AACAiB,MAAAA,OAAO,CAACE,SAAR,CAAkBP,GAAlB,EACI,CADJ,EAEI,CAFJ,EAGIA,GAAG,CAACb,KAHR,EAIIa,GAAG,CAACZ,MAJR,EAKI,CALJ,EAMI,CANJ,EAOIc,MAAM,CAACf,KAPX,EAQIe,MAAM,CAACd,MARX;AAWAS,MAAAA,OAAO,GAAGK,MAAM,CAACM,SAAP,EAAV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBb,OAAtB;AACH,KAlBD;;AAmBAG,IAAAA,GAAG,CAACW,GAAJ,GAAQZ,KAAK,CAACa,MAAN,CAAaC,MAArB;AACD,GAvBD;;AAwBA,QAAMC,GAAG,GAAGjB,OAAZ,CA9BiD,CA8B7B;;AACpBY,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBI,GAAlB;AACA,SAAOA,GAAP;AACD,CAjCD;;KAAM7B,W;AAmCN,eAAeA,WAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import Resizer from 'react-image-file-resizer';\n\n// const resizeFile = (file, w, h) => new Promise(resolve => {\n//   // const fr = new FileReader();\n//   var image = new Image();\n//   image.url = file[0].data_url;\n//   var canvas=document.createElement(\"canvas\");\n//   var context=canvas.getContext(\"2d\");\n//   canvas.width=w //image.width/4;\n//   canvas.height=h //image.height/4;\n//   context.drawImage(image,\n//       0,\n//       0,\n//       image.width,\n//       image.height,\n//       0,\n//       0,\n//       canvas.width,\n//       canvas.height\n//   );\n  \n//   image.src = canvas.toDataURL();\n//   console.log('resizeFile image',image)\n//   console.log('resizeFile image.width',image.width)\n//   return image\n// });\n\n\n// var loadImageFile = function () {\n//   var uploadImage = document.getElementById(\"upload-Image\");\n  \n//   //check and retuns the length of uploded file.\n//   if (uploadImage.files.length === 0) { \n//     return; \n//   }\n  \n//   //Is Used for validate a valid file.\n//   var uploadFile = document.getElementById(\"upload-Image\").files[0];\n//   if (!filterType.test(uploadFile.type)) {\n//     alert(\"Please select a valid image.\"); \n//     return;\n//   }\n  \n//   fileReader.readAsDataURL(uploadFile);\n// }\nconst ResizeImage = async (file, width, height) => {\n  let fileReader = new FileReader();\n  let blob = new Blob(Buffer.from(file[0].data_url));\n  fileReader.readAsArrayBuffer(blob);\n  let resized = null;\n  \n  fileReader.onload = function (event) {\n    let img = new Image();\n    \n    img.onload=function(){\n        let canvas=document.createElement(\"canvas\");\n        let context=canvas.getContext(\"2d\");\n        canvas.width=img.width/4;\n        canvas.height=img.height/4;\n        context.drawImage(img,\n            0,\n            0,\n            img.width,\n            img.height,\n            0,\n            0,\n            canvas.width,\n            canvas.height\n        );\n        \n        resized = canvas.toDataURL();\n        console.log('resized',resized)\n    }\n    img.src=event.target.result;\n  };\n  const res = resized;//await resizeFile(file, width, height);\n  console.log('res',res)\n  return res\n}\n\nexport default ResizeImage\n// Resizer.imageFileResizer(\n//     file, // Is the file of the image which will resized.\n//     maxWidth, // Is the maxWidth of the resized new image.\n//     maxHeight, // Is the maxHeight of the resized new image.\n//     compressFormat, // Is the compressFormat of the resized new image.\n//     quality, // Is the quality of the resized new image.\n//     rotation, // Is the degree of clockwise rotation to apply to uploaded image. \n//     responseUriFunc,  // Is the callBack function of the resized new image URI.\n//     outputType,  // Is the output type of the resized new image.\n//     minWidth, // Is the minWidth of the resized new image.\n//     minHeight, // Is the minHeight of the resized new image.\n//     );"]},"metadata":{},"sourceType":"module"}